const { SlashCommandBuilder } = require('discord.js');
const { checkAdministrator } = require(`../../permissionCheck`)
const GuildUpdateStatus = require('../../schemas/brb_studio');
const AFKStatus = require('../../schemas/AfkSchemas');
const BannedUser = require('../../schemas/Raid');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('brb_studio')
        .setDescription('üîπ Qu·∫£n l√Ω tr·∫°ng th√°i c√°c tr·∫°ng th√°i c·ªßa bot.')
        .addStringOption(option =>
            option
                .setName('select')
                .setDescription('Ch·ªçn tr·∫°ng th√°i c·∫ßn b·∫≠t/t·∫Øt')
                .setRequired(true)
                .addChoices(
                    { name: 'Bot ƒë·ªçc t√™n ng∆∞·ªùi d√πng khi ng∆∞·ªùi d√πng tham gia ho·∫∑c r·ªùi kh·ªèi k√™nh tho·∫°i (VSU)', value: 'voiceStateUpdate_bot ƒë·ªçc t√™n ng∆∞·ªùi d√πng khi ng∆∞·ªùi d√πng tham gia ho·∫∑c r·ªùi kh·ªèi k√™nh tho·∫°i' },
                    { name: 'T·ª± ƒë·ªông chuy·ªÉn nh·ªØng ng∆∞·ªùi d√πng kh√¥ng ho·∫°t ƒë·ªông trong voice sang k√™nh afk (RDY)', value: 'Ready_T·ª± ƒë·ªông ki·ªÉm tra ng∆∞·ªùi d√πng AFK trong k√™nh tho·∫°i' },
                    { name: 'H·ªá th·ªëng ch·ªëng raid t·ª± ƒë·ªông (AR)', value: 'guildMemberAdd_Ph√°t hi·ªán v√† ngƒÉn ch·∫∑n ng∆∞·ªùi d√πng ph√° server' }
                )
        ),

    async execute(interaction) {

        const hasPermission = await checkAdministrator(interaction);
        if (!hasPermission) return;

        const guildId = interaction.guild.id;
        const selectedEvent = interaction.options.getString('select');
        const [eventName, Ghi_ch√∫] = selectedEvent.split('_');

        try {
            let eventStatus;
            if (Ghi_ch√∫ && Ghi_ch√∫ === 'bot ƒë·ªçc t√™n ng∆∞·ªùi d√πng khi ng∆∞·ªùi d√πng tham gia ho·∫∑c r·ªùi kh·ªèi k√™nh tho·∫°i') {
                // L·∫•y d·ªØ li·ªáu t·ª´ brb_studio.js
                eventStatus = await GuildUpdateStatus.findOneAndUpdate(
                    { guildId, event: eventName, Ghi_ch√∫ },
                    { $setOnInsert: { isEnabled: true } }, // N·∫øu ch∆∞a c√≥, t·∫°o m·∫∑c ƒë·ªãnh l√† b·∫≠t
                    { upsert: true, new: true }
                );
            } else if (Ghi_ch√∫ && Ghi_ch√∫ === 'T·ª± ƒë·ªông ki·ªÉm tra ng∆∞·ªùi d√πng AFK trong k√™nh tho·∫°i') {
                // L·∫•y d·ªØ li·ªáu t·ª´ AFKSchemas.js
                eventStatus = await AFKStatus.findOneAndUpdate(
                    { guildId, event: eventName, Ghi_ch√∫ },
                    { $setOnInsert: { isEnabled: true } }, // N·∫øu ch∆∞a c√≥, t·∫°o m·∫∑c ƒë·ªãnh l√† b·∫≠t
                    { upsert: true, new: true }
                );
            } else if (Ghi_ch√∫ === 'Ph√°t hi·ªán v√† ngƒÉn ch·∫∑n ng∆∞·ªùi d√πng ph√° server') {
                const config = await BannedUser.findOneAndUpdate(
                    { guildId },
                    [{ $set: { enabled: { $not: "$enabled" } } }],
                    { upsert: true, new: true }
                  );
          
                  return await interaction.reply(
                    `ƒê√£ ${config.enabled ? '**b·∫≠t**' : '**t·∫Øt**'} h·ªá th·ªëng: **Ph√°t hi·ªán v√† ngƒÉn ch·∫∑n ng∆∞·ªùi d√πng ph√° server.**`
                  );
                } else {
                  throw new Error('Ch·ªçn s·ª± ki·ªán kh√¥ng h·ª£p l·ªá.');
                }

            // ƒê·∫£o tr·∫°ng th√°i b·∫≠t/t·∫Øt
            const newStatus = !eventStatus.isEnabled;
            const updatedStatus = await eventStatus.constructor.findOneAndUpdate(
                { guildId, event: eventName, Ghi_ch√∫ },
                { isEnabled: newStatus },
                { new: true } // L·∫•y tr·∫°ng th√°i m·ªõi nh·∫•t
            );

            if (!updatedStatus) throw new Error('Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i s·ª± ki·ªán.');

            await interaction.reply(
                `ƒê√£ ${newStatus ? '**b·∫≠t**' : '**t·∫Øt**'} h·ªá th·ªëng: **${Ghi_ch√∫}**.`
            );

        } catch (error) {
            console.error('L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i s·ª± ki·ªán:', error);
            await interaction.reply('ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω y√™u c·∫ßu. Vui l√≤ng th·ª≠ l·∫°i sau.');
        }
    },
};

