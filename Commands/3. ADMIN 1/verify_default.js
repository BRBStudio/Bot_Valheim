const { EmbedBuilder, ButtonStyle, ActionRowBuilder, SlashCommandBuilder, PermissionsBitField, ButtonBuilder } = require('discord.js');
const config = require('../../config');
const { verifyDefault } = require('../../ButtonPlace/ButtonBuilder');
const { VerifyUsers } = require('../../schemas/defaultCaptchaSchema');
const checkPermissions = require('../../Handlers/CheckPermissionSpecial');
const CommandStatus = require('../../schemas/Command_Status');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('verify_default')
        .setDescription('üîπ ƒê·∫∑t k√™nh x√°c minh vai tr√≤ th√†nh vi√™n')
        .addSubcommand(subcommand =>
            subcommand
                .setName('setup')
                .setDescription('üîπ Thi·∫øt l·∫≠p k√™nh nh·∫≠n n√∫t x√°c minh vai tr√≤')
                .addChannelOption(option =>
                    option.setName('channel')
                        .setDescription('G·ª≠i x√°c minh t√†i kho·∫£n ƒë·∫øn k√™nh n√†y')
                        .setRequired(true)
                ))
        .addSubcommand(subcommand =>
            subcommand
                .setName('remove')
                .setDescription('üîπ X√≥a d·ªØ li·ªáu c·ªßa ng∆∞·ªùi d√πng')
                .addUserOption(option =>
                    option.setName('user')
                        .setDescription('Ng∆∞·ªùi d√πng b·∫°n mu·ªën x√≥a d·ªØ li·ªáu')
                        .setRequired(true)
                )
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('data')
                .setDescription('üîπ Xem danh s√°ch nh·ªØng ng∆∞·ªùi ƒë√£ x√°c th·ª±c')
                .addStringOption(option =>
                    option.setName(`id-server`)
                        .setDescription(`id m√°y ch·ªß m√† b·∫°n mu·ªën xem d·ªØ li·ªáu`)
                        .setRequired(true)
                )
        ),
    async execute(interaction) {

        try {

            // Ki·ªÉm tra tr·∫°ng th√°i c·ªßa l·ªánh
            const commandStatus = await CommandStatus.findOne({ command: '/verify_default' });

            // N·∫øu l·ªánh ƒëang t·∫Øt, g·ª≠i th√¥ng b√°o v√† kh√¥ng th·ª±c hi·ªán l·ªánh
            if (commandStatus && commandStatus.status === 'off') {
                return interaction.reply('L·ªánh n√†y ƒë√£ b·ªã t·∫Øt, vui l√≤ng th·ª≠ l·∫°i sau.');
            }

            // Ki·ªÉm tra xem t∆∞∆°ng t√°c c√≥ t·ªìn t·∫°i kh√¥ng
            if (!interaction) {
                return;
            }

            // Ho√£n ph·∫£n h·ªìi ngay l·∫≠p t·ª©c ƒë·ªÉ tr√°nh l·ªói timeout
            await interaction.deferReply({ ephemeral: true });

            // Ki·ªÉm tra l·ªánh ph·ª•
            const subcommand = interaction.options.getSubcommand();

            if (subcommand === 'setup') {

                if (!interaction.member.permissions.has(PermissionsBitField.Flags.Administrator)) {
                    await interaction.editReply({
                        content: `B·∫°n kh√¥ng c√≥ quy·ªÅn ***QU·∫¢N TR·ªä VI√äN*** ƒë·ªÉ th·ª±c hi·ªán h√†nh ƒë·ªông n√†y.`,
                        ephemeral: true
                    });
                    return;
                }

                const channel = interaction.options.getChannel('channel');
                const verifyEmbed = new EmbedBuilder()
                    .setTitle("K√≠ch Ho·∫°t Th√†nh Vi√™n")
                    .setDescription('Nh·∫•p v√†o n√∫t ƒë·ªÉ x√°c minh t√†i kho·∫£n c·ªßa b·∫°n v√† ƒë·ªìng √Ω tu√¢n th·ªß quy ƒë·ªãnh server ƒë·ªÉ c√≥ quy·ªÅn truy c·∫≠p v√†o c√°c k√™nh.')
                    .setColor(config.embedGreen);

                await interaction.guild.roles.fetch();

                let sendChannel = await channel.send({
                    embeds: [verifyEmbed],
                    components: [
                        new ActionRowBuilder().setComponents(
                            verifyDefault,
                        ),
                    ],
                });

                if (!sendChannel) {
                    return interaction.followUp({ content: 'ƒê√£ c√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i sau.', ephemeral: true });
                }

                // Xo√° ph·∫£n h·ªìi t·∫°m th·ªùi sau khi x·ª≠ l√Ω th√†nh c√¥ng
                await interaction.editReply({ content: 'ƒê√£ thi·∫øt l·∫≠p x√°c minh th√†nh c√¥ng.', ephemeral: true });
            } else if (subcommand === 'remove') {

                if (interaction.guild.ownerId !== interaction.user.id) {
                    return await interaction.editReply({ content: "L·ªánh n√†y ch·ªâ d√†nh cho ch·ªß s·ªü h·ªØu m√°y ch·ªß", ephemeral: true });
                }

                // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng v√† m√°y ch·ªß hi·ªán t·∫°i
                const user = interaction.options.getUser('user'); // Ng∆∞·ªùi d√πng ƒë∆∞·ª£c ch·ªçn
                const guildId = interaction.guild.id; // ID m√°y ch·ªß hi·ªán t·∫°i

                // T√¨m ki·∫øm ng∆∞·ªùi d√πng trong VerifyUsers b·∫±ng User ID v√† Guild ID
                const result = await VerifyUsers.findOneAndDelete({ User: user.id, Guild: guildId });

                if (result) {
                    // N·∫øu t√¨m th·∫•y v√† x√≥a th√†nh c√¥ng
                    await interaction.editReply({ content: `ƒê√£ x√≥a d·ªØ li·ªáu c·ªßa ng∆∞·ªùi d√πng ${user.displayName}.`, ephemeral: true });
                } else {
                    // N·∫øu kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu
                    await interaction.editReply({ content: `Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu c·ªßa ng∆∞·ªùi d√πng ${user.displayName}.`, ephemeral: true });
                }
            } else if (subcommand === 'data') {

                if (!checkPermissions(interaction)) {
                    return interaction.editReply('D√†nh cho Dev, b·∫°n kh√¥ng th·ªÉ s·ª≠ d·ª•ng ƒëi·ªÅu n√†y.');
                  }

                // L·∫•y ID m√°y ch·ªß t·ª´ tham s·ªë id-server
                const serverId = interaction.options.getString('id-server');

                try {

                    // L·∫•y th√¥ng tin m√°y ch·ªß t·ª´ ID
                    const guild = await interaction.client.guilds.fetch(serverId);
                    const guildName = guild.name; // L·∫•y t√™n m√°y ch·ªß

                    // T√¨m ki·∫øm danh s√°ch ng∆∞·ªùi d√πng ƒë√£ x√°c th·ª±c trong m√°y ch·ªß v·ªõi ID ƒë√£ nh·∫≠p
                    const users = await VerifyUsers.find({ Guild: serverId });

                    if (users.length > 0) {
                        // T·∫°o danh s√°ch ng∆∞·ªùi d√πng ƒë√£ x√°c th·ª±c
                        const userList = users.map(user => `<@${user.User}>`).join('\n');
                        
                        // G·ª≠i danh s√°ch t·ªõi ng∆∞·ªùi d√πng
                        await interaction.editReply({
                            content: `Danh s√°ch ng∆∞·ªùi ƒë√£ x√°c th·ª±c trong m√°y ch·ªß **${guildName}** (ID: **${serverId}**):\n${userList}`,
                            ephemeral: true
                        });
                    } else {
                        // N·∫øu kh√¥ng c√≥ ng∆∞·ªùi d√πng n√†o ƒë√£ x√°c th·ª±c
                        await interaction.editReply({
                            content: `Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ng∆∞·ªùi d√πng ƒë√£ x√°c th·ª±c trong m√°y ch·ªß **${guildName}** (ID: **${serverId}**).`,
                            ephemeral: true
                        });
                    }
                } catch (error) {
                    // X·ª≠ l√Ω l·ªói n·∫øu kh√¥ng t√¨m th·∫•y m√°y ch·ªß
                    await interaction.editReply({
                        content: `Kh√¥ng th·ªÉ t√¨m th·∫•y m√°y ch·ªß v·ªõi ID: **${serverId}**.`,
                        ephemeral: true
                    });
                    console.error(error);
                }
            }
        } catch (error) {
            console.error(error);
            return interaction.followUp({ content: 'ƒê√£ c√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω n√∫t.', ephemeral: true });
        }
    },
};