const { SlashCommandBuilder, PermissionsBitField, EmbedBuilder } = require('discord.js');
const ms = require('ms');
const { checkAdministrator } = require(`../../permissionCheck`)
const checkPermissions = require('../../Handlers/CheckPermissionSpecial');
const giveawaySchema = require('../../schemas/giveawaySchema');
const CommandStatus = require('../../schemas/Command_Status');
const config = require('../../config')

module.exports = {
    data: new SlashCommandBuilder()
        .setName('giveaway')
        .setDescription('üîπ T·∫•t c·∫£ c√°c ti·ªán √≠ch t·∫∑ng qu√† b·∫°n c·∫ßn')
        .addSubcommand(subcommand =>
            subcommand
                .setName('start')
                .setDescription('üîπ B·∫Øt ƒë·∫ßu t·∫∑ng qu√†')
                .addStringOption(option => option.setName('reward').setDescription('Ph·∫ßn th∆∞·ªüng c·ªßa ch∆∞∆°ng tr√¨nh t·∫∑ng qu√†').setRequired(true))
                .addStringOption(option => option.setName('duration').setDescription('Th·ªùi gian t·∫∑ng qu√† [ƒë·ªãnh d·∫°ng: s(gi√¢y), m(ph√∫t), h(gi·ªù), d(ng√†y)]').setRequired(true))
                .addIntegerOption(option => option.setName('winners').setDescription('S·ªë l∆∞·ª£ng ng∆∞·ªùi chi·∫øn th·∫Øng.').setRequired(true).setMinValue(1))
                .addUserOption(option => option.setName('host').setDescription('Ng∆∞·ªùi d√πng ƒëang t·ªï ch·ª©c t·∫∑ng qu√†'))
                .addAttachmentOption(option => option.setName('thumbnail').setDescription('Th√™m h√¨nh thu nh·ªè m√¥ t·∫£ t·∫∑ng th∆∞·ªüng.')))// Th√™m h√¨nh thu nh·ªè v√†o ph·∫ßn nh√∫ng t·∫∑ng th∆∞·ªüng.
        .addSubcommand(subcommand =>
            subcommand
                .setName('reroll')
                .setDescription('üîπ Ch·ªçn ng∆∞·ªùi chi·∫øn th·∫Øng m·ªõi.')
                .addStringOption(option => option.setName('message-id').setDescription('ID tin nh·∫Øn c·ªßa ph·∫ßn qu√† t·∫∑ng b·∫°n mu·ªën l·∫•y l·∫°i.').setRequired(true)))
        .addSubcommand(subcommand =>
            subcommand
                .setName('pause')
                .setDescription('üîπ T·∫°m d·ª´ng m·ªôt ch∆∞∆°ng tr√¨nh t·∫∑ng qu√† ƒëang di·ªÖn ra.')
                .addStringOption(option => option.setName('message-id').setDescription('ID tin nh·∫Øn c·ªßa ch∆∞∆°ng tr√¨nh t·∫∑ng qu√† m√† b·∫°n mu·ªën t·∫°m d·ª´ng.').setRequired(true)))
        .addSubcommand(subcommand =>
            subcommand
                .setName('resume')
                .setDescription('üîπ Ti·∫øp t·ª•c t·∫∑ng qu√† ƒë√£ t·∫°m d·ª´ng.')
                .addStringOption(option => option.setName('message-id').setDescription('ID tin nh·∫Øn c·ªßa ch∆∞∆°ng tr√¨nh t·∫∑ng qu√† m√† b·∫°n mu·ªën ti·∫øp t·ª•c.').setRequired(true)))
        .addSubcommand(subcommand =>
            subcommand
                .setName('end')
                .setDescription('üîπ K·∫øt th√∫c m·ªôt cu·ªôc t·∫∑ng qu√†.')
                .addStringOption(option => option.setName('message-id').setDescription('ID tin nh·∫Øn c·ªßa ch∆∞∆°ng tr√¨nh t·∫∑ng qu√† m√† b·∫°n mu·ªën k·∫øt th√∫c.').setRequired(true)))
        // .addSubcommand(subcommand =>
        //     subcommand
        //         .setName('cancel')
        //         .setDescription('D·ª´ng t·∫∑ng qu√†.')
        //         .addStringOption(option => option.setName('message-id').setDescription('ID tin nh·∫Øn c·ªßa ph·∫ßn qu√† t·∫∑ng m√† b·∫°n mu·ªën h·ªßy.').setRequired(true)))
        .addSubcommand(subcommand =>
            subcommand
                .setName('remove-data')
                .setDescription('üîπ X√≥a t·∫•t c·∫£ d·ªØ li·ªáu qu√† t·∫∑ng.')), // Th√™m subcommand 'kk'

    
    async execute(interaction, client) {

        // Ki·ªÉm tra tr·∫°ng th√°i c·ªßa l·ªánh
        const commandStatus = await CommandStatus.findOne({ command: '/giveaway' });

        // N·∫øu l·ªánh ƒëang t·∫Øt, g·ª≠i th√¥ng b√°o v√† kh√¥ng th·ª±c hi·ªán l·ªánh
        if (commandStatus && commandStatus.status === 'off') {
            return interaction.reply('L·ªánh n√†y ƒë√£ b·ªã t·∫Øt, vui l√≤ng th·ª≠ l·∫°i sau.');
        }

        const subcommand = interaction.options.getSubcommand();

        // X·ª≠ l√Ω l·ªánh /giveaway start
        if (subcommand === 'start') {

            const hasPermission = await checkAdministrator(interaction);
            if (!hasPermission) return;

            // S·ª≠ d·ª•ng deferReply ƒë·ªÉ x√°c nh·∫≠n t∆∞∆°ng t√°c
            await interaction.deferReply({ ephemeral: true });

            const reward = interaction.options.getString('reward');
            const duration = interaction.options.getString('duration');
            const winners = interaction.options.getInteger('winners');
            const host = interaction.options.getUser('host') || interaction.user; // N·∫øu kh√¥ng c√≥ host, m·∫∑c ƒë·ªãnh l√† ng∆∞·ªùi d√πng g·ªçi l·ªánh
            const thumbnail = interaction.options.getAttachment('thumbnail');
            const channelId = interaction.channel.id; // L·∫•y ID c·ªßa k√™nh hi·ªán t·∫°i
            const giveawayEndDate = Date.now() + ms(duration); // T√≠nh th·ªùi gian k·∫øt th√∫c d·ª±a tr√™n duration

            // Ki·ªÉm tra ƒë·ªãnh d·∫°ng c·ªßa duration
            const durationRegex = /^\d+[smhd]$/; // Bi·ªÉu th·ª©c ch√≠nh quy cho c√°c ƒë·ªãnh d·∫°ng h·ª£p l·ªá
            if (!durationRegex.test(duration)) {
                return interaction.editReply({ content: 'B·∫°n c·∫ßn vi·∫øt ƒë√∫ng ƒë·ªãnh d·∫°ng cho tr∆∞·ªùng `duration`.\n\nV√≠ d·ª•:\n`10s`( t·ª©c l√† 10 gi√¢y )\n`1m` ( t·ª©c l√† 1 ph√∫t )\n`1h` ( t·ª©c l√† 1 gi·ªù )\n`1d` ( t·ª©c l√† 1 ng√†y ).', ephemeral: true });
            }

            // H√†m ƒë·ªãnh d·∫°ng th·ªùi gian th√†nh ti·∫øng Vi·ªát
            const formatVietnameseDate = (date) => {
                const options = {
                    weekday: 'long',
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit',
                    second: '2-digit',
                    timeZone: 'Asia/Ho_Chi_Minh',
                };
                const formattedDate = new Intl.DateTimeFormat('vi-VN', options).format(date);
                const formattedDateWithNam = formattedDate.replace(/, (\d{4})/, ' nƒÉm $1');
                return `v√†o ${formattedDateWithNam}`;
            };

            // Th·ªùi gian k·∫øt th√∫c ƒë√£ ƒë∆∞·ª£c ƒë·ªãnh d·∫°ng th√†nh ti·∫øng Vi·ªát
            const formattedEndTime = formatVietnameseDate(new Date(giveawayEndDate))

            // Chuy·ªÉn chu·ªói ph·∫ßn th∆∞·ªüng th√†nh danh s√°ch xu·ªëng d√≤ng
            const rewardList = reward.split(',').map(item => item.trim()).join('\n');

            // T·∫°o embed cho giveaway
            const embed = new EmbedBuilder()
                .setTitle(`**PH·∫¶N TH∆Ø·ªûNGüéâ**\n${rewardList}`)
                .setDescription(`T·ªï ch·ª©c b·ªüi: ${host}\n\nNh·∫•p v√†o ph·∫£n ·ª©ng üéâ b√™n d∆∞·ªõi tin nh·∫Øn ƒë·ªÉ tham gia\n\nTh·ªùi gian k·∫øt th√∫c: <t:${Math.floor(giveawayEndDate / 1000)}:R>`)
                .setColor('Random')
                .setThumbnail(thumbnail ? thumbnail.url : null)
                .setFooter({ text: `S·ªë l∆∞·ª£ng qu√†: ${winners}` })
                .setTimestamp();

            // G·ª≠i tin nh·∫Øn giveaway
            const giveawayMessage = await interaction.channel.send({ content: `@everyone M·ªôt ch∆∞∆°ng tr√¨nh t·∫∑ng qu√† m·ªõi ƒë√£ b·∫Øt ƒë·∫ßu! üéâ`, embeds: [embed] });

            // Th√™m ph·∫£n ·ª©ng üéâ v√†o tin nh·∫Øn giveaway
            await giveawayMessage.react('üéâ'); // Th√™m ph·∫£n ·ª©ng cho ng∆∞·ªùi d√πng t∆∞∆°ng t√°c

            // T·∫°o m·ªôt collector ƒë·ªÉ theo d√µi c√°c ph·∫£n ·ª©ng
            const filter = (reaction, user) => {
                return user.id !== client.user.id; // L·ªçc b·ªè ph·∫£n ·ª©ng c·ªßa bot
            };

            const collector = giveawayMessage.createReactionCollector({ filter, dispose: true });

            // X·ª≠ l√Ω khi m·ªôt ph·∫£n ·ª©ng m·ªõi ƒë∆∞·ª£c th√™m v√†o
            collector.on('collect', async (reaction, user) => {
                if (reaction.emoji.name !== 'üéâ') {
                    await reaction.users.remove(user.id); // X√≥a ph·∫£n ·ª©ng n·∫øu kh√¥ng ph·∫£i l√† üéâ
                }
            });
            
            

            // L∆∞u ho·∫∑c c·∫≠p nh·∫≠t d·ªØ li·ªáu v√†o MongoDB
            const existingGiveaway = await giveawaySchema.findOne({ Guild: interaction.guild.id }); // Ki·ªÉm tra n·∫øu ƒë√£ t·ªìn t·∫°i d·ªØ li·ªáu c·ªßa m√°y ch·ªß
            if (existingGiveaway) {
                // C·∫≠p nh·∫≠t d·ªØ li·ªáu c≈©
                await giveawaySchema.updateOne(
                    { Guild: interaction.guild.id },
                    {
                        $set: {
                            Host: host.id,
                            Channel: channelId,
                            MessageID: giveawayMessage.id,
                            Title: reward,
                            Color: 'Random',
                            Bcolor: thumbnail ? thumbnail.url : null,
                            Reaction: 'üéâ',
                            Winners: winners,
                            Time: duration,
                            Date: giveawayEndDate,
                            Users: [],
                            Ended: false,
                            WinnerCount: winners,
                            EndTime: giveawayEndDate,
                            Paused: false,
                        },
                    }
                );
            } else {
                // T·∫°o d·ªØ li·ªáu m·ªõi n·∫øu ch∆∞a c√≥
                const newGiveaway = new giveawaySchema({
                    Guild: interaction.guild.id, // l∆∞u m√°y ch·ªß ri√™ng bi·ªát
                    Host: host.id,
                    Channel: channelId,
                    MessageID: giveawayMessage.id,
                    Title: reward,
                    Color: 'Random',
                    Bcolor: thumbnail ? thumbnail.url : null,
                    Reaction: 'üéâ', // Reaction m·∫∑c ƒë·ªãnh
                    Winners: winners,
                    Time: duration,
                    Date: giveawayEndDate, // Ng√†y k·∫øt th√∫c
                    Users: [],
                    Ended: false,
                    WinnerCount: winners, // L∆∞u s·ªë l∆∞·ª£ng ng∆∞·ªùi chi·∫øn th·∫Øng
                    EndTime: giveawayEndDate, // L∆∞u th·ªùi gian k·∫øt th√∫c
                    Paused: false, // Th√™m tr·∫°ng th√°i Paused ban ƒë·∫ßu l√† false
                });

                await newGiveaway.save(); // L∆∞u v√†o MongoDB
            }

            // T·∫°o kho·∫£ng th·ªùi gian ch·ªù ƒë·∫øn khi giveaway k·∫øt th√∫c
            setTimeout(async () => {

                const giveaway = await giveawaySchema.findOne({ MessageID: giveawayMessage.id });

                // Ki·ªÉm tra n·∫øu kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu trong MongoDB, tho√°t
                if (!giveaway) {
                    // console.log(`Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu giveaway cho MessageID: ${giveawayMessage.id}`);
                    return;
                }

                // // Ki·ªÉm tra n·∫øu giveaway ƒë√£ b·ªã t·∫°m d·ª´ng, th√¨ kh√¥ng th·ª±c hi·ªán ti·∫øp
                // if (giveaway.Paused || giveaway.Ended) return;

                // Ki·ªÉm tra n·∫øu tr·∫°ng th√°i Paused ƒë√£ l√† true
                if (giveaway.Paused === true || giveaway.Ended === true) {
                    return ;
                }

                // L·∫•y danh s√°ch ng∆∞·ªùi d√πng ƒë√£ tham gia b·∫±ng c√°ch ph·∫£n ·ª©ng v·ªõi üéâ
                const fetchedMessage = await giveawayMessage.fetch();
                const reactions = fetchedMessage.reactions.cache.get('üéâ');

                if (!reactions) return; // N·∫øu kh√¥ng c√≥ ph·∫£n ·ª©ng n√†o, tho√°t

                const users = await reactions.users.fetch();
                const validUsers = users.filter(user => !user.bot && user.id !== host.id && user.id !== interaction.user.id); // Lo·∫°i b·ªè bot v√† ng∆∞·ªùi t·ªï ch·ª©c

                if (validUsers.size === 0) {
                    // N·∫øu kh√¥ng c√≥ ng∆∞·ªùi d√πng tham gia h·ª£p l·ªá
                    const noParticipantsEmbed = new EmbedBuilder()
                        .setTitle(`Ch∆∞∆°ng tr√¨nh t·∫∑ng qu√† ƒë√£ k·∫øt th√∫c`)
                        .setDescription(`Th·ªùi gian nh·∫≠n qu√† ƒë√£ h·∫øt, kh√¥ng c√≥ s·ª± tham gia h·ª£p l·ªá\nNg∆∞·ªùi t·ªï ch·ª©c: ${host}\nK·∫øt th√∫c ${formattedEndTime}`)
                        .setColor('Red')
                        .setTimestamp();

                    await interaction.channel.send({ embeds: [noParticipantsEmbed] });
                    // await giveawayMessage.delete(); // X√≥a tin nh·∫Øn giveaway
                } else {
                    // N·∫øu c√≥ ng∆∞·ªùi d√πng tham gia h·ª£p l·ªá
                    const winnerArray = validUsers.random(winners); // Ch·ªçn ng·∫´u nhi√™n ng∆∞·ªùi chi·∫øn th·∫Øng
                    const winnerMentions = winnerArray.map(winner => `<@${winner.id}>`).join(', ');
                    // (${interaction.guild.members.cache.get(winner.id)?.displayName || winner.username})

                    const winnersEmbed = new EmbedBuilder()
                        .setTitle(`üéâ Ch√∫c m·ª´ng ng∆∞·ªùi chi·∫øn th·∫Øng üéâ`)
                        .setDescription(`Ph·∫ßn th∆∞·ªüng:\n**${rewardList}**\n\nNg∆∞·ªùi t·ªï ch·ª©c: ${host}\n\nNg∆∞·ªùi chi·∫øn th·∫Øng: ${winnerMentions}`)
                        .setColor('Green')
                        .setTimestamp();

                    await interaction.channel.send({ content: `${winnerMentions}`, embeds: [winnersEmbed] });
                    // await giveawayMessage.delete(); // X√≥a tin nh·∫Øn giveaway sau khi c√≥ ng∆∞·ªùi chi·∫øn th·∫Øng
                }
            }, ms(duration)); // Ch·ªù ƒë·∫øn khi th·ªùi gian giveaway k·∫øt th√∫c

            // X√≥a ph·∫£n h·ªìi x√°c nh·∫≠n t∆∞∆°ng t√°c
            await interaction.deleteReply();

        }

        // X·ª≠ l√Ω l·ªánh /giveaway reroll
        if (subcommand === 'reroll') {

            const hasPermission = await checkAdministrator(interaction);
            if (!hasPermission) return;

            // L·∫•y message ID t·ª´ t√πy ch·ªçn
            const messageId = interaction.options.getString('message-id');

            // T√¨m giveaway trong MongoDB d·ª±a tr√™n MessageID
            const giveaway = await giveawaySchema.findOne({ MessageID: messageId });
            if (!giveaway || giveaway.Ended === true) {
                return interaction.reply({ content: 'Kh√¥ng t√¨m th·∫•y qu√† t·∫∑ng n√†y ho·∫∑c n√≥ ƒë√£ k·∫øt th√∫c.', ephemeral: true });
            }

            // L·∫•y tin nh·∫Øn giveaway ƒë·ªÉ l·∫•y th√¥ng tin ph·∫£n ·ª©ng
            const giveawayMessage = await interaction.channel.messages.fetch(messageId);
            if (!giveawayMessage) {
                return interaction.reply({ content: 'Kh√¥ng th·ªÉ t√¨m th·∫•y tin nh·∫Øn giveaway.', ephemeral: true });
            }

            // L·∫•y danh s√°ch ng∆∞·ªùi d√πng ƒë√£ tham gia b·∫±ng c√°ch ph·∫£n ·ª©ng v·ªõi üéâ
            const reactions = giveawayMessage.reactions.cache.get('üéâ');
            if (!reactions) {
                return interaction.reply({ content: 'Kh√¥ng c√≥ ng∆∞·ªùi d√πng n√†o tham gia nh·∫≠n qu√†.', ephemeral: true });
            }

            const users = await reactions.users.fetch();
            const validUsers = users.filter(user => !user.bot && user.id !== giveaway.Host); // Lo·∫°i b·ªè bot v√† ng∆∞·ªùi t·ªï ch·ª©c

            if (validUsers.size === 0) {
                return interaction.reply({ content: 'Kh√¥ng c√≥ ng∆∞·ªùi d√πng h·ª£p l·ªá n√†o ƒë·ªÉ reroll.', ephemeral: true });
            }

            // Ch·ªçn ng·∫´u nhi√™n ng∆∞·ªùi chi·∫øn th·∫Øng m·ªõi
            const newWinner = validUsers.random(); // Ch·ªçn ng·∫´u nhi√™n m·ªôt ng∆∞·ªùi chi·∫øn th·∫Øng m·ªõi
            const winnerMention = `<@${newWinner.id}>`; // T·∫°o mention cho ng∆∞·ªùi chi·∫øn th·∫Øng m·ªõi

            // Chuy·ªÉn ƒë·ªïi ph·∫ßn th∆∞·ªüng th√†nh danh s√°ch xu·ªëng d√≤ng
            const formattedTitle = giveaway.Title.split(',').map(item => item.trim()).join('\n');

            // T·∫°o embed th√¥ng b√°o ng∆∞·ªùi chi·∫øn th·∫Øng m·ªõi
            const winnerEmbed = new EmbedBuilder()
                .setTitle(`üéâ Ng∆∞·ªùi chi·∫øn th·∫Øng m·ªõi üéâ`)
                .setDescription(`Ph·∫ßn th∆∞·ªüng:\n**${formattedTitle}**\n\nNg∆∞·ªùi t·ªï ch·ª©c: <@${giveaway.Host}>\n\nNg∆∞·ªùi chi·∫øn th·∫Øng m·ªõi: ${winnerMention}`)
                .setColor('Blue')
                .setTimestamp();

            // G·ª≠i th√¥ng b√°o ng∆∞·ªùi chi·∫øn th·∫Øng m·ªõi
            await interaction.reply({ embeds: [winnerEmbed], ephemeral: false });
        }

        // X·ª≠ l√Ω l·ªánh /giveaway pause
        if (subcommand === 'pause') {

            const hasPermission = await checkAdministrator(interaction);
            if (!hasPermission) return;

            const messageId = interaction.options.getString('message-id');

            const giveaway = await giveawaySchema.findOne({ MessageID: messageId });
            if (!giveaway || giveaway.Ended === true) {
                return interaction.reply({ content: 'Kh√¥ng t√¨m th·∫•y qu√† t·∫∑ng n√†y ho·∫∑c n√≥ ƒë√£ k·∫øt th√∫c.', ephemeral: true });
            }

            // Ki·ªÉm tra n·∫øu tr·∫°ng th√°i Paused ƒë√£ l√† true
            if (giveaway.Paused === true) {
                return interaction.reply({ content: `Qu√† t·∫∑ng n√†y ƒë√£ t·∫°m d·ª´ng tr∆∞·ªõc ƒë√≥ r·ªìi,.`, ephemeral: true });
            }

            const currentTime = Date.now();
            const remainingTime = giveaway.EndTime - currentTime; // Th·ªùi gian c√≤n l·∫°i cho ƒë·∫øn khi k·∫øt th√∫c

            // C·∫≠p nh·∫≠t th·ªùi gian t·∫°m d·ª´ng v√† l∆∞u v√†o MongoDB
            giveaway.Paused = true;
            giveaway.RemainingTime = remainingTime; // L∆∞u th·ªùi gian c√≤n l·∫°i
            giveaway.PausedAt = currentTime; // L∆∞u th·ªùi ƒëi·ªÉm t·∫°m d·ª´ng
            await giveaway.save();

            const giveawayMessage = await interaction.channel.messages.fetch(messageId);

            // Chuy·ªÉn ƒë·ªïi ph·∫ßn th∆∞·ªüng th√†nh danh s√°ch xu·ªëng d√≤ng
            const formattedTitle = giveaway.Title.split(',').map(item => item.trim()).join('\n');

            const pausedEmbed = new EmbedBuilder()
                .setTitle(`**PH·∫¶N TH∆Ø·ªûNGüéâ**\n${formattedTitle}`)
                .setDescription(`T·ªï ch·ª©c b·ªüi: <@${giveaway.Host}>\n\n‚è∏Ô∏è **QU√Ä T·∫∂NG N√ÄY ƒê√É T·∫†M D·ª™NG!** ‚è∏Ô∏è\n\nTh·ªùi gian c√≤n l·∫°i khi t·∫°m d·ª´ng: **${ms(remainingTime, { long: true })}**`)
                .setColor('Yellow')
                .setThumbnail(giveaway.Bcolor)
                .setFooter({ text: `S·ªë l∆∞·ª£ng qu√†: ${giveaway.WinnerCount}` })
                .setTimestamp();

            await giveawayMessage.edit({ embeds: [pausedEmbed] });
            await interaction.reply({ content: `Ch∆∞∆°ng tr√¨nh t·∫∑ng qu√† ƒë√£ b·ªã t·∫°m d·ª´ng.`, ephemeral: true });
        }

        // X·ª≠ l√Ω l·ªánh /giveaway resume
        if (subcommand === 'resume') {

            const hasPermission = await checkAdministrator(interaction);
            if (!hasPermission) return;

            await interaction.deferReply({ ephemeral: true });

            const messageId = interaction.options.getString('message-id');
            const giveawayData = await giveawaySchema.findOne({ MessageID: messageId });

            if (!giveawayData || giveawayData.Ended) {
                return interaction.editReply({ content: `T·∫∑ng qu√† kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ k·∫øt th√∫c.`, ephemeral: true });
            }

            // Ki·ªÉm tra n·∫øu tr·∫°ng th√°i Paused ƒë√£ l√† true
            if (giveawayData.Paused === false) {
                return interaction.editReply({ content: `T·∫∑ng qu√† n√†y hi·ªán kh√¥ng b·ªã t·∫°m d·ª´ng.`, ephemeral: true });
            }

            // C·∫≠p nh·∫≠t tr·∫°ng th√°i t·∫∑ng qu√† th√†nh ti·∫øp t·ª•c
            giveawayData.Paused = false;
            // await giveawayData.updateOne({ Paused: false});

            // C·∫≠p nh·∫≠t th·ªùi gian k·∫øt th√∫c d·ª±a tr√™n th·ªùi gian c√≤n l·∫°i
            const newEndTime = Date.now() + giveawayData.RemainingTime;
            giveawayData.EndTime = newEndTime; // L∆∞u th·ªùi gian k·∫øt th√∫c m·ªõi
            giveawayData.RemainingTime = null; // X√≥a th·ªùi gian c√≤n l·∫°i, v√¨ ƒë√£ ƒë∆∞·ª£c t√≠nh v√†o th·ªùi gian k·∫øt th√∫c
            await giveawayData.save();


            // C·∫≠p nh·∫≠t l·∫°i tin nh·∫Øn t·∫∑ng qu√† ƒë·ªÉ hi·ªÉn th·ªã r·∫±ng ch∆∞∆°ng tr√¨nh ƒë√£ ƒë∆∞·ª£c ti·∫øp t·ª•c
            const giveawayMessage = await interaction.channel.messages.fetch(messageId);

            // Chuy·ªÉn ƒë·ªïi ph·∫ßn th∆∞·ªüng th√†nh danh s√°ch xu·ªëng d√≤ng
            const formattedTitle = giveawayData.Title.split(',').map(item => item.trim()).join('\n');

            // T·∫°o embed m·ªõi v·ªõi th·ªùi gian k·∫øt th√∫c ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t
            const resumeEmbed = new EmbedBuilder()
                .setTitle(`**PH·∫¶N TH∆Ø·ªûNGüéâ**\n${formattedTitle}`)
                .setDescription(`T·ªï ch·ª©c b·ªüi: <@${giveawayData.Host}>\n\nNh·∫•p v√†o ph·∫£n ·ª©ng üéâ b√™n d∆∞·ªõi tin nh·∫Øn ƒë·ªÉ tham gia\n\nTh·ªùi gian k·∫øt th√∫c: <t:${Math.floor(newEndTime / 1000)}:R>`)
                .setColor('Green')
                .setThumbnail(giveawayData.Bcolor)
                .setFooter({ text: `S·ªë l∆∞·ª£ng qu√†: ${giveawayData.WinnerCount}` })
                .setTimestamp();

            // C·∫≠p nh·∫≠t tin nh·∫Øn c·ªßa ch∆∞∆°ng tr√¨nh t·∫∑ng qu√†
            await giveawayMessage.edit({ embeds: [resumeEmbed] });


            // Thi·∫øt l·∫≠p l·∫°i b·ªô h·∫πn gi·ªù ƒë·ªÉ ƒë·∫£m b·∫£o t·∫∑ng qu√† k·∫øt th√∫c ƒë√∫ng th·ªùi ƒëi·ªÉm
            setTimeout(async () => {
                const updatedGiveaway = await giveawaySchema.findOne({ MessageID: messageId });

                if (!updatedGiveaway || updatedGiveaway.Ended || updatedGiveaway.Paused) {
                    return; // Kh√¥ng l√†m g√¨ n·∫øu t·∫∑ng qu√† ƒë√£ k·∫øt th√∫c ho·∫∑c v·∫´n b·ªã t·∫°m d·ª´ng
                }

                updatedGiveaway.Ended = true;
                await updatedGiveaway.save();
            }, newEndTime - Date.now());


            // Ph·∫£n h·ªìi l·∫°i cho ng∆∞·ªùi d√πng
            await interaction.editReply({ content: `T·∫∑ng qu√† ƒë√£ ƒë∆∞·ª£c ti·∫øp t·ª•c v√† th·ªùi gian k·∫øt th√∫c ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t.`, ephemeral: true });
        }

        // X·ª≠ l√Ω l·ªánh /giveaway end
        if (subcommand === 'end') {

            const hasPermission = await checkAdministrator(interaction);
            if (!hasPermission) return;

            await interaction.deferReply({ ephemeral: true });

            const messageId = interaction.options.getString('message-id'); // L·∫•y ID tin nh·∫Øn
            const giveaway = await giveawaySchema.findOne({ MessageID: messageId }); // T√¨m giveaway trong MongoDB

            if (!giveaway) {
                return interaction.editReply({ content: 'Kh√¥ng t√¨m th·∫•y ch∆∞∆°ng tr√¨nh t·∫∑ng qu√† v·ªõi ID ƒë√≥!', ephemeral: true });
            }

            // C·∫≠p nh·∫≠t tr·∫°ng th√°i giveaway ƒë√£ k·∫øt th√∫c
            await giveawaySchema.updateOne({ MessageID: messageId }, { Ended: true }); 

            const giveawayMessage = await interaction.channel.messages.fetch(messageId); // L·∫•y tin nh·∫Øn
            

            // B·∫Øt ƒë·∫ßu x·ª≠ l√Ω ng∆∞·ªùi chi·∫øn th·∫Øng ngay l·∫≠p t·ª©c
            const fetchedMessage = await giveawayMessage.fetch();
            const reactions = fetchedMessage.reactions.cache.get('üéâ');

            if (!reactions) {
                await interaction.editReply({ content: 'Kh√¥ng c√≥ ph·∫£n ·ª©ng n√†o trong ch∆∞∆°ng tr√¨nh t·∫∑ng qu√† n√†y.', ephemeral: true });
                return;
            }

            const users = await reactions.users.fetch();
            const validUsers = users.filter(user => !user.bot && user.id !== giveaway.Host); // Lo·∫°i b·ªè bot v√† ng∆∞·ªùi t·ªï ch·ª©c

            // L·∫•y th·ªùi gian th·ª±c t·∫°i th·ªùi ƒëi·ªÉm l·ªánh ƒë∆∞·ª£c g·ªçi
            const endDate = new Date(); // S·ª≠ d·ª•ng th·ªùi gian th·ª±c ngay t·∫°i ƒë√¢y
            const options = { 
                hour: '2-digit', 
                minute: '2-digit', 
                second: '2-digit', 
                weekday: 'long', 
                year: 'numeric', 
                month: 'long', 
                day: 'numeric', 
                timeZone: 'Asia/Ho_Chi_Minh' // Thay ƒë·ªïi n·∫øu b·∫°n c·∫ßn m√∫i gi·ªù kh√°c
            };
            const formattedEndDate = endDate.toLocaleString('vi-VN', options); // ƒê·ªãnh d·∫°ng th·ªùi gian theo ti·∫øng Vi·ªát


            if (validUsers.size === 0) {
                // N·∫øu kh√¥ng c√≥ ng∆∞·ªùi d√πng tham gia h·ª£p l·ªá
                const noParticipantsEmbed = new EmbedBuilder()
                    .setTitle(`Ch∆∞∆°ng tr√¨nh t·∫∑ng qu√† ƒë√£ k·∫øt th√∫c`)
                    .setDescription(`Th·ªùi gian nh·∫≠n qu√† ƒë√£ h·∫øt, kh√¥ng c√≥ s·ª± tham gia h·ª£p l·ªá\nNg∆∞·ªùi t·ªï ch·ª©c: <@${giveaway.Host}>\nK·∫øt th√∫c v√†o ${formattedEndDate}`)
                    .setColor('Red')
                    .setTimestamp();

                    await giveawayMessage.edit({ embeds: [noParticipantsEmbed] });
            } else {
                // N·∫øu c√≥ ng∆∞·ªùi d√πng tham gia h·ª£p l·ªá
                const winnerArray = validUsers.random(giveaway.WinnerCount); // Ch·ªçn ng·∫´u nhi√™n ng∆∞·ªùi chi·∫øn th·∫Øng
                const winnerMentions = winnerArray.map(winner => `<@${winner.id}>`).join(', ');

                // Chuy·ªÉn ƒë·ªïi ph·∫ßn th∆∞·ªüng th√†nh danh s√°ch xu·ªëng d√≤ng
                const formattedTitle = giveaway.Title.split(',').map(item => item.trim()).join('\n');

                const winnersEmbed = new EmbedBuilder()
                    .setTitle(`üéâ Ch√∫c m·ª´ng ng∆∞·ªùi chi·∫øn th·∫Øng üéâ`)
                    .setDescription(`Ph·∫ßn th∆∞·ªüng:\n**${formattedTitle}**\n\nNg∆∞·ªùi t·ªï ch·ª©c: <@${giveaway.Host}>\n\nNg∆∞·ªùi chi·∫øn th·∫Øng: ${winnerMentions}`)
                    .setColor('Green')
                    .setTimestamp();

                await giveawayMessage.edit({ content: winnerMentions, embeds: [winnersEmbed] });

                // // G·ª≠i tin nh·∫Øn m·ªõi v·ªõi tag ng∆∞·ªùi chi·∫øn th·∫Øng
                // const winnerMessage = await interaction.channel.send({ content: winnerMentions, embeds: [winnersEmbed] });

                // // C·∫≠p nh·∫≠t l·∫°i MessageID trong MongoDB
                // await giveawaySchema.updateOne(
                //     { MessageID: messageId }, 
                //     { $set: { MessageID: winnerMessage.id } } // C·∫≠p nh·∫≠t ID tin nh·∫Øn m·ªõi
                // );

                // await giveawayMessage.delete();
            } 

            await interaction.editReply({ content: 'Ch∆∞∆°ng tr√¨nh t·∫∑ng qu√† ƒë√£ k·∫øt th√∫c!', ephemeral: true });
        }

        // // X·ª≠ l√Ω l·ªánh /giveaway cancel
        // if (subcommand === 'cancel') {
        //     const messageId = interaction.options.getString('message-id');

        //     const giveaway = await giveawaySchema.findOne({ MessageID: messageId });
        //     if (!giveaway) {
        //         return interaction.reply({ content: 'Kh√¥ng t√¨m th·∫•y t·∫∑ng qu√† n√†y.', ephemeral: true });
        //     }

        //     // C·∫≠p nh·∫≠t tin nh·∫Øn giveaway
        //     const giveawayMessage = await interaction.channel.messages.fetch(messageId);
        //     if (!giveawayMessage) {
        //         return interaction.reply({ content: 'Kh√¥ng th·ªÉ t√¨m th·∫•y tin nh·∫Øn giveaway.', ephemeral: true });
        //     }

        //     // Chuy·ªÉn ƒë·ªïi ph·∫ßn th∆∞·ªüng th√†nh danh s√°ch xu·ªëng d√≤ng
        //     const formattedTitle = giveaway.Title.split(',').map(item => item.trim()).join('\n');

        //     // T·∫°o embed cho th√¥ng b√°o t·∫∑ng qu√† ƒë√£ b·ªã h·ªßy
        //     const pausedEmbed = new EmbedBuilder()
        //         .setTitle(`**PH·∫¶N TH∆Ø·ªûNGüéâ**\n${formattedTitle}`)
        //         .setDescription(`‚ñ∂Ô∏è **QU√Ä T·∫∂NG N√ÄY ƒê√É THU H·ªíI!** ‚ñ∂Ô∏è\n\nT·ªï ch·ª©c b·ªüi: <@${giveaway.Host}>\nb·∫°n kh√¥ng th·ªÉ tham gia nh·∫≠n qu√† n·ªØa`)
        //         .setColor('Yellow')
        //         .setThumbnail(giveaway.Bcolor)
        //         .setFooter({ text: `S·ªë l∆∞·ª£ng qu√†: ${giveaway.WinnerCount}` })
        //         .setTimestamp();

        //     // C·∫≠p nh·∫≠t tin nh·∫Øn giveaway v·ªõi th√¥ng ƒëi·ªáp m·ªõi
        //     await giveawayMessage.edit({ embeds: [pausedEmbed] });

        //     // C·∫≠p nh·∫≠t tr·∫°ng th√°i giveaway cance
        //     await giveaway.updateOne({ Paused: true });

        //     // await giveaway.deleteOne(); // X√≥a giveaway kh·ªèi MongoDB

        //     await interaction.reply({ content: `Ch∆∞∆°ng tr√¨nh t·∫∑ng qu√† ƒë√£ b·ªã h·ªßy b·ªè.`, ephemeral: true });
        // }

        // X·ª≠ l√Ω l·ªánh /giveaway kk
        if (subcommand === 'remove-data') {

            const permissionEmbed = new EmbedBuilder()
                .setDescription("`‚ùå` L·ªÜNH N√ÄY D√ÄNH CHO DEV!")
                .setColor(config.embedGreen)
                .setAuthor({ 
                    name: '¬π‚Åπ‚Å∏‚Å∏Host Valheim¬π‚Åπ‚Å∏‚Å∏', 
                    iconURL: 'https://i.imgur.com/coUpySu.jpg', 
                    url: 'https://discord.gg/Jc3QuUEnnd' 
                });

            if (!checkPermissions(interaction)) {
                return interaction.reply({ embeds: [permissionEmbed] });
            }

            // L·∫•y to√†n b·ªô d·ªØ li·ªáu giveaway t·ª´ MongoDB
            const giveaways = await giveawaySchema.find({ Guild: interaction.guild.id });

            // N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu, th√¥ng b√°o v√† d·ª´ng x·ª≠ l√Ω
            if (!giveaways.length) {
                return interaction.reply({ content: 'Kh√¥ng c√≥ d·ªØ li·ªáu giveaway n√†o ƒë·ªÉ x√≥a.', ephemeral: true });
            }

            // X√≥a t·ª´ng tin nh·∫Øn giveaway v√† x√≥a d·ªØ li·ªáu trong MongoDB
            let deletedCount = 0;
            for (const giveaway of giveaways) {
                try {
                    // L·∫•y tin nh·∫Øn giveaway d·ª±a tr√™n MessageID
                    const giveawayMessage = await interaction.channel.messages.fetch(giveaway.MessageID).catch(() => null);

                    // N·∫øu t√¨m th·∫•y tin nh·∫Øn, x√≥a n√≥
                    if (giveawayMessage) {
                        await giveawayMessage.delete();
                    }

                    // X√≥a d·ªØ li·ªáu trong MongoDB
                    await giveawaySchema.deleteOne({ _id: giveaway._id });
                    deletedCount++;
                } catch (error) {
                    console.error(`Kh√¥ng th·ªÉ x√≥a giveaway ID ${giveaway.MessageID}:`, error);
                }
            }

            // G·ª≠i th√¥ng b√°o k·∫øt qu·∫£
            if (deletedCount > 0) {
                await interaction.reply({ content: `ƒê√£ x√≥a ${deletedCount} d·ªØ li·ªáu giveaway v√† tin nh·∫Øn li√™n quan.`, ephemeral: true });
            } else {
                await interaction.reply({ content: 'Kh√¥ng th·ªÉ x√≥a b·∫•t k·ª≥ d·ªØ li·ªáu giveaway n√†o.', ephemeral: true });
            }
        }
    }
};


/*  
    N·∫æU L·ªñI remove-data TH√å D√ôNG C√ÅI N√ÄY

            X√≥a t·∫•t c·∫£ d·ªØ li·ªáu qu√† t·∫∑ng trong MongoDB
            await giveawaySchema.deleteMany({}); // X√≥a t·∫•t c·∫£ d·ªØ li·ªáu
            
            await interaction.reply({ content: 'ƒê√£ x√≥a t·∫•t c·∫£ d·ªØ li·ªáu qu√† t·∫∑ng kh·ªèi h·ªá th·ªëng.', ephemeral: true });

    C√ÅI N√ÄY D√ôNG ·ªû L·ªÜNH PH·ª§ START
            // L∆∞u d·ªØ li·ªáu v√†o MongoDB
            const newGiveaway = new giveawaySchema({
                Guild: interaction.guild.id, // l∆∞u m√°y ch·ªß ri√™ng bi·ªát
                Host: host.id,
                Channel: channelId,
                MessageID: giveawayMessage.id,
                Title: reward,
                Color: 'Random',
                Bcolor: thumbnail ? thumbnail.url : null,
                Reaction: 'üéâ', // Reaction m·∫∑c ƒë·ªãnh
                Winners: winners,
                Time: duration,
                Date: giveawayEndDate, // Ng√†y k·∫øt th√∫c
                Users: [],
                Ended: false,
                WinnerCount: winners, // L∆∞u s·ªë l∆∞·ª£ng ng∆∞·ªùi chi·∫øn th·∫Øng
                EndTime: giveawayEndDate, // L∆∞u th·ªùi gian k·∫øt th√∫c
                Paused: false, // Th√™m tr·∫°ng th√°i Paused ban ƒë·∫ßu l√† false
            });

            await newGiveaway.save(); // L∆∞u v√†o MongoDB



*/