const { SlashCommandBuilder, PermissionsBitField, EmbedBuilder, AttachmentBuilder, ButtonBuilder, ButtonStyle, ActionRowBuilder } = require("discord.js");
const { Font, RankCardBuilder } = require('canvacord');
const { permissionMap } = require("../../permissionMap");
const path = require('path');
const fs = require('fs');
const levelSchema = require('../../schemas/messagelevelSchema');
const CommandStatus = require('../../schemas/Command_Status');
  
module.exports = {
    data: new SlashCommandBuilder()
        .setName("userinfo")
        .setDescription("üîπ Hi·ªÉn th·ªã th√¥ng tin v·ªÅ m·ªôt ng∆∞·ªùi d√πng.")
        .addUserOption((option) =>
            option
                .setName("user")
                .setDescription("Ch·ªçn ng∆∞·ªùi d√πng ƒë·ªÉ nh·∫≠n th√¥ng tin")
                .setRequired(true)
        ),
    
    async execute(interaction, client) {

        try {

            // Ki·ªÉm tra tr·∫°ng th√°i c·ªßa l·ªánh
            const commandStatus = await CommandStatus.findOne({ command: '/userinfo' });

            // N·∫øu l·ªánh ƒëang t·∫Øt, g·ª≠i th√¥ng b√°o v√† kh√¥ng th·ª±c hi·ªán l·ªánh
            if (commandStatus && commandStatus.status === 'off') {
                return interaction.reply('L·ªánh n√†y ƒë√£ b·ªã t·∫Øt, vui l√≤ng th·ª≠ l·∫°i sau.');
            }

            const { guild } = interaction;

            // Tr√¨ ho√£n ph·∫£n h·ªìi
           await interaction.deferReply();

            // ƒê∆∞·ªùng d·∫´n ƒë·∫øn h√¨nh ·∫£nh n·ªÅn trong th∆∞ m·ª•c 'anh'
            const backgroundPath = path.join(__dirname, '../../anh/leaderboard-background5.png');

            // Ki·ªÉm tra xem t·ªáp c√≥ t·ªìn t·∫°i kh√¥ng
            if (!fs.existsSync(backgroundPath)) {
                console.error('Th∆∞ m·ª•c ·∫£nh kh√¥ng t·ªìn t·∫°i:', backgroundPath);
                return await interaction.reply({ content: 'üëë ƒê√£ x·∫£y ra l·ªói khi t·∫°o b·∫£ng x·∫øp h·∫°ng. Vui l√≤ng th·ª≠ l·∫°i sau.', ephemeral: true });
            }

            // L·∫•y d·ªØ li·ªáu c·ªßa 10 ng∆∞·ªùi d√πng t·ª´ c∆° s·ªü d·ªØ li·ªáu
            const topUsers = await levelSchema.find({ Guild: guild.id }).sort({ XP: -1 }).limit(10);

            // Truy v·∫•n tr·ª±c ti·∫øp t·ª´ c∆° s·ªü d·ªØ li·ªáu
            const players = await Promise.all(topUsers.map(async (data, index) => {
                try {
                    const cachedMember = await guild.members.fetch(data.User);
                    const rank = Math.floor(data.Level / 10) + 1; // X√°c ƒë·ªãnh rank d·ª±a tr√™n level
                    return {
                        avatar: cachedMember.user.displayAvatarURL({ forceStatic: true }),
                        username: cachedMember.user.username,
                        displayName: cachedMember.displayName,
                        level: data.Level,
                        xp: data.XP,
                        rank: rank,
                    };
                } catch (error) {
                    console.error(`üëë Kh√¥ng th·ªÉ t√¨m th·∫•y th√†nh vi√™n v·ªõi ID ${data.User} trong m√°y ch·ªß.`);
                    return null;
                }
            }));
    
            const validPlayers = players.filter(player => player !== null);
 
            const User = interaction.options.getUser("user");

            // Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng l√† bot
            if (User.bot) { 
                await interaction.deleteReply()               
                return interaction.channel.send({
                    content: "T√¥i kh√¥ng ph·∫£i l√† ng∆∞·ªùi d√πng, b·∫°n c√≥ th·ªÉ xem th√¥ng tin c·ªßa t√¥i b·∫±ng l·ªánh \`\`\`/cm info_bot\`\`\`",
                    ephemeral: true,
                });     
                         
            }

            const TargetedUser = await interaction.guild.members.fetch(
                User.id || interaction.member.id
            );
            await TargetedUser.fetch();
    
            function joinedSuff(number) {
                // X√°c ƒë·ªãnh ƒëu√¥i s·ªë
                if (number % 100 >= 11 && number % 100 <= 13) return number + "th";
        
                switch (number % 10) {
                    case 1:
                    return number + "st";
                    case 2:
                    return number + "nd";
                    case 3:
                    return number + "rd";
                }

                return number + "th";
            }
    
            const fetchMembers = await interaction.guild.members.fetch();
            const JoinPos =
            Array.from(
                fetchMembers
                    .sort((a, b) => a.joinedTimestamp - b.joinedTimestamp)
                    .keys()
            ).indexOf(TargetedUser.id) + 1;
    
            const Accent = TargetedUser.user.accentColor
            ? TargetedUser.user.accentColor
            : "Random";
    
            let index = 1;
            let Perm;

            if (TargetedUser.id === interaction.guild.ownerId) {
                Perm = `Ch·ªß s·ªü h·ªØu m√°y ch·ªß`;
            } else if (TargetedUser.permissions.has(PermissionsBitField.Flags.Administrator)) {
                Perm = `Administrator`;
            } else {
                // L·∫•y vai tr√≤ ch√≠nh v√† quy·ªÅn c·ªßa n√≥
                const primaryRole = TargetedUser.roles.highest;
                Perm = primaryRole.permissions
                    .toArray()
                    .map((P) => `${index++}. ${permissionMap[P] || P}.`)
                    .join("\n");
            }
    
            const roles = TargetedUser.roles.cache
                .filter((role) => role.name !== "@everyone")
                .sort((a, b) => b.position - a.position)
                .map((role) => `‚Ä¢ ${role.name}`)
                .slice(0, 3);
    
            const member = await interaction.guild.members.fetch(User.id);

            // Thay ƒë·ªïi ƒë·ªÉ l·∫•y avatar t·ª´ user
            const displayName = member.displayName; // T√™n hi·ªÉn th·ªã
            const username = member.user.username; // T√™n ng∆∞·ªùi d√πng
            const avatar = member.user.displayAvatarURL({ forceStatic: true }); // L·∫•y avatar
            const currentXPData = await levelSchema.findOne({ User: User.id, Guild: guild.id });
            const currentXP = currentXPData ? currentXPData.XP : 0; // ƒêi·ªÉm kinh nghi·ªám hi·ªán t·∫°i
            const requiredXP = (currentXPData.Level * currentXPData.Level * 20) + 20; // ƒêi·ªÉm kinh nghi·ªám y√™u c·∫ßu
            const level = currentXPData ? currentXPData.Level : 0; // C·∫•p ƒë·ªô
            const rank = validPlayers.findIndex(player => player.username === username) + 1; // X√°c ƒë·ªãnh rank

            Font.loadDefault();

                const profileBuffer = new RankCardBuilder()
                    .setDisplayName(displayName)
                    .setUsername(username)
                    .setAvatar(avatar)
                    .setCurrentXP(currentXP)
                    .setRequiredXP(requiredXP)
                    .setLevel(level)
                    .setRank(rank)
                    .setOverlay(90)
                    .setBackground(fs.readFileSync(backgroundPath)) // S·ª≠ d·ª•ng ·∫£nh n·ªÅn t·ª´ th∆∞ m·ª•c anh
                    .setStatus('online')
                    .setTextStyles({
                        level: "LEVEL: ", // VƒÉn b·∫£n t√πy ch·ªânh cho c·∫•p ƒë·ªô
                        xp: "EXP: ", // VƒÉn b·∫£n t√πy ch·ªânh cho ƒëi·ªÉm kinh nghi·ªám
                        rank: "RANK: ", // VƒÉn b·∫£n t√πy ch·ªânh cho th·ª© h·∫°ng
                    })
                    .setProgressCalculator((currentXP, requiredXP) => {
                        const percentage = Math.floor((currentXP / requiredXP) * 100);
                        return Math.max(percentage, 0); // ƒê·∫£m b·∫£o gi√° tr·ªã kh√¥ng √¢m
                    });

                profileBuffer.setStyles({
                    progressbar: {
                        thumb: {
                            style: {
                                backgroundColor: "cyan",
                            },
                        },
                    },
                });

                const card = await profileBuffer.build({ format: 'png' });
                const attachment = new AttachmentBuilder(card, { name: 'rank.png' });
    
            const embed = new EmbedBuilder()
                .setAuthor({
                    name: `${TargetedUser.user.displayName}`,
                    iconURL:
                    "https://cdn.discordapp.com/attachments/1064929361213530122/1066648072211410964/6879-member.png",
                })
                .setThumbnail(TargetedUser.user.avatarURL({ dynamic: true, size: 1024 }))
                .setColor("Green")
                .setFooter({ text: `‚í∏ M·ªçi quy·ªÅn ƒë∆∞·ª£c b·∫£o l∆∞u cho ${client.user.displayName}` })
                .setTimestamp()
                .setDescription(
                    `**Th√¥ng tin ng∆∞·ªùi d√πng:** ${displayName}
                    
                    **${displayName}** ƒê√£ tham gia v·ªõi t∆∞ c√°ch l√†
                    th√†nh vi√™n th·ª© **${joinedSuff(
                    JoinPos
                    )}** c·ªßa H·ªôi (\`${interaction.guild.name}\`).
                    `
                )
                .setImage("attachment://rank.png")
                .addFields(
                    {
                        name: `ƒê√£ tham gia b·∫•t h√≤a`,
                        value: `<t:${parseInt(TargetedUser.user.createdTimestamp / 1000)}:R>`,
                        inline: true,
                    },
                    
                    {
                        name: `ƒê√£ tham gia M√°y ch·ªß`,
                        value: `<t:${parseInt(TargetedUser.joinedTimestamp / 1000)}:R>`,
                        inline: true,
                    },

                    {
                        name: `\u200B`,
                        value: `\u200B`,
                        inline: true,
                    },

                    {
                        name: `ID`,
                        value: `\`\`\`${TargetedUser.id}\`\`\``,
                        inline: true,
                    },

                    {
                        name: `M√†u s·∫Øc`,
                        value: `\`\`\`${
                                TargetedUser.user.accentColor
                                ? `#${TargetedUser.user.accentColor.toString(16)}`
                                : "Kh√¥ng c√≥"
                            }\`\`\``,
                        inline: true,
                    },

                    {
                        name: `L√† ?`,
                        value: `\`\`\`${TargetedUser.user.bot ? "Bot" : "Ng∆∞·ªùi d√πng"} \`\`\``,
                        inline: true,
                    },

                    {
                        name: `(1) T√™n nick`,
                        value: `\`\`\`${TargetedUser.nickname || "Kh√¥ng c√≥"} \`\`\``,
                    },

                    {
                        name: `${
                                roles.length === 0 ? "(2) Quy·ªÅn c∆° b·∫£n discord" : "(2) Quy·ªÅn vai tr√≤"
                            }`,
                        value: `\`\`\`yml\n${Perm}\`\`\``,
                    },

                    {
                        name: `(3) Vai tr√≤ h√†ng ƒë·∫ßu`,
                        value: `\`\`\`yml\n${roles.join("\n") || `Ch∆∞a c√≥ vai tr√≤ n√†o`}\`\`\``,
                    }
                );

            const x√≥a = new ButtonBuilder()
                .setCustomId(`delete`)
                .setLabel(`üóëÔ∏è`)
                .setStyle(ButtonStyle.Danger)

            const n√∫t = new ActionRowBuilder().addComponents(x√≥a)
    
            interaction.editReply({ embeds: [embed], files: [attachment], components: [n√∫t] });
        } catch (error) {
            console.error("L·ªói khi th·ª±c thi l·ªánh userinfo:", error);

            interaction.editReply({
                content: "C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω l·ªánh, vui l√≤ng th·ª≠ l·∫°i sau.",
                ephemeral: true,
            });

            interaction.client.emit('interactionError', interaction.client, interaction, error);
        }
    },
};