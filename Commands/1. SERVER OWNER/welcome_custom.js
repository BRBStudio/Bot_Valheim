const { SlashCommandBuilder, EmbedBuilder } = require("discord.js");
const WelcomeCustom = require("../../schemas/welcomecustomSchema.js");
const WelcomeDefault = require('../../schemas/welcomedefaultSchema.js');
const config = require('../../config.js');
const { checkOwner } = require(`../../permissionCheck.js`)
const { removedEmbed } = require(`../../Embeds/embedsDEV.js`)
const CommandStatus = require('../../schemas/Command_Status.js');

/*
welcome-setup
*/
    
    module.exports = {
        data: new SlashCommandBuilder()
            .setName("welcome_custom")
            .setDescription("üîπ C·∫•u h√¨nh h·ªá th·ªëng tin nh·∫Øn ch√†o m·ª´ng t√πy ch·ªânh")
            .addSubcommand((subcommand) =>
                subcommand
                .setName("set")
                .setDescription("üîπ ƒê·∫∑t h·ªá th·ªëng tin nh·∫Øn ch√†o m·ª´ng t√πy ch·ªânh t·ªõi m√°y ch·ªß")
                .addStringOption((option) =>
                    option
                    .setName("message")
                    .setDescription(`b1: t√™n ng∆∞·ªùi tham gia,b2: t√™n m√°y ch·ªß,b3: hi·ªÉn th·ªã th·ª© t·ª±,b4: k√™nh lu·∫≠t,\\n: ƒë·ªÉ xu·ªëng 1 d√≤ng`)
                    .setRequired(true)
                )
                .addChannelOption((option) =>
                    option
                    .setName("channel")
                    .setDescription("K√™nh g·ª≠i tin nh·∫Øn ch√†o m·ª´ng t·ªõi")
                    .setRequired(true)
                )
                .addChannelOption((option) =>
                    option
                    .setName("rules")
                    .setDescription("N∆°i m·ªçi ng∆∞·ªùi ƒë·ªçc lu·∫≠t.")
                    .setRequired(true)
                )
                .addBooleanOption((option) =>
                    option
                    .setName("embed")
                    .setDescription("G·ª≠i tin nh·∫Øn ch√†o m·ª´ng t√πy ch·ªânh d∆∞·ªõi d·∫°ng nh√∫ng")
                    .setRequired(false)
                )
                .addAttachmentOption((option) => option
                    .setName('image')
                    .setDescription('H√¨nh ·∫£nh c·ªßa b·∫°n')
                    .setRequired(false)
                )
            )
            .addSubcommand((subcommand) =>
                subcommand
                .setName("remove")
                .setDescription("üîπ X√≥a h·ªá th·ªëng tin nh·∫Øn ch√†o m·ª´ng t√πy ch·ªânh kh·ªèi m√°y ch·ªß")
            ),
    
    async execute(interaction) {

        // Ki·ªÉm tra tr·∫°ng th√°i c·ªßa l·ªánh
        const commandStatus = await CommandStatus.findOne({ command: '/welcome_custom' });

        // N·∫øu l·ªánh ƒëang t·∫Øt, g·ª≠i th√¥ng b√°o v√† kh√¥ng th·ª±c hi·ªán l·ªánh
        if (commandStatus && commandStatus.status === 'off') {
            return interaction.reply('L·ªánh n√†y ƒë√£ b·ªã t·∫Øt, vui l√≤ng th·ª≠ l·∫°i sau.');
        }

        const hasPermission = await checkOwner(interaction);
        if (!hasPermission) return;

        const { options } = interaction;
        const subcommand = interaction.options.getSubcommand();
        const guildId = interaction.guild.id;
        const isEmbed = interaction.options.getBoolean("embed");
        const image = options.getAttachment('image');

        // Ki·ªÉm tra xem l·ªùi ch√†o m·∫∑c ƒë·ªãnh ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t ch∆∞a
        const defaultWelcome = await WelcomeDefault.findOne({ guildId });
        if (defaultWelcome && defaultWelcome.defaultWelcomeActive) {
            return await interaction.reply('L·ªùi ch√†o m·ª´ng m·∫∑c ƒë·ªãnh ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p tr∆∞·ªõc ƒë√≥, vui l√≤ng x√≥a d·ªØ li·ªáu tr∆∞·ªõc khi thi·∫øt l·∫≠p l·ªùi ch√†o m·ª´ng m·ªõi.');
        }
    
        let welcome_custom = await WelcomeCustom.findOne({ guildId });
        if (!welcome_custom) {
            welcome_custom = new WelcomeCustom({ guildId });
        }

        if (subcommand === "set") {
            // SET
            const channelId = interaction.options.getChannel("channel").id;
            const message = interaction.options.getString("message");
            const rulesChannelId = interaction.options.getChannel("rules").id;
            welcome_custom.channelId = channelId;
            welcome_custom.message = message;
            welcome_custom.isEmbed = isEmbed;
            welcome_custom.imageUrl = image ? image.url : null;  // L∆∞u URL c·ªßa h√¨nh ·∫£nh n·∫øu c√≥
            welcome_custom.rulesChannelId = rulesChannelId;
            welcome_custom.customWelcomeActive = true;

            await welcome_custom.save();
    
            const successEmbed = new EmbedBuilder()
                .setTitle("H·ªá th·ªëng tin nh·∫Øn ch√†o m·ª´ng")
                .setColor(config.embedGreen)
                .setDescription(`Th√¥ng b√°o ch√†o m·ª´ng ƒë∆∞·ª£c ƒë·∫∑t th√†nh: ${message}.\n\nK√™nh ch√†o m·ª´ng th√†nh vi√™n m·ªõi: <#${channelId}>\nB·∫≠t t·∫Øt tin nh·∫Øn nh√∫ng: ${isEmbed ? "B·∫≠t" : "t·∫Øt"}`);
    
            await interaction.reply({ embeds: [successEmbed], ephemeral: true });
    
        } else if (subcommand === "remove") {
                // TOGGLE
                let existingData = await WelcomeCustom.findOne({ guildId });
        
                if (!existingData) {
                
                return await interaction.reply({ content: "H·ªá th·ªëng tin nh·∫Øn ch√†o m·ª´ng ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p tr√™n m√°y ch·ªß n√†y", ephemeral: true });
        
            }
    
            if (existingData) {
        
                await WelcomeCustom.deleteOne({ guildId });
                await interaction.reply({
                    embeds: [removedEmbed],
                    ephemeral: true,
                });
            }
        }
    },
};