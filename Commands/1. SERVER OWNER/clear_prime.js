const { SlashCommandBuilder, EmbedBuilder } = require("discord.js");
const interactionError = require('../../Events/WebhookError/interactionError');
const { checkOwner } = require(`../../permissionCheck`)
const CommandStatus = require('../../schemas/Command_Status');

module.exports = {
    data: new SlashCommandBuilder()
        .setName("clear_prime")
        .setDescription("üîπ X√≥a t·∫•t c·∫£ tin nh·∫Øn trong k√™nh")
        .addIntegerOption(option =>
            option.setName('amount')
                .setDescription('S·ªë l∆∞·ª£ng tin nh·∫Øn c·∫ßn x√≥a')
                .setRequired(true)),

    async execute(interaction) {

        // Ki·ªÉm tra tr·∫°ng th√°i c·ªßa l·ªánh
        const commandStatus = await CommandStatus.findOne({ command: '/clear_prime' });

        // N·∫øu l·ªánh ƒëang t·∫Øt, g·ª≠i th√¥ng b√°o v√† kh√¥ng th·ª±c hi·ªán l·ªánh
        if (commandStatus && commandStatus.status === 'off') {
            return interaction.reply('L·ªánh n√†y ƒë√£ b·ªã t·∫Øt, vui l√≤ng th·ª≠ l·∫°i sau.');
        }

        const hasPermission = await checkOwner(interaction);
        if (!hasPermission) return;

        // L·∫•y k√™nh v√† kh·ªüi t·∫°o b·ªô ƒë·∫øm cho c√°c tin nh·∫Øn ƒë√£ x√≥a
        const channel = interaction.channel;
        const amount = interaction.options.getInteger('amount');

        // Ki·ªÉm tra n·∫øu amount v∆∞·ª£t qu√° 100
        if (amount > 100) {
            const embed = new EmbedBuilder()
                .setColor('Green')
                .setDescription('```B·∫°n ch·ªâ c√≥ th·ªÉ x√≥a t·ªëi ƒëa 100 tin nh·∫Øn m·ªôt l·∫ßn.```');

            return interaction.reply({
                embeds: [embed],
                ephemeral: true
            });
        }

        // G·ª≠i ph·∫£n h·ªìi t·∫°m th·ªùi v·ªõi n·ªôi dung ban ƒë·∫ßu
        await interaction.reply({ content: 'T√¥i ƒëang x√≥a, h√£y ch·ªù ch√∫t.', ephemeral: true });

        // Hi·ªáu ·ª©ng d·∫•u ch·∫•m `...`
        let repeatCount = 1;
        const interval = setInterval(async () => {
            repeatCount = (repeatCount % 3) + 1;
            const repeat = '.'.repeat(repeatCount);
            await interaction.editReply({ content: `T√¥i ƒëang x√≥a, h√£y ch·ªù ch√∫t${repeat}` });
        }, 1000);
        
        let deletedSize = 0;

        try {
            // L·∫•y t·∫•t c·∫£ tin nh·∫Øn v√† x√≥a ch√∫ng m·ªôt c√°ch ƒë∆°n l·∫ª
            const fetchedMessages = await channel.messages.fetch({ limit: amount });
            await Promise.all(fetchedMessages.map(async (message) => {
                await message.delete();
                deletedSize++;
            }));
        } catch (error) {
            interactionError.execute(interaction, error, client);
        }

        // Sau khi ho√†n t·∫•t x√≥a, d·ª´ng hi·ªáu ·ª©ng d·∫•u ch·∫•m v√† g·ª≠i th√¥ng b√°o ho√†n t·∫•t
        clearInterval(interval);
        await interaction.editReply({
            content: `ƒê√£ x√≥a th√†nh c√¥ng **${deletedSize}** tin nh·∫Øn trong k√™nh n√†y.`,
        });
    },
};

