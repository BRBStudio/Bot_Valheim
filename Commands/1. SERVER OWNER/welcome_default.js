// welcome-default.js
const { SlashCommandBuilder, ChannelType } = require('discord.js');
const WelcomeDefault = require('../../schemas/welcomedefaultSchema.js');
const WelcomeCustom = require("../../schemas/welcomecustomSchema.js");
const { checkOwner } = require(`../../permissionCheck.js`)
const CommandStatus = require('../../schemas/Command_Status.js');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('welcome_default')
        .setDescription('üîπ Qu·∫£n l√Ω k√™nh ch√†o m·ª´ng m·∫∑c ƒë·ªãnh cho th√†nh vi√™n m·ªõi')
        .addSubcommand(subcommand =>
            subcommand
                .setName('on')
                .setDescription('üîπ B·∫≠t ch√†o m·ª´ng m·∫∑c ƒë·ªãnh v√† ch·ªçn k√™nh ch√†o m·ª´ng m·∫∑c ƒë·ªãnh')
                .addChannelOption(option => 
                    option.setName('channel')
                        .setDescription('Ch·ªçn k√™nh ƒë·ªÉ ch√†o m·ª´ng m·∫∑c ƒë·ªãnh')
                        .setRequired(true))
                .addAttachmentOption(option => 
                    option.setName('image')
                        .setDescription('Ch·ªçn h√¨nh ·∫£nh')
                        .setRequired(false)))
        .addSubcommand(subcommand =>
            subcommand
                .setName('off')
                .setDescription('üîπ T·∫Øt ch√†o m·ª´ng m·∫∑c ƒë·ªãnh v√† x√≥a thi·∫øt l·∫≠p m·∫∑c ƒë·ªãnh')),

    async execute(interaction) {

        // Ki·ªÉm tra tr·∫°ng th√°i c·ªßa l·ªánh
        const commandStatus = await CommandStatus.findOne({ command: '/welcome_default' });

        // N·∫øu l·ªánh ƒëang t·∫Øt, g·ª≠i th√¥ng b√°o v√† kh√¥ng th·ª±c hi·ªán l·ªánh
        if (commandStatus && commandStatus.status === 'off') {
            return interaction.reply('L·ªánh n√†y ƒë√£ b·ªã t·∫Øt, vui l√≤ng th·ª≠ l·∫°i sau.');
        }

        const hasPermission = await checkOwner(interaction);
        if (!hasPermission) return;

        const subcommand = interaction.options.getSubcommand();
        const guildId = interaction.guild.id;

        // Ki·ªÉm tra xem l·ªùi ch√†o t√πy ch·ªânh ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t ch∆∞a
        const customWelcome = await WelcomeCustom.findOne({ guildId });
        if (customWelcome && customWelcome.customWelcomeActive) {
            return await interaction.reply('L·ªùi ch√†o m·ª´ng custom ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p tr∆∞·ªõc ƒë√≥, vui l√≤ng x√≥a d·ªØ li·ªáu tr∆∞·ªõc khi thay ƒë·ªïi thi·∫øt l·∫≠p l·ªùi ch√†o m·ª´ng m·ªõi.');
        }

        if (subcommand === 'on') {
            const channel = interaction.options.getChannel('channel'); // L·∫•y k√™nh t·ª´ t√πy ch·ªçn
            if (channel.type !== ChannelType.GuildText) { // Ki·ªÉm tra xem k√™nh c√≥ ph·∫£i l√† k√™nh vƒÉn b·∫£n kh√¥ng
                return await interaction.reply('Vui l√≤ng ch·ªçn k√™nh vƒÉn b·∫£n.');
            }

            const image = interaction.options.getAttachment('image'); // H√¨nh ·∫£nh t√πy ch·ªçn
            let imageURL;

            // N·∫øu ng∆∞·ªùi d√πng kh√¥ng cung c·∫•p h√¨nh ·∫£nh, s·ª≠ d·ª•ng ·∫£nh ƒë√£ l∆∞u tr∆∞·ªõc ƒë√≥
            if (!image) {
                const existingWelcome = await WelcomeDefault.findOne({ guildId });
                if (existingWelcome && existingWelcome.imageURL) {
                    imageURL = existingWelcome.imageURL; // S·ª≠ d·ª•ng h√¨nh ·∫£nh ƒë√£ l∆∞u
                } else {
                    imageURL = null; // Kh√¥ng c√≥ h√¨nh ·∫£nh n√†o
                }
            } else {
                imageURL = image.url; // S·ª≠ d·ª•ng URL c·ªßa h√¨nh ·∫£nh m·ªõi
            }

            // L∆∞u th√¥ng tin v√†o MongoDB
            await WelcomeDefault.findOneAndUpdate(
                { guildId },
                { channelId: channel.id, defaultWelcomeActive: true, imageURL },
                { upsert: true } // T·∫°o m·ªõi n·∫øu kh√¥ng t√¨m th·∫•y b·∫£n ghi
            );

            return await interaction.reply(`ƒê√£ b·∫≠t ch√†o m·ª´ng v√† k√™nh ƒë∆∞·ª£c ch·ªçn l√† <#${channel.id}>.`);
        } else if (subcommand === 'off') {
            // X√≥a thi·∫øt l·∫≠p
            await WelcomeDefault.deleteOne({ guildId });
            return await interaction.reply('ƒê√£ t·∫Øt ch√†o m·ª´ng v√† x√≥a thi·∫øt l·∫≠p.');
        }
    },
};


























// const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');
// const economySystem = require('../../schemas/economySystem');
// const config = require(`../../config`);

// var timeout = [];

// module.exports = {
//     data: new SlashCommandBuilder()
//         .setName('economy')
//         .setDescription('Kinh t·∫ø.')
//         .addSubcommand(command => command.setName('great-account').setDescription('T·∫°o t√†i kho·∫£n kinh t·∫ø'))
//         .addSubcommand(command => command.setName('delete').setDescription('X√≥a t√†i kho·∫£n ti·∫øt ki·ªám c·ªßa ng∆∞·ªùi d√πng').addUserOption(op => op.setName('account').setDescription('Ch·ªçn ng∆∞·ªùi d√πng ƒë·ªÉ x√≥a t√†i kho·∫£n').setRequired(true)))
//         .addSubcommand(command => command.setName('view-account').setDescription('Xem s·ªë d∆∞ v√† th√¥ng tin t√†i kho·∫£n n·ªÅn kinh t·∫ø c·ªßa b·∫°n.'))
//         .addSubcommand(command => command.setName('deposit-account').setDescription('G·ª≠i ti·ªÅn t·ª´ v√≠ c·ªßa b·∫°n v√†o ng√¢n h√†ng.').addStringOption(op => op.setName('amount').setDescription('S·ªë ti·ªÅn g·ª≠i').setRequired(true)))
//         .addSubcommand(command => command.setName('daily-account').setDescription('s·ªë ti·ªÅn h·ªó tr·ª£ h√†ng ng√†y c·ªßa b·∫°n'))
//         .addSubcommand(command => command.setName('ask-money').setDescription('Xin ti·ªÅn'))
//         .addSubcommand(command => command.setName('gamble').setDescription('ƒê√°nh b·∫°c ƒë·ªÉ th·∫Øng ho·∫∑c thua ti·ªÅn').addStringOption(op => op.setName('amount').setDescription('S·ªë ti·ªÅn ƒë√°nh b·∫°c (m·∫∑c ƒë·ªãnh = 500)').setRequired(false)))
//         .addSubcommand(command => command.setName('work').setDescription('L√†m vi·ªác ƒë·ªÉ ki·∫øm ti·ªÅn'))
//         .addSubcommand(command => command.setName('withdraw-money').setDescription('R√∫t ti·ªÅn t·ª´ ng√¢n h√†ng v·ªÅ v√≠').addStringOption(op => op.setName('amount').setDescription('S·ªë ti·ªÅn c·∫ßn r√∫t').setRequired(true)))
//         .addSubcommand(command => command.setName('rob').setDescription('C∆∞·ªõp ti·ªÅn m·ªôt ng∆∞·ªùi').addUserOption(op => op.setName('user').setDescription('Ch·ªçn ng∆∞·ªùi d√πng b·∫°n mu·ªën c∆∞·ªõp').setRequired(true))),

//     async execute(interaction, client) {
//         const { options, guild, user } = interaction;

//         // Ghi l·∫°i th√¥ng tin ng∆∞·ªùi d√πng v√† guild
//         // console.log(`User: ${user.id}, Guild: ${guild.id}`);
        
//         let data = await economySystem.findOne({ Guild: guild.id, User: user.id });
//         // console.log('T√¨m d·ªØ li·ªáu t√†i kho·∫£n:', data);
        
//         const sub = options.getSubcommand();
//         // console.log(`Subcommand ƒë∆∞·ª£c th·ª±c thi: ${sub}`);

//         try {
//             switch (sub) {
//             case "great-account":
//                     if (data) {
//                         // console.log("T√†i kho·∫£n ƒë√£ t·ªìn t·∫°i.");
//                         return await interaction.reply({ content: "B·∫°n ƒë√£ c√≥ t√†i kho·∫£n ph·ªï th√¥ng!", ephemeral: true });
//                     } else {
//                         // console.log("T·∫°o t√†i kho·∫£n m·ªõi.");
//                 try {        
//                         await economySystem.create({
//                             Guild: guild.id,
//                             User: user.id,
//                             Bank: 5000,
//                             Wallet: 5000,
//                             Worked: 0,
//                             Gambled: 0,
//                             Begged: 0,
//                             HoursWorked: 0,
//                             CommandsRan: 0,
//                             Moderated: 0
//                         });
//                     } catch (error) {
//                         // console.error("L·ªói khi t·∫°o t√†i kho·∫£n:", error);
//                         return await interaction.reply({ content: "ƒê√£ x·∫£y ra l·ªói khi t·∫°o t√†i kho·∫£n!", ephemeral: true });
//                     }

//                         const embed = new EmbedBuilder()
//                             .setAuthor({ name: `H·ªá th·ªëng kinh t·∫ø ${client.config.DevBy}` })
//                             .setColor(config.embedCyan)
//                             .setTitle(`${client.user.username} H·ªá th·ªëng kinh t·∫ø ${client.config.arrowDownEmoji}`)
//                             .setThumbnail(client.user.displayAvatarURL())
//                             .setDescription('B·∫°n ƒë√£ t·∫°o t√†i kho·∫£n kinh t·∫ø, b·∫°n ƒë√£ ƒë∆∞·ª£c th∆∞·ªüng:\n\n‚Ä¢ 5.000 vnd -> üè¶\n‚Ä¢ 5.000 vnd -> üíµ\n\n__D√πng l·ªánh \`/economy view-account \` ƒë·ªÉ xem s·ªë d∆∞ v√† th√¥ng tin c·ªßa b·∫°n.__')
//                             .setFooter({ text: `Kinh t·∫ø m√°y ch·ªß ${guild.name}`, iconURL: guild.iconURL() })
//                             .setTimestamp();

//                         await interaction.reply({ embeds: [embed] });
//                     }
//                     break;


//             case "delete":
//                     if (!data) {
//                         return await interaction.reply({ content: "B·∫°n kh√¥ng c√≥ t√†i kho·∫£n ph·ªï th√¥ng ƒë·ªÉ x√≥a!", ephemeral: true });
//                     } else {
//                         await economySystem.deleteOne({ Guild: guild.id, User: user.id });

//                         const deleted = new EmbedBuilder()
//                             .setAuthor({ name: `H·ªá th·ªëng kinh t·∫ø ${client.config.DevBy}` })
//                             .setTitle(`${client.user.username} H·ªá th·ªëng kinh t·∫ø ${client.config.arrowDownEmoji}`)
//                             .setThumbnail(client.user.displayAvatarURL())
//                             .setFooter({ text: `Kinh t·∫ø m√°y ch·ªß ${guild.name}`, iconURL: guild.iconURL() })
//                             .setTimestamp()
//                             .setColor(config.embedRed)
//                             .setDescription('> T√†i kho·∫£n ph·ªï th√¥ng c·ªßa b·∫°n ƒë√£ b·ªã **x√≥a**.');

//                         await interaction.reply({ embeds: [deleted] });
//                     }
//                     break;


//             case "view-account":
//                     if (!data) return await interaction.reply({ content: "Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n ph·ªï th√¥ng, h√£y t·∫°o m·ªôt t√†i kho·∫£n b·∫±ng c√°ch s·ª≠ d·ª•ng \`/economy great-account \`", ephemeral: true });

//                     else {
//                         const formattedBank = data.Bank.toLocaleString('vi-VN');
//                         const formattedWallet = data.Wallet.toLocaleString('vi-VN');
//                         const totalAmount = (data.Wallet + data.Bank).toLocaleString('vi-VN');
                        
//                         const embed = new EmbedBuilder()
//                         .setAuthor({ name: `H·ªá th·ªëng kinh t·∫ø ${client.config.DevBy}` })
//                         .setTitle(`${client.user.username} H·ªá th·ªëng kinh t·∫ø ${client.config.arrowDownEmoji}`)
//                         .setDescription(`> ƒê√¢y l√† th√¥ng tin t√†i kho·∫£n c·ªßa b·∫°n:`)
//                         .setThumbnail(client.user.displayAvatarURL())
//                         .setColor(config.embedGreen)
//                         .addFields(
//                             { name: "T√†i kho·∫£n v√£ng lai", value: [
//                                 `‚Ä¢ üè¶ **${formattedBank} vnd** Trong ng√¢n h√†ng`, 
//                                 `‚Ä¢ üíµ **${formattedWallet} vnd** B·∫±ng ti·ªÅn m·∫∑t`, 
//                                 `‚Ä¢ üí∞ **${totalAmount} vnd** T·ªïng th·ªÉ`
//                             ].join("\n"), inline: false },
//                             { name: "Khu v·ª±c c√° nh√¢n", value: [
//                                 `‚Ä¢ üßë‚Äçüíª **${data.CommandsRan}** {/} l·∫ßn g·ª≠i v√† r√∫t ti·ªÅn`, 
//                                 `‚Ä¢ üõ†Ô∏è **${data.Moderated}** l·∫ßn (ki·ªÉm duy·ªát)`, 
//                                 `‚Ä¢ üôè **${data.Begged}** l·∫ßn xin ti·ªÅn`, 
//                                 `‚Ä¢ üë∑ **${data.Worked}** l·∫ßn l√†m vi·ªác (${data.HoursWorked} h)`, 
//                                 `‚Ä¢ üé∞ **${data.Gambled}** l·∫ßn ƒë√°nh b·∫°c`
//                             ].join("\n"), inline: false }
//                         )
//                         .setFooter({ text: `Kinh t·∫ø m√°y ch·ªß ${guild.name}`, iconURL: guild.iconURL() })
//                         .setTimestamp();

//                         await interaction.reply({ embeds: [embed] });
//                     }
//                     break;


//             case "deposit-account": 
//                     if (!data) return await interaction.reply({ content: "B·∫°n ch∆∞a c√≥ t√†i kho·∫£n, h√£y t·∫°o m·ªôt t√†i kho·∫£n b·∫±ng c√°ch s·ª≠ d·ª•ng `/economy great-account`", ephemeral: true });

//                     // Nh·∫≠n gi√° tr·ªã t·ª´ tham s·ªë v√† chuy·ªÉn ƒë·ªïi th√†nh s·ªë
//                     let amountString = options.getString('amount'); // Nh·∫≠n gi√° tr·ªã d∆∞·ªõi d·∫°ng chu·ªói
//                     let amount = parseFloat(amountString.replace('.', '')); // Thay th·∫ø d·∫•u ch·∫•m ƒë·ªÉ chuy·ªÉn ƒë·ªïi th√†nh s·ªë

//                     // Ki·ªÉm tra n·∫øu s·ªë ti·ªÅn l√† m·ªôt s·ªë h·ª£p l·ªá
//                     if (isNaN(amount) || amount <= 0) {
//                         return await interaction.reply({ content: "S·ªë ti·ªÅn g·ª≠i kh√¥ng h·ª£p l·ªá!", ephemeral: true });
//                     }

//                     if (data.Wallet < amount) {
//                         return await interaction.reply({ content: `B·∫°n ƒëang c·ªë g·∫Øng g·ª≠i ti·ªÅn ${amountString} vnd trong khi b·∫°n ch·ªâ c√≥ ${data.Wallet.toLocaleString('vi-VN')} vnd c√≥ s·∫µn ƒë·ªÉ g·ª≠i...`, ephemeral: true });
//                     }

//                     // C·∫≠p nh·∫≠t s·ªë d∆∞
//                     data.Wallet -= amount; // S·ª≠ d·ª•ng amount ƒë√£ t√≠nh to√°n
//                     data.Bank += amount; // C·∫≠p nh·∫≠t s·ªë ti·ªÅn v√†o ng√¢n h√†ng
//                     data.CommandsRan += 1;
//                     await data.save();

//                     // T·∫°o Embed ƒë·ªÉ tr·∫£ l·ªùi
//                     const embedDeposit = new EmbedBuilder()
//                         .setAuthor({ name: `H·ªá th·ªëng kinh t·∫ø ${client.config.DevBy}` })
//                         .setTitle(`M·ªõi H·ªá th·ªëng kinh t·∫ø ${client.config.arrowDownEmoji}`)
//                         .setThumbnail(client.user.displayAvatarURL())
//                         .setColor(client.config.embedGreen)
//                         .setDescription(`> B·∫°n ƒë√£ g·ª≠i ti·ªÅn th√†nh c√¥ng **${amountString} vnd** v√†o v√≠ c·ªßa b·∫°n \n\n‚Ä¢ d√πng \`/economy view-account\` ƒë·ªÉ xem th√¥ng tin m·ªõi c·ªßa b·∫°n.`)
//                         .setFooter({ text: `Kinh t·∫ø m√°y ch·ªß ${guild.name}`, iconURL: guild.iconURL() })
//                         .setTimestamp();

//                     // Tr·∫£ l·ªùi v·ªõi Embed ƒë√£ ƒë·ªãnh d·∫°ng
//                     await interaction.reply({ embeds: [embedDeposit] });
//                     break;


//             case "daily-account":
//                     if (timeout.includes(interaction.user.id)) return await interaction.reply({ content: "H√¥m nay b·∫°n ƒë√£ s·ª≠ d·ª•ng \`/daily\` r·ªìi. H√£y quay l·∫°i sau **24 h**", ephemeral: true });

//                     if (!data) return await interaction.reply({ content: "B·∫°n ch∆∞a c√≥ t√†i kho·∫£n, h√£y t·∫°o m·ªôt t√†i kho·∫£n b·∫±ng c√°ch s·ª≠ d·ª•ng \`/economy great-account \`", ephemeral: true });
//                     else {
//                         const randAmount = Math.round((Math.random() * 3000) + 10);

//                         data.Bank += randAmount;
//                         data.CommandsRan += 1;
//                         data.save();

//                         const embed = new EmbedBuilder()
//                             .setAuthor({ name: `H·ªá th·ªëng kinh t·∫ø ${client.config.DevBy}` })
//                             .setTitle(`${client.user.username} H·ªá th·ªëng kinh t·∫ø ${client.config.arrowDownEmoji}`)
//                             .setThumbnail(client.user.displayAvatarURL())
//                             .setColor(client.config.embedGreen)
//                             .setDescription(`> B·∫°n ƒë√£ nh·∫≠n ƒë∆∞·ª£c s·ªë ti·ªÅn h·ªó tr·ª£ h√†ng ng√†y c·ªßa m√¨nh!\n\n‚Ä¢ S·ªë l∆∞·ª£ng: **$${randAmount}**\n‚Ä¢ Th·ªùi gian nh·∫≠n ti·∫øp sau: **24 h**`)
//                             .setFooter({ text: `Kinh t·∫ø m√°y ch·ªß ${guild.name}`, iconURL: guild.iconURL() })
//                             .setTimestamp();

//                         await interaction.reply({ embeds: [embed] });

//                         timeout.push(interaction.user.id);
//                         setTimeout(() => {
//                             timeout.shift();
//                         }, 86400000);
//                     }
//                     break;


//                     case "ask-money":
//                         // Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng kh√¥ng c√≥ t√†i kho·∫£n
//                         if (!data) {
//                             return await interaction.reply({ content: "B·∫°n ch∆∞a c√≥ t√†i kho·∫£n, h√£y t·∫°o m·ªôt t√†i kho·∫£n b·∫±ng c√°ch s·ª≠ d·ª•ng \`/economy great-account\`", ephemeral: true });
//                         }
                    
//                         // Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng ƒë√£ xin ti·ªÅn g·∫ßn ƒë√¢y
//                         if (timeout.includes(interaction.user.id)) {
//                             return await interaction.reply({ content: "H√£y quay l·∫°i sau **10 ti·∫øng** ƒë·ªÉ xin ti·ªÅn!", ephemeral: true });
//                         }
                    
//                         // L·∫•y th·ªùi gian hi·ªán t·∫°i v√† th·ªùi gian g·∫ßn nh·∫•t ng∆∞·ªùi d√πng xin ti·ªÅn
//                         const now = new Date();
//                         const lastBegged = data.LastBegged;
//                         const timeDifference = lastBegged ? (now - lastBegged) / (1000 * 60 * 60) : 0; // T√≠nh th·ªùi gian ch·ªù (t√≠nh b·∫±ng gi·ªù)
                    
//                         // Ki·ªÉm tra n·∫øu th·ªùi gian ch·ªù ƒë·ªß 10 ti·∫øng
//                         if (timeDifference < 10) {
//                             const remainingTime = 10 - timeDifference; // T√≠nh th·ªùi gian c√≤n l·∫°i
//                             return await interaction.reply({ content: `H√£y quay l·∫°i sau **${remainingTime.toFixed(2)} gi·ªù** ƒë·ªÉ xin ti·ªÅn.`, ephemeral: true });
//                         } else {
//                             const randAmount = Math.round((Math.random() * 750) + 10);
                    
//                             // C·∫≠p nh·∫≠t s·ªë li·ªáu
//                             data.CommandsRan += 1;
//                             data.Begged += 1; // TƒÉng s·ªë l·∫ßn xin ti·ªÅn
//                             data.Wallet += randAmount; // C·∫≠p nh·∫≠t s·ªë ti·ªÅn v√†o v√≠
//                             data.LastBegged = now; // C·∫≠p nh·∫≠t th·ªùi gian xin ti·ªÅn
//                             await data.save();
                    
//                             // T·∫°o Embed ƒë·ªÉ tr·∫£ l·ªùi
//                             const embed = new EmbedBuilder()
//                                 .setAuthor({ name: `H·ªá th·ªëng kinh t·∫ø ${client.config.DevBy}` })
//                                 .setTitle(`${client.user.username} H·ªá th·ªëng kinh t·∫ø ${client.config.arrowDownEmoji}`)
//                                 .setDescription(`> B·∫°n v·ª´a xin ti·ªÅn v√† ƒë√£ **th√†nh c√¥ng**:\n\n‚Üí S·ªë ti·ªÅn ƒë√£ xin: **${randAmount} vnd**\n‚Ä¢ Th·ªùi gian xin ti·∫øp theo: **10 gi·ªù**`)
//                                 .setFooter({ text: `1 ph√∫t n·ªØa quay l·∫°i v√† d√πng \`/economy ask-money\`` })
//                                 .setColor(client.config.embedGreen)
//                                 .setTimestamp()
//                                 .setThumbnail(client.user.displayAvatarURL());
                    
//                             await interaction.reply({ embeds: [embed] });
                    
//                             // Th√™m user v√†o timeout
//                             timeout.push(interaction.user.id);
//                             setTimeout(() => {
//                                 timeout = timeout.filter(id => id !== interaction.user.id); // X√≥a user kh·ªèi timeout sau 10 ti·∫øng
//                             }, 36000000); // 10 ti·∫øng
//                         }
//                         break;
                    


//             case "gamble":
//                         if (timeout.includes(interaction.user.id)) return await interaction.reply({ content: "H√£y quay l·∫°i sau **5 ph√∫t** ƒë·ªÉ ƒë√°nh b·∫°c nhi·ªÅu h∆°n!", ephemeral: true });
                    
//                         // Nh·∫≠n gi√° tr·ªã t·ª´ tham s·ªë v√† chuy·ªÉn ƒë·ªïi th√†nh s·ªë
//                         let amountString1 = options.getString('amount') || '500'; // Nh·∫≠n gi√° tr·ªã d∆∞·ªõi d·∫°ng chu·ªói
//                         let amount1 = parseFloat(amountString1.replace('.', '')); // Thay th·∫ø d·∫•u ch·∫•m ƒë·ªÉ chuy·ªÉn ƒë·ªïi th√†nh s·ªë
                    
//                         // Ki·ªÉm tra n·∫øu s·ªë ti·ªÅn l√† m·ªôt s·ªë h·ª£p l·ªá
//                         if (isNaN(amount1) || amount1 <= 0) {
//                             return await interaction.reply({ content: "S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá! h√£y d√πng c√°ch vi·∫øt ```1.000```", ephemeral: true });
//                         }
                    
//                         if (!data) return await interaction.reply({ content: "B·∫°n ch∆∞a c√≥ t√†i kho·∫£n, h√£y t·∫°o m·ªôt t√†i kho·∫£n b·∫±ng c√°ch s·ª≠ d·ª•ng \`/economy great-account\`", ephemeral: true });
//                         else {
//                             if (data.Wallet < amount1) return await interaction.reply({ content: `B·∫°n ch·ªâ c√≥ **${data.Wallet.toLocaleString('vi-VN')} vnd** trong v√≠ c·ªßa b·∫°n...`, ephemeral: true });
//                             if (data.Wallet < amount1 && data.Bank > amount1) return await interaction.reply({ content: `B·∫°n c√≥ **${data.Wallet.toLocaleString('vi-VN')} vnd** trong v√≠ c·ªßa b·∫°n nh∆∞ng **${data.Bank.toLocaleString('vi-VN')} vnd**...kh√¥ng ƒë·ªß r√∫t m·ªôt s·ªë ti·ªÅn ƒë·ªÉ ƒë√°nh b·∫°c` });
                    
//                             const acca = [0.4, 0.8, 1, 5, 2.1, 1.6, 10, 2, 0.9, 1.1, 0, 0, 1, 2, 3, 0.2, 0.3, 0.4, 1.2, 0.3, 0.35, 0, 8, 0.2, 0.5, 0, 0.1, 2.5, 1.8, 0.4, 0.8, 1, 5, 2.1, 1.6, 10, 2, 0.9, 1.1, 0, 0, 1, 2, 3, 0.1, 2.5, 1.8, 100];
                    
//                             const jobPick = acca[Math.floor(Math.random() * acca.length)];
                    
//                             if (jobPick === 1) return await interaction.reply({ content: "B·∫°n kh√¥ng *th·∫Øng* hay *thua*" });
                    
//                             const winorlose = jobPick * amount1;
                    
//                             const hours = Math.round((Math.random() * 15) + 8);
                    
//                             let choice;
//                             let happened;
//                             let profit;
                    
//                             if (jobPick < 1) {
//                                 choice = "Thua";
//                                 happened = "Th·∫Øng";
//                             }
//                             if (jobPick > 1) {
//                                 choice = "Th·∫Øng";
//                                 happened = "Th·∫Øng";
//                                 profit = winorlose - amount1;
//                             }
                    
//                             data.Wallet -= amount1;
//                             data.Wallet += winorlose;
//                             data.Gambled += 5;
//                             data.CommandsRan += 1;
//                             await data.save();
                    
//                             const embed = new EmbedBuilder()
//                                 .setAuthor({ name: `H·ªá th·ªëng kinh t·∫ø ${client.config.DevBy}` })
//                                 .setTitle(`${client.user.username} H·ªá th·ªëng kinh t·∫ø ${client.config.arrowDownEmoji}`)
//                                 .setThumbnail(client.user.displayAvatarURL())
//                                 .setDescription(`B·∫°n v·ª´a ƒë√°nh b·∫°c **${amountString1} vnd** v√† **${choice}**\n\nüíµ S·ªë ti·ªÅn ƒë√°nh b·∫°c: **${amountString1} vnd**\nüé∞ T√≠ch l≈©y: **${jobPick}**\n\nüéâ T·ªïng c·ªông **${happened}: ${winorlose.toLocaleString('vi-VN')} vnd**`)
//                                 .setFooter({ text: `Quay l·∫°i sau 5 ph√∫t v√† d√πng \`/economy gamble\`` })
//                                 .setColor(config.embedGold)
//                                 .setTimestamp();
                    
//                             await interaction.reply({ embeds: [embed] });
                    
//                             timeout.push(interaction.user.id);
//                             setTimeout(() => {
//                                 timeout.shift();
//                             }, 300000);
//                         }
//                         break;
                        
                    
//             case "work":
//                     if (timeout.includes(interaction.user.id)) return await interaction.reply({ content: "h√£y quay l·∫°i sau **5 ph√∫t** ƒë·ªÉ l√†m vi·ªác l·∫°i!", ephemeral: true });

//                     if (!data) return await interaction.reply({ content: "B·∫°n ch∆∞a c√≥ t√†i kho·∫£n, h√£y t·∫°o m·ªôt t√†i kho·∫£n b·∫±ng c√°ch s·ª≠ d·ª•ng \`/economy great-account\`", ephemeral: true });
//                     else {
//                         const jobs = [
//                             "Valheim",
//                             "LMHT",
//                             "X√¢y d·ª±ng nh√† Valheim",
//                             "X√¢y d·ª±ng map",
//                             "Game th·ªß",
//                             "Ng∆∞·ªùi s√°ng t·∫°o",
//                             "Streamer",
//                             "Quan h·ªá c√¥ng ch√∫ng",
//                             "Qu·∫£n l√Ω"
//                         ];

//                         const jobPick = jobs[Math.floor(Math.random() * jobs.length)];

//                         const amount = Math.round((Math.random() * 10000) + 10);

//                         const hours = Math.round((Math.random() * 15) + 8);

//                         const pph = Math.round(amount / hours);

//                         data.Bank += amount;
//                         data.Worked += 1;
//                         data.HoursWorked += hours;
//                         data.CommandsRan += 1;
//                         data.save();

//                         // ƒê·ªãnh d·∫°ng l·∫°i amount v√† pph theo ki·ªÉu VND
//                         const formattedAmount = amount.toLocaleString('vi-VN');
//                         const formattedPPH = pph.toLocaleString('vi-VN');

//                         const embed = new EmbedBuilder()
//                         .setAuthor({ name: `H·ªá th·ªëng kinh t·∫ø ${client.config.DevBy}` })
//                         .setTitle(`${client.user.username} H·ªá th·ªëng kinh t·∫ø ${client.config.arrowDownEmoji}`)
//                         .setThumbnail(client.user.displayAvatarURL())
//                         .setDescription(`B·∫°n ƒë√£ l√†m vi·ªác v·ªõi t∆∞ c√°ch **${jobPick}**\n\n‚Üí S·ªë gi·ªù ƒë√£ l√†m vi·ªác: **${hours}** gi·ªù\n^ Tr·∫£ l∆∞∆°ng trong ng√†y: **${formattedAmount} vnd**\n‚Üí Tr·∫£ l∆∞∆°ng m·ªói gi·ªù: **${formattedPPH} vnd**`)
//                         .setFooter({ text: `H√£y quay l·∫°i sau 5 ph√∫t v√† d√πng \`/economy work\`` })
//                         .setColor(config.embedGold)
//                         .setTimestamp()

//                         await interaction.reply({ embeds: [embed] });

//                         timeout.push(interaction.user.id);
//                         setTimeout(() => {
//                             timeout.shift();
//                         }, 300000);
//                     }
//                     break;


//             case "withdraw-money":
//                         // Nh·∫≠n gi√° tr·ªã t·ª´ tham s·ªë v√† chuy·ªÉn ƒë·ªïi th√†nh s·ªë
//                         let amountString2 = options.getString('amount');
//                         let amount2 = parseFloat(amountString2.replace(/\./g, '')); // Thay th·∫ø d·∫•u ch·∫•m ƒë·ªÉ chuy·ªÉn ƒë·ªïi th√†nh s·ªë
                        
//                         // Ki·ªÉm tra n·∫øu s·ªë ti·ªÅn l√† m·ªôt s·ªë h·ª£p l·ªá
//                         if (isNaN(amount2) || amount2 <= 0) {
//                             return await interaction.reply({ content: "S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá! H√£y d√πng c√°ch vi·∫øt ```1.000```", ephemeral: true });
//                         }
                    
//                         if (!data) {
//                             return await interaction.reply({ content: "B·∫°n ch∆∞a c√≥ t√†i kho·∫£n, h√£y t·∫°o m·ªôt t√†i kho·∫£n b·∫±ng c√°ch s·ª≠ d·ª•ng \`/economy great-account\`", ephemeral: true });
//                         } else {
//                             if (data.Bank < amount2) {
//                                 return await interaction.reply({ content: `B·∫°n ƒëang c·ªë g·∫Øng r√∫t **${amount2.toLocaleString('vi-VN')} vnd** trong khi b·∫°n ch·ªâ c√≥ s·∫µn **${data.Bank.toLocaleString('vi-VN')} vnd** ƒë·ªÉ th·ª±c hi·ªán vi·ªác ƒë√≥...`, ephemeral: true });
//                             }
                    
//                             data.Bank -= amount2;
//                             data.Wallet += amount2;
//                             data.CommandsRan += 1;
//                             await data.save();
                    
//                             const embed = new EmbedBuilder()
//                                 .setAuthor({ name: `H·ªá th·ªëng kinh t·∫ø ${client.config.DevBy}` })
//                                 .setTitle(`${client.user.username} H·ªá th·ªëng kinh t·∫ø ${client.config.arrowDownEmoji}`)
//                                 .setThumbnail(client.user.displayAvatarURL())
//                                 .setColor(client.config.embedGreen)
//                                 .setFooter({ text: `Kinh t·∫ø m√°y ch·ªß ${guild.name}`, iconURL: guild.iconURL() })
//                                 .setDescription(`B·∫°n ƒë√£ r√∫t th√†nh c√¥ng **${amount2.toLocaleString('vi-VN')} vnd** v·ªÅ v√≠ c·ªßa m√¨nh \n\nCh·∫°y \`/economy view-account\` ƒë·ªÉ xem th√¥ng tin m·ªõi c·ªßa b·∫°n.`)
//                                 .setTimestamp();
                    
//                             await interaction.reply({ embeds: [embed] });
//                         }
//                         break;

                    
//             case "rob":
//                         if (timeout.includes(interaction.user.id)) 
//                             return await interaction.reply({ content: 'B·∫°n c·∫ßn ƒë·ª£i **1 ph√∫t** ƒë·ªÉ c∆∞·ªõp l·∫°i ng∆∞·ªùi d√πng kh√°c', ephemeral: true });

//                         const userStealing = options.getUser('user');

//                         let Data = await economySystem.findOne({ Guild: guild.id, User: user.id });
//                         let DataUser = await economySystem.findOne({ Guild: guild.id, User: userStealing.id });

//                         if (!Data) 
//                             return await interaction.reply({ content: "B·∫°n ch∆∞a c√≥ t√†i kho·∫£n, h√£y t·∫°o m·ªôt t√†i kho·∫£n b·∫±ng c√°ch s·ª≠ d·ª•ng `/economy great-account`", ephemeral: true });
//                         if (userStealing == interaction.user) 
//                             return await interaction.reply({ content: 'B·∫°n **kh√¥ng th·ªÉ** c∆∞·ªõp ch√≠nh m√¨nh!', ephemeral: true });
//                         if (!DataUser) 
//                             return await interaction.reply({ content: 'Ng∆∞·ªùi d√πng ƒë√≥ **kh√¥ng** c√≥ t√†i kho·∫£n ph·ªï th√¥ng ƒë∆∞·ª£c t·∫°o', ephemeral: true });
//                         if (DataUser.Wallet <= 0) 
//                             return await interaction.reply({ content: 'Ng∆∞·ªùi d√πng ƒë√≥ **kh√¥ng** c√≥ ti·ªÅn trong v√≠ c·ªßa h·ªç', ephemeral: true });

//                         let negative = Math.round((Math.random() * -150) - 10);
//                         let positive = Math.round((Math.random() * 300) - 10);

//                         const posN = [negative, positive];

//                         const amount3 = Math.round(Math.random() * posN.length);
//                         const value = posN[amount3];

//                         if (Data.Wallet <= 0) 
//                             return await interaction.reply({ content: 'B·∫°n **kh√¥ng th·ªÉ** c∆∞·ªõp c·ªßa ng∆∞·ªùi n√†y v√¨ v√≠ c·ªßa b·∫°n c√≥ **0 vnd** trong ƒë√≥', ephemeral: true });

//                         if (value > 0) {
//                             // tr·ªôm th√†nh c√¥ng
//                             const positiveChoices = [
//                                 "B·∫°n ƒë√£ ƒÉn tr·ªôm",
//                                 "Ng∆∞·ªùi ch·ªß ƒë√£ nh√¨n th·∫•y b·∫°n v√† gi√∫p b·∫°n c∆∞·ªõp",
//                                 "B·∫°n ƒë√£ c∆∞·ªõp",
//                                 "B·∫°n ƒë√£ l·∫•y",
//                                 "B·∫°n ƒë√£ c∆∞·ªõp th√†nh c√¥ng",
//                                 "B·∫°n ƒë√°nh ng∆∞·ªùi ƒë√≥ v√† l·∫•y",
//                                 "B·∫°n c∆∞·ªõp ng∆∞·ªùi r·ªìi b·ªè tr·ªën c√πng",
//                                 "B·∫°n ƒë√£ ƒë·ªôt nh·∫≠p v√†o t√†i kho·∫£n ng√¢n h√†ng c·ªßa ng∆∞·ªùi ƒë√≥ v√† l·∫•y",
//                             ];

//                             const posName = Math.floor(Math.random() * positiveChoices.length);

//                             const begEmbed = new EmbedBuilder()
//                                 .setColor(client.config.embedGreen)
//                                 .setAuthor({ name: `H·ªá th·ªëng kinh t·∫ø ${client.config.DevBy}`})
//                                 .setTitle(`${client.user.username} H·ªá th·ªëng kinh t·∫ø ${client.config.arrowDownEmoji}`)
//                                 .addFields({ name: '> B·∫°n ƒë√£ c∆∞·ªõp v√†', value: `‚Ä¢ ${positiveChoices[posName]} ${value.toLocaleString('vi-VN')} vnd`})  // Thay ƒë·ªïi s·ªë ti·ªÅn sang ƒë·ªãnh d·∫°ng vnd
//                                 .setFooter({ text: `Kinh t·∫ø m√°y ch·ªß ${guild.name}`, iconURL: guild.iconURL() })
//                                 .setThumbnail(client.user.avatarURL())
//                                 .setTimestamp();

//                             await interaction.reply({ embeds: [begEmbed] });

//                             Data.Wallet += value;
//                             await Data.save();

//                             DataUser.Wallet -= value;
//                             await DataUser.save();
//                         } else if (value < 0) {
//                             // tr·ªôm th·∫•t b·∫°i
//                             const negativeChoices = [
//                                 "B·∫°n b·ªã c·∫£nh s√°t b·∫Øt v√† b·ªã l·∫°c",
//                                 "B·∫°n ƒë·ªÉ l·∫°i gi·∫•y t·ªù t√πy th√¢n v√† b·ªã b·∫Øt, b·∫°n thua cu·ªôc",
//                                 "Ng∆∞·ªùi ƒë√≥ ƒë√°nh b·∫°n b·∫•t t·ªânh v√† l·∫•y ƒëi",
//                                 "Ng∆∞·ªùi ƒë√≥ nh√¨n th·∫•y b·∫°n v√† l·∫•y",
//                                 "Ng∆∞·ªùi ƒë√≥ b·∫Øt ƒë∆∞·ª£c b·∫°n v√† l·∫•y ƒëi",
//                                 "Ng∆∞·ªùi ƒë√≥ ƒë√£ ƒë√°nh b·∫°n v√† l·∫•y ƒëi",
//                                 "Ng∆∞·ªùi ƒë√≥ ƒë√£ g·ªçi c·∫£nh s√°t v√† b·∫°n ƒë√£ thua cu·ªôc",
//                             ];

//                             const wal = Data.Wallet;
//                             if (isNaN(value)) 
//                                 return await interaction.reply({ content: 'Ng∆∞·ªùi d√πng n√†y ƒë√£ g·ªçi c·∫£nh s√°t ƒë·∫øn b·∫Øt b·∫°n nh∆∞ng b·∫°n ƒë√£ b·ªè ch·∫°y. B·∫°n kh√¥ng m·∫•t hay ƒë·∫°t ƒë∆∞·ª£c g√¨ c·∫£', ephemeral: true });

//                             const negName = Math.floor(Math.random() * negativeChoices.length);

//                             let nonSymbol;
//                             if (value - wal < 0) {
//                                 const stringV = `${value}`;

//                                 nonSymbol = await stringV.slice(1);  // X√≥a d·∫•u √¢m t·ª´ gi√° tr·ªã s·ªë

//                                 // v√≠ √¢m ti·ªÅn
//                                 const los = new EmbedBuilder()
//                                     .setColor(client.config.embedGreen)
//                                     .setTitle(`${client.user.username} H·ªá th·ªëng kinh t·∫ø ${client.config.arrowDownEmoji}`)
//                                     .setAuthor({ name: `H·ªá th·ªëng kinh t·∫ø ${client.config.DevBy}`})
//                                     .addFields({ name: '> B·∫°n ƒë√£ c∆∞·ªõp v√†', value: `‚Ä¢ ${negativeChoices[negName]} ${nonSymbol.toLocaleString('vi-VN')} vnd`})  // Thay ƒë·ªïi s·ªë ti·ªÅn sang ƒë·ªãnh d·∫°ng vnd
//                                     .setFooter({ text: `Kinh t·∫ø m√°y ch·ªß ${guild.name}`, iconURL: guild.iconURL() })
//                                     .setThumbnail(client.user.avatarURL())
//                                     .setTimestamp();

//                                 Data.Bank += value;
//                                 await Data.save();

//                                 DataUser.Wallet -= value;
//                                 await DataUser.save();

//                                 return interaction.reply({ embeds: [los] });
//                             }

//                             const begLostEmbed = new EmbedBuilder()
//                                 .setColor(client.config.embedEconomy)
//                                 .setTitle(`${client.user.username} H·ªá th·ªëng kinh t·∫ø ${client.config.arrowDownEmoji}`)
//                                 .setAuthor({ name: `H·ªá th·ªëng kinh t·∫ø ${client.config.DevBy}`})
//                                 .addFields({ name: '> B·∫°n ƒë√£ c∆∞·ªõp v√†', value: `‚Ä¢ ${negativeChoices[negName]} ${value.toLocaleString('vi-VN')} vnd`})  // Thay ƒë·ªïi s·ªë ti·ªÅn sang ƒë·ªãnh d·∫°ng vnd
//                                 .setFooter({ text: `Kinh t·∫ø m√°y ch·ªß ${guild.name}`, iconURL: guild.iconURL() })
//                                 .setThumbnail(client.user.avatarURL())
//                                 .setTimestamp();

//                             await interaction.reply({ embeds: [begLostEmbed] });

//                             Data.Wallet += value;
//                             await Data.save();

//                             DataUser.Wallet -= value;
//                             await DataUser.save();
//                         }

//                         timeout.push(interaction.user.id);
//                         setTimeout(() => {
//                             timeout.shift();
//                         }, 60000);
//                     break;

//             }
//         } catch (error) {
//             console.error(`ƒê√£ x·∫£y ra l·ªói khi th·ª±c thi l·ªánh ${sub}:`, error);
//             await interaction.reply({ content: 'ƒê√£ x·∫£y ra l·ªói! Th·ª≠ l·∫°i sau', ephemeral: true });
//         }
//     }
// }



// B·ªé