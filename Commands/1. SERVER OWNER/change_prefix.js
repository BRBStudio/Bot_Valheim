const { SlashCommandBuilder } = require('discord.js'); 
const GuildPrefix = require('../../schemas/GuildPrefix');
const config = require('../../config');

module.exports = {
	data: new SlashCommandBuilder()
		.setName('change_prefix')
		.setDescription('üîπ Qu·∫£n l√Ω ti·ªÅn t·ªë c·ªßa bot trong m√°y ch·ªß')
		.addSubcommand(subcommand =>
			subcommand
				.setName('set')
				.setDescription('üîπ ƒê·∫∑t ti·ªÅn t·ªë m·ªõi')
				.addStringOption(option => 
					option.setName('prefix')
						.setDescription('Ti·ªÅn t·ªë m·ªõi cho bot')
						.setRequired(true)
				)
		)
		.addSubcommand(subcommand =>
			subcommand
				.setName('list')
				.setDescription('üîπ Xem ti·ªÅn t·ªë hi·ªán t·∫°i')
		)
		.addSubcommand(subcommand =>
			subcommand
				.setName('regime')
				.setDescription('üîπ B·∫≠t ho·∫∑c t·∫Øt l·ªánh ti·ªÅn t·ªë')
				.addStringOption(option => 
					option.setName('state')
						.setDescription('Ch·ªçn b·∫≠t ho·∫∑c t·∫Øt')
						.setRequired(true)
						.addChoices(
							{ name: 'B·∫≠t', value: 'on' },
							{ name: 'T·∫Øt', value: 'off' }
						)
				)
		),

	async execute(interaction) {
		const subcommand = interaction.options.getSubcommand();
		const guildId = interaction.guild.id;
		const guildName = interaction.guild.name;
		const userId = interaction.user.id;
		const member = interaction.guild.members.cache.get(userId);
		const isOwner = interaction.user.id === interaction.guild.ownerId;
		const isSpecialUser = config.specialUsers.includes(userId);

		

		if (subcommand === 'set') {

			if (!isOwner && !isSpecialUser) {
				return interaction.reply({
					content: 'üö´ B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y! Ch·ªâ ch·ªß s·ªü h·ªØu m√°y ch·ªß m·ªõi c√≥ quy·ªÅn.', // ho·∫∑c ng∆∞·ªùi ƒë·∫∑c bi·ªát
					ephemeral: true
				});
			}

			const newPrefix = interaction.options.getString('prefix');

			if (newPrefix === '/') {
				return interaction.reply({
					content: '‚ö†Ô∏è **L∆∞u √Ω:** Kh√¥ng n√™n ƒë·∫∑t ti·ªÅn t·ªë l√† `/` v√¨ n√≥ tr√πng v·ªõi l·ªánh slash!',
					ephemeral: true
				});
			}

			try {
				await GuildPrefix.findOneAndUpdate(
					{ guildId }, // serverName: guildName, userNickname: member.nickname || interaction.user.displayName
					{ prefix: newPrefix },
					{ upsert: true, new: true }
				);

				return interaction.reply(`‚úÖ Ti·ªÅn t·ªë m·ªõi cho **${guildName}** l√† **${newPrefix}**`);
			} catch (error) {
				console.error('L·ªói khi c·∫≠p nh·∫≠t ti·ªÅn t·ªë:', error);
				return interaction.reply('‚ùå ƒê√£ x·∫£y ra l·ªói khi c·∫≠p nh·∫≠t ti·ªÅn t·ªë.');
			}
		}

		if (subcommand === 'list') {
			try {
				const guildData = await GuildPrefix.findOne({ guildId });
				const currentPrefix = guildData ? guildData.prefix : '?';

				return interaction.reply(`üîç Ti·ªÅn t·ªë hi·ªán t·∫°i c·ªßa **${guildName}** l√† **${currentPrefix}**`);
			} catch (error) {
				console.error('L·ªói khi l·∫•y ti·ªÅn t·ªë:', error);
				return interaction.reply('‚ùå ƒê√£ x·∫£y ra l·ªói khi l·∫•y ti·ªÅn t·ªë hi·ªán t·∫°i.');
			}
		}

		if (subcommand === 'regime') {

			if (!isOwner && !isSpecialUser) {
				return interaction.reply({
					content: 'üö´ B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y! Ch·ªâ ch·ªß s·ªü h·ªØu m√°y ch·ªß m·ªõi c√≥ quy·ªÅn.', // ho·∫∑c ng∆∞·ªùi ƒë·∫∑c bi·ªát
					ephemeral: true
				});
			}

            const state = interaction.options.getString('state') === 'on';
        
            try {
                // L·∫•y d·ªØ li·ªáu hi·ªán t·∫°i c·ªßa m√°y ch·ªß tr∆∞·ªõc khi c·∫≠p nh·∫≠t
                let guildData = await GuildPrefix.findOne({ guildId });
        
                // C·∫≠p nh·∫≠t tr·∫°ng th√°i prefix
                guildData = await GuildPrefix.findOneAndUpdate(
                    { guildId },
                    { serverName: guildName, userNickname: interaction.user.displayName || member.nickname, isPrefixEnabled: state },
                    { upsert: true, new: true }
                );
        
                // L·∫•y prefix hi·ªán t·∫°i sau khi c·∫≠p nh·∫≠t
                const currentPrefix = guildData?.prefix || '?';
                const statusText = state ? '**B·∫¨T**' : '**T·∫ÆT**';
        
                return interaction.reply(`<a:cun1:1343938871892775003> Ch·∫ø ƒë·ªô l·ªánh \`${currentPrefix}\` ƒë√£ ƒë∆∞·ª£c ${statusText} trong m√°y ch·ªß.`);
            } catch (error) {
                // N·∫øu c√≥ l·ªói, ƒë·∫£m b·∫£o v·∫´n c√≥ gi√° tr·ªã cho currentPrefix
                const fallbackGuildData = await GuildPrefix.findOne({ guildId });
                const currentPrefix = fallbackGuildData?.prefix || '?';
        
                console.error('L·ªói khi thay ƒë·ªïi tr·∫°ng th√°i prefix:', error);
                return interaction.reply(`‚ùå ƒê√£ x·∫£y ra l·ªói khi thay ƒë·ªïi tr·∫°ng th√°i l·ªánh ${currentPrefix}.`);
            }
        }        
	}
};