const { SlashCommandBuilder, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require("discord.js");
const CommandStatus = require('../../schemas/Command_Status');

module.exports = {
  data: new SlashCommandBuilder()
    .setName('setviewtime')
    .setDescription(
        `üîπ ƒê·∫∑t th·ªùi gian xem tin nh·∫Øn tr∆∞·ªõc khi t·ª± ƒë·ªông c·∫≠p nh·∫≠t tr·∫°ng\n` +
        `¬†¬†¬†¬†¬†¬†¬†th√°i`
    )
    .addStringOption(option => 
        option.setName('mess')
            .setDescription('VƒÉn b·∫£n b·∫°n mu·ªën ƒë∆∞a v√†o tin nh·∫Øn')
            .setRequired(true)
      )
    .addNumberOption(option =>
        option.setName('option')
            .setDescription('ƒê·∫∑t gi·ªõi h·∫°n th·ªùi gian xem tin nh·∫Øn')
            .setRequired(true)
            .addChoices(
                { name: '5 ph√∫t', value: 5 },
                { name: '10 ph√∫t', value: 10 }, 
                { name: '15 ph√∫t', value: 15 }, 
                { name: '20 ph√∫t', value: 20 }, 
                { name: '25 ph√∫t', value: 25 },
                { name: '30 ph√∫t', value: 30 },
                { name: '1 ti·∫øng', value: 60 },
                { name: '2 ti·∫øng', value: 120 },
                { name: '3 ti·∫øng', value: 180 },
                { name: '4 ti·∫øng', value: 240 },
                { name: '5 ti·∫øng', value: 300 },
                { name: '1 ng√†y', value: 1440 },
        )
    )
    .addAttachmentOption(option => 
        option.setName('image')
            .setDescription('H√¨nh ·∫£nh b·∫°n mu·ªën ƒë∆∞a v√†o tin nh·∫Øn')
            .setRequired(true)
    ),

  async execute(interaction) {
    try {

        // Ki·ªÉm tra tr·∫°ng th√°i c·ªßa l·ªánh
        const commandStatus = await CommandStatus.findOne({ command: '/setviewtime' });

        // N·∫øu l·ªánh ƒëang t·∫Øt, g·ª≠i th√¥ng b√°o v√† kh√¥ng th·ª±c hi·ªán l·ªánh
        if (commandStatus && commandStatus.status === 'off') {
            return interaction.reply('L·ªánh n√†y ƒë√£ b·ªã t·∫Øt, vui l√≤ng th·ª≠ l·∫°i sau.');
        }

        // Ki·ªÉm tra xem ng∆∞·ªùi th·ª±c hi·ªán l·ªánh c√≥ ph·∫£i l√† ch·ªß s·ªü h·ªØu m√°y ch·ªß kh√¥ng
        if (interaction.user.id !== interaction.guild.ownerId) {
            return interaction.reply({ content: 'Ch·ªâ ch·ªß s·ªü h·ªØu m√°y ch·ªß m·ªõi c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.', ephemeral: true }); // Ph·∫£n h·ªìi n·∫øu ng∆∞·ªùi th·ª±c hi·ªán kh√¥ng ph·∫£i l√† ch·ªß s·ªü h·ªØu m√°y ch·ªß
        }

        const time = interaction.options.getNumber('option'); // L·∫•y gi√° tr·ªã c·ªßa tham s·ªë 'option'
        const desc = interaction.options.getString('mess') || '   '; // L·∫•y gi√° tr·ªã c·ªßa tham s·ªë 'text' ho·∫∑c ƒë·∫∑t gi√° tr·ªã m·∫∑c ƒë·ªãnh
        const file = interaction.options.getAttachment('image'); // L·∫•y gi√° tr·ªã c·ªßa tham s·ªë 'image'
        const fileURL = file.url; // L·∫•y URL c·ªßa t·ªáp ƒë√≠nh k√®m

        const Profile = new EmbedBuilder()
            .setDescription(`:stopwatch:‚îÉ***Tin nh·∫Øn n√†y ƒë∆∞·ª£c t√≠nh th·ªùi gian v√† m·ªôt l∆∞·ª£t xem (${time} ph√∫t)***`) // ƒê·∫∑t m√¥ t·∫£ c·ªßa embed
            .setColor('DarkBlue'); // ƒê·∫∑t m√†u c·ªßa embed

        const Outro = new EmbedBuilder()
            .setDescription(':stopwatch:‚îÉ***ƒê√£ xem tin nh·∫Øn***') // ƒê·∫∑t m√¥ t·∫£ c·ªßa embed
            .setColor('DarkRed'); // ƒê·∫∑t m√†u c·ªßa embed

        const Pesan = new EmbedBuilder()
            .setDescription(`${desc}`) // ƒê·∫∑t m√¥ t·∫£ c·ªßa embed
            .setImage(fileURL) // ƒê·∫∑t h√¨nh ·∫£nh c·ªßa embed
            .setColor('DarkRed'); // ƒê·∫∑t m√†u c·ªßa embed

        const enable = new ActionRowBuilder()
            .addComponents(
            new ButtonBuilder()
                .setCustomId(`Page1`) // ƒê·∫∑t ID t√πy ch·ªânh c·ªßa n√∫t
                .setLabel(`Xem tin nh·∫Øn`) // ƒê·∫∑t nh√£n c·ªßa n√∫t
                .setEmoji('üìÅ') // ƒê·∫∑t bi·ªÉu t∆∞·ª£ng c·ªßa n√∫t
                .setStyle(ButtonStyle.Secondary) // ƒê·∫∑t ki·ªÉu c·ªßa n√∫t
            );

        const disable = new ActionRowBuilder()
            .addComponents(
            new ButtonBuilder()
                .setCustomId(`Page2`) // ƒê·∫∑t ID t√πy ch·ªânh c·ªßa n√∫t
                .setLabel(`ƒê√£ xem tin nh·∫Øn`) // ƒê·∫∑t nh√£n c·ªßa n√∫t
                .setEmoji('üìÇ') // ƒê·∫∑t bi·ªÉu t∆∞·ª£ng c·ªßa n√∫t
                .setStyle(ButtonStyle.Secondary) // ƒê·∫∑t ki·ªÉu c·ªßa n√∫t
                .setDisabled(true) // V√¥ hi·ªáu h√≥a n√∫t
            );

        const m = await interaction.reply({ embeds: [Profile], components: [enable] }); // G·ª≠i tin nh·∫Øn ban ƒë·∫ßu v·ªõi embed 'Profile' v√† n√∫t 'enable'

        // Th√™m b·ªô ƒë·∫øm th·ªùi gian ƒë·ªÉ t·ª± ƒë·ªông chuy·ªÉn sang 'Outro' sau khi h·∫øt th·ªùi gian
        setTimeout(() => {
            m.edit({ embeds: [Outro], components: [disable] }).catch(console.error);
        }, time * 60000);


        const collector = m.createMessageComponentCollector(); // T·∫°o b·ªô thu th·∫≠p s·ª± ki·ªán cho c√°c n√∫t

        collector.on('collect', async m => {
            if (m.customId === 'Page1') {
            await m.update({ embeds: [Pesan], components: [disable] }); // C·∫≠p nh·∫≠t tin nh·∫Øn v·ªõi embed 'Pesan' v√† n√∫t 'disable'
            }
        });
        
        } catch (err) {
        console.log(err); // In l·ªói ra console n·∫øu c√≥
        }
    }
};