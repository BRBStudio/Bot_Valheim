const { SlashCommandBuilder } = require('discord.js');
const Mkvalheim = require('../../schemas/Mk_Valheimschema');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('mk')
        .setDescription(`üîπ C√†i ƒë·∫∑t m·∫≠t kh·∫©u Valheim.`)
        .addSubcommand(o => o
            .setName(`valheim`)
            .setDescription(`üîπ C√†i ƒë·∫∑t m·∫≠t kh·∫©u Valheim.`)
            .addStringOption(o =>
                o.setName('mk')
                    .setDescription(`ƒê·∫∑t m·∫≠t kh·∫©u b·∫°n mu·ªën`)
                    .setRequired(true)
            )
        )
        .addSubcommand(o => o
            .setName(`off`)
            .setDescription(`üîπ T·∫Øt m·∫≠t kh·∫©u Valheim.`)
        ),

    async execute(interaction, client) {

        const guildOwner = await interaction.guild.fetchOwner();

		if (interaction.user.id !== guildOwner.id) {
			return await interaction.reply({ content: `L·ªánh n√†y ch·ªâ d√†nh cho ch·ªß s·ªü h·ªØu.`, ephemeral: true });
		}

        const guildID = interaction.guild.id

        if (interaction.options.getSubcommand() === 'valheim') {
            const newPassword = interaction.options.getString('mk'); 

            // await Mkvalheim.findOneAndUpdate(
            //     { Guild: guildID }, // Ch·ªâ c·∫≠p nh·∫≠t cho Guild hi·ªán t·∫°i
            //     { password: newPassword },
            //     { upsert: true, new: true }
            // );            

            // Ki·ªÉm tra xem ƒë√£ c√≥ d·ªØ li·ªáu ch∆∞a
            let guildData = await Mkvalheim.findOne({ Guild: guildID });

            if (guildData) {
                // C·∫≠p nh·∫≠t gi√° tr·ªã password th·ªß c√¥ng
                guildData.password = newPassword;
                await guildData.save();
            } else {
                // T·∫°o m·ªõi n·∫øu ch∆∞a c√≥
                guildData = new Mkvalheim({
                    Guild: guildID,
                    password: newPassword
                });
                await guildData.save();
            }

            await interaction.reply({ content: `üîí M·∫≠t kh·∫©u m·ªõi ƒë√£ ƒë∆∞·ª£c l∆∞u: \`${newPassword}\`\nƒê·ªÉ l·∫•y m·∫≠t kh·∫©u d√πng \`\`\`!mk\`\`\` `, ephemeral: true });
        }

        if (interaction.options.getSubcommand() === 'off') {
            await Mkvalheim.deleteMany({});
            await interaction.reply({ content: `üö´ M·∫≠t kh·∫©u Valheim ƒë√£ b·ªã t·∫Øt v√† x√≥a kh·ªèi h·ªá th·ªëng.`, ephemeral: true });
        }
    }
};
