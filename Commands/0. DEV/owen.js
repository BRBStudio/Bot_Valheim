const { SlashCommandBuilder, EmbedBuilder, PermissionsBitField } = require("discord.js");
const checkPermissions = require('../../Handlers/CheckPermissionSpecial');
const { BRB } = require(`../../Embeds/embedsDEV`)

module.exports = {
    data: new SlashCommandBuilder()
        .setName("owen")
        .setDescription("üîπ Xem ch·ªß s·ªü h·ªØu m√°y ch·ªß l√† ai")
        .addStringOption(o => o
            .setName(`id`)
            .setDescription(`ID m√°y ch·ªß mu·ªën ki·ªÉm tra`)
        ),
    async execute(interaction, client) {

        // Ki·ªÉm tra quy·ªÅn c·ªßa ng∆∞·ªùi d√πng
        if (!checkPermissions(interaction)) {
            await interaction.deferReply({ ephemeral: true });
            await interaction.deleteReply();
            return await interaction.channel.send({ embeds: [BRB], ephemeral: true });
        }

        // L·∫•y id m√°y ch·ªß t·ª´ t√πy ch·ªçn ho·∫∑c s·ª≠ d·ª•ng id m√°y ch·ªß hi·ªán t·∫°i
        const guildId = interaction.options.getString('id') || interaction.guild.id;
        const guild = client.guilds.cache.get(guildId) //|| await client.guilds.fetch(guildId);

        // N·∫øu m√°y ch·ªß kh√¥ng t·ªìn t·∫°i
        if (!guild) {
            return interaction.reply({ content: `Kh√¥ng t√¨m th·∫•y m√°y ch·ªß v·ªõi ID ${guildId}`, ephemeral: true });
        }

        // L·∫•y th√¥ng tin ch·ªß s·ªü h·ªØu m√°y ch·ªß
        const owner = await guild.fetchOwner();

        // L·∫•y c·∫•p ƒë·ªô x√°c minh c·ªßa m√°y ch·ªß
        let baseVerification = guild.verificationLevel;

        ////////////////////////// C·∫•p ƒë·ªô x√°c minh
        if (baseVerification == 0) baseVerification = "Kh√¥ng c√≥";
        if (baseVerification == 1) baseVerification = "Th·∫•p";
        if (baseVerification == 2) baseVerification = "Trung b√¨nh";
        if (baseVerification == 3) baseVerification = "Cao";
        if (baseVerification == 4) baseVerification = "R·∫•t cao";

        // L·∫•y s·ªë l∆∞·ª£ng boost c·ªßa m√°y ch·ªß
        const boostCount = guild.premiumSubscriptionCount || 0;

        // L·∫•y danh s√°ch vai tr√≤
        const rolelist = guild.roles.cache.toJSON(); // guild.roles.cache.toJSON(); + guild.roles.cache.toJSON().join(' ') || "Kh√¥ng c√≥ vai tr√≤";

        // Chuy·ªÉn ƒë·ªïi danh s√°ch vai tr√≤ th√†nh m·∫£ng v√† chia th√†nh 3 c·ªôt
        const rolesArray = rolelist.map(role => role.name); // T·∫°o m·∫£ng t√™n vai tr√≤
        const columnSize = 25; // S·ªë vai tr√≤ t·ªëi ƒëa tr√™n m·ªói c·ªôt
        const columns = [];

        // Chia m·∫£ng vai tr√≤ th√†nh c√°c c·ªôt
        for (let i = 0; i < rolesArray.length; i += columnSize) {
            columns.push(rolesArray.slice(i, i + columnSize).join('\n')); // M·ªói c·ªôt s·∫Ω ch·ª©a t·ªëi ƒëa 15 vai tr√≤
        }

        // N·∫øu danh s√°ch vai tr√≤ tr·ªëng
        if (columns.length === 0) {
            columns.push("Kh√¥ng c√≥ vai tr√≤");
        }

        const splitPascal = (string, separator) => string.split(/(?=[A-Z])/).join(separator);

        const toPascalCase = (string, separator = false) => {
        const pascal = string.charAt(0).toUpperCase() + string.slice(1).toLowerCase().replace(/[^a-zA-Z0-9]+(.)/g, (match, chr) => chr.toUpperCase());
          return separator ? splitPascal(pascal, separator) : pascal;
        };

        // √Ånh x·∫° c√°c t√≠nh nƒÉng sang ti·∫øng Vi·ªát
        const featureTranslations = {
            "ANIMATED_BANNER": "Bi·ªÉu ng·ªØ ho·∫°t h√¨nh",
            "BANNER": "Bi·ªÉu ng·ªØ",
            "COMMERCE": "Th∆∞∆°ng m·∫°i",
            "COMMUNITY": "C·ªông ƒë·ªìng",
            "CHANNEL_ICON_EMOJIS_GENERATED": "Bi·ªÉu t∆∞·ª£ng k√™nh v·ªõi bi·ªÉu t∆∞·ª£ng c·∫£m x√∫c ƒë∆∞·ª£c t·∫°o ra",
            "DISCOVERABLE": "C√≥ th·ªÉ kh√°m ph√°",
            "FEATURABLE": "C√≥ th·ªÉ n·ªïi b·∫≠t",
            "GUESTS_ENABLED": "Kh√°ch m·ªùi ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t",
            "INVITE_SPLASH": "M√†n h√¨nh m·ªùi",
            "NEWS": "Tin t·ª©c",
            "PARTNERED": "ƒê·ªëi t√°c",
            "PUBLIC": "C√¥ng khai",
            "RELAY": "ƒê∆∞·ªùng d·∫´n",
            "SEASONAL": "Theo m√πa",
            "SOUNDBOARD": "B·∫£ng √¢m thanh",
            "VANITY_URL": "URL t·ª± ch·ªçn",
            "VERIFIED": "ƒê√£ x√°c minh",
            "VIP_REGIONS": "Khu v·ª±c VIP",
            "GUILD_ONBOARDING": "Gi·ªõi thi·ªáu bang h·ªôi",
            "GUILD_ONBOARDING_HAS_PROMPTS": "Vi·ªác gi·ªõi thi·ªáu bang h·ªôi c√≥ l·ªùi nh·∫Øc",
            "GUILD_ONBOARDING_EVER_ENABLED": "T√≠nh nƒÉng gi·ªõi thi·ªáu bang h·ªôi ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t",
            "GUILD_SERVER_GUIDE": "H∆∞·ªõng d·∫´n m√°y ch·ªß bang h·ªôi",
            "AUTO_MODERATION": "T·ª± ƒë·ªông ki·ªÉm duy·ªát" // ƒê·∫£m b·∫£o kh√¥ng b·ªã l·∫∑p l·∫°i
            // Th√™m c√°c t√≠nh nƒÉng kh√°c n·∫øu c·∫ßn
        };

        // T√≠nh nƒÉng c·ªßa m√°y ch·ªß
        const features = guild.features?.map(feature => `\n- ${featureTranslations[feature] || toPascalCase(feature, " ")}`)?.join("\n") || "Kh√¥ng c√≥";

        // T·∫°o embed v·ªõi th√¥ng tin ch·ªß s·ªü h·ªØu
        const e = new EmbedBuilder()
            .setTitle(`TH√îNG TIN CH·ª¶ S·ªû H·ªÆU M√ÅY CH·ª¶: ${guild.name}`)
            .setDescription(
                `**ID CH·ª¶ S·ªû H·ªÆU M√ÅY CH·ª¶:** ${owner.id}\n` +
                `**T√äN CH·ª¶ S·ªû H·ªÆU M√ÅY CH·ª¶:** ${owner.displayName}\n` +
                `**C·∫§P ƒê·ªò X√ÅC MINH C·ª¶A M√ÅY CH·ª¶:** ${baseVerification}\n` +
                `**S·ªê L∆Ø·ª¢NG BOOSTS:** ${boostCount}\n` +
                `**T√çNH NƒÇNG C·ª¶A M√ÅY CH·ª¶:** ${features}`
            )
            .addFields(
                { name: 'Danh s√°ch vai tr√≤ (C·ªôt 1)', value: columns[0] || "Kh√¥ng c√≥", inline: true },
                { name: 'Danh s√°ch vai tr√≤ (C·ªôt 2)', value: columns[1] || "Kh√¥ng c√≥", inline: true },
                { name: 'Danh s√°ch vai tr√≤ (C·ªôt 3)', value: columns[2] || "Kh√¥ng c√≥", inline: true },
            )
            .setColor(`Green`)

        // G·ª≠i embed
        await interaction.reply({ embeds: [e], ephemeral: true });
    },
};














// const { SlashCommandBuilder, EmbedBuilder, PermissionsBitField } = require("discord.js");
// const { checkOwner } = require(`../../permissionCheck`);

// module.exports = {
//     data: new SlashCommandBuilder()
//         .setName("owen")
//         .setDescription("Xem ch·ªß s·ªü h·ªØu m√°y ch·ªß l√† ai")
//         .addStringOption(op => op
//             .setName(`id`)
//             .setDescription(`ID m√°y ch·ªß mu·ªën ki·ªÉm tra`)
//         ),
//     async execute(interaction, client) {

//         // Ki·ªÉm tra quy·ªÅn c·ªßa ng∆∞·ªùi d√πng
//         const hasPermission = await checkOwner(interaction);
//         if (!hasPermission) return;

//         // L·∫•y id m√°y ch·ªß t·ª´ t√πy ch·ªçn ho·∫∑c s·ª≠ d·ª•ng id m√°y ch·ªß hi·ªán t·∫°i
//         const guildId = interaction.options.getString('id') || interaction.guild.id;
//         const guild = client.guilds.cache.get(guildId) || await client.guilds.fetch(guildId);

//         // N·∫øu m√°y ch·ªß kh√¥ng t·ªìn t·∫°i
//         if (!guild) {
//             return interaction.reply({ content: `Kh√¥ng t√¨m th·∫•y m√°y ch·ªß v·ªõi ID ${guildId}`, ephemeral: true });
//         }

//         // L·∫•y th√¥ng tin ch·ªß s·ªü h·ªØu m√°y ch·ªß
//         const owner = await guild.fetchOwner();

//         // L·∫•y c·∫•p ƒë·ªô x√°c minh c·ªßa m√°y ch·ªß
//         let baseVerification = guild.verificationLevel;

//         ////////////////////////// C·∫•p ƒë·ªô x√°c minh
//         if (baseVerification == 0) baseVerification = "Kh√¥ng c√≥";
//         if (baseVerification == 1) baseVerification = "Th·∫•p";
//         if (baseVerification == 2) baseVerification = "Trung b√¨nh";
//         if (baseVerification == 3) baseVerification = "Cao";
//         if (baseVerification == 4) baseVerification = "R·∫•t cao";

//         // L·∫•y s·ªë l∆∞·ª£ng boost c·ªßa m√°y ch·ªß
//         const boostCount = guild.premiumSubscriptionCount || 0;

//         // L·∫•y danh s√°ch vai tr√≤
//         const rolelist = guild.roles.cache.toJSON().join(' ') || "Kh√¥ng c√≥ vai tr√≤";

//         // Chuy·ªÉn ƒë·ªïi danh s√°ch vai tr√≤ th√†nh m·∫£ng v√† chia th√†nh 3 c·ªôt
//         const rolesArray = rolelist.split(' '); // T√°ch chu·ªói vai tr√≤ th√†nh m·∫£ng
//         const columnSize = 25;
//         const columns = [];

//         // Chia m·∫£ng vai tr√≤ th√†nh c√°c c·ªôt (m·ªói c·ªôt ch·ª©a 15 vai tr√≤)
//         for (let i = 0; i < rolesArray.length; i += columnSize) {
//             columns.push(rolesArray.slice(i, i + columnSize).join('\n')); // M·ªói c·ªôt s·∫Ω ch·ª©a 15 vai tr√≤, ngƒÉn c√°ch b·ªüi d·∫•u xu·ªëng d√≤ng
//         }

//         // N·∫øu danh s√°ch vai tr√≤ tr·ªëng
//         if (columns.length === 0) {
//             columns.push("Kh√¥ng c√≥ vai tr√≤");
//         }

//         // T·∫°o embed v·ªõi th√¥ng tin ch·ªß s·ªü h·ªØu
//         const e = new EmbedBuilder()
//             .setTitle(`TH√îNG TIN CH·ª¶ S·ªû H·ªÆU M√ÅY CH·ª¶: ${guild.name}`)
//             .setDescription(
//                 `**ID CH·ª¶ S·ªû H·ªÆU M√ÅY CH·ª¶:** ${owner.id}\n` +
//                 `**T√äN CH·ª¶ S·ªû H·ªÆU M√ÅY CH·ª¶:** ${owner.displayName}\n` +
//                 `**C·∫§P ƒê·ªò X√ÅC MINH C·ª¶A M√ÅY CH·ª¶:** ${baseVerification}\n` +
//                 `**S·ªê L∆Ø·ª¢NG BOOSTS:** ${boostCount}\n`
//             )
//             .addFields(
//                 { name: 'Danh s√°ch vai tr√≤ (C·ªôt 1)', value: columns[0] || "Kh√¥ng c√≥", inline: true },
//                 { name: 'Danh s√°ch vai tr√≤ (C·ªôt 2)', value: columns[1] || "Kh√¥ng c√≥", inline: true },
//                 { name: 'Danh s√°ch vai tr√≤ (C·ªôt 3)', value: columns[2] || "Kh√¥ng c√≥", inline: true },
//             )
//             .setColor(`Green`);

//         // G·ª≠i embed
//         await interaction.reply({ embeds: [e], ephemeral: true });

//     },
// };