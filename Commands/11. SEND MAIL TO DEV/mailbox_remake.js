const { SlashCommandBuilder } = require('discord.js');
const CommandStatus = require('../../schemas/Command_Status');
const Mailbox = require('../../schemas/mailboxSchema');
const { mailboxButtons, mailboxAdminButtons } = require('../../ButtonPlace/ActionRowBuilder');
const { mailboxUserEmbed, mailboxAdminEmbed } = require('../../Embeds/embedsCreate');

const options = {
    bug: {
        name: 'B√°o c√°o l·ªói',
        replyMessage: 'C·∫£m ∆°n b·∫°n ƒë√£ g·ª≠i b√°o c√°o l·ªói! Ch√∫ng t√¥i s·∫Ω xem x√©t v√† x·ª≠ l√Ω ngay.',
        previewMessage: 'D∆∞·ªõi ƒë√¢y l√† xem tr∆∞·ªõc ph·∫£n h·ªìi c·ªßa b·∫°n cho B√°o c√°o l·ªói:',
    },
    suggestion: {
        name: 'B√°o c√°o ƒë·ªÅ xu·∫•t',
        replyMessage: 'C·∫£m ∆°n b·∫°n ƒë√£ g·ª≠i ƒë·ªÅ xu·∫•t! Ch√∫ng t√¥i s·∫Ω xem x√©t v√† x·ª≠ l√Ω nhanh ch√≥ng.',
        previewMessage: 'D∆∞·ªõi ƒë√¢y l√† xem tr∆∞·ªõc ph·∫£n h·ªìi c·ªßa b·∫°n cho B√°o c√°o ƒë·ªÅ xu·∫•t:',
    },
    review: {
        name: 'ƒê√°nh gi√° ph·∫£n h·ªìi',
        replyMessage: 'C·∫£m ∆°n b·∫°n ƒë√£ g·ª≠i ƒë√°nh gi√°! Ch√∫ng t√¥i t√¥n tr·ªçng quy·∫øt ƒë·ªãnh c·ªßa b·∫°n.',
        previewMessage: 'D∆∞·ªõi ƒë√¢y l√† xem tr∆∞·ªõc ph·∫£n h·ªìi c·ªßa b·∫°n cho ƒê√°nh gi√°:',
    },
    other: {
        name: 'B√°o c√°o kh√°c',
        replyMessage: 'C·∫£m ∆°n b·∫°n ƒë√£ g·ª≠i b√°o c√°o! Ch√∫ng t√¥i s·∫Ω c√¢n nh·∫Øc v·ªÅ ƒëi·ªÅu ƒë√≥.',
        previewMessage: 'D∆∞·ªõi ƒë√¢y l√† xem tr∆∞·ªõc ph·∫£n h·ªìi c·ªßa b·∫°n cho B√°o c√°o kh√°c:',
    },
};

module.exports = {
    data: new SlashCommandBuilder()
        .setName('mailbox')
        .setDescription('üîπ H√≤m th∆∞ c·ªßa DEV')
        .addStringOption(option =>
            option.setName('option')
                .setDescription('Ch·ªçn danh m·ª•c ph·∫£n h·ªìi')
                .setRequired(true)
                .addChoices(
                    { name: options.bug.name, value: 'bug' },
                    { name: options.suggestion.name, value: 'suggestion' },
                    { name: options.review.name, value: 'review' },
                    { name: options.other.name, value: 'other' },
                ),
        )
        .addStringOption(option =>
            option.setName('feedback')
                .setDescription('Th√¥ng tin ph·∫£n h·ªìi c·ªßa b·∫°n')
                .setRequired(true),
        )
        .addStringOption(option =>
            option.setName('vote')
                .setDescription('ƒê√°nh gi√° Bot c·ªßa ch√∫ng t√¥i theo s·ªë sao')
                .setRequired(false)
                .addChoices(
                    { name: '‚≠ê', value: '‚≠ê' },
                    { name: '‚≠ê‚≠ê', value: '‚≠ê‚≠ê' },
                    { name: '‚≠ê‚≠ê‚≠ê', value: '‚≠ê‚≠ê‚≠ê' },
                    { name: '‚≠ê‚≠ê‚≠ê‚≠ê', value: '‚≠ê‚≠ê‚≠ê‚≠ê' },
                    { name: '‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê', value: '‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê' },
                ),
        ),

    async execute(interaction, client) {
        const commandStatus = await CommandStatus.findOne({ command: '/mailbox' });

        if (commandStatus && commandStatus.status === 'off') {
            return interaction.reply('L·ªánh n√†y ƒë√£ b·ªã t·∫Øt, vui l√≤ng th·ª≠ l·∫°i sau.');
        }

        const user = interaction.user;
        const option = interaction.options.get('option').value;
        const feedback = interaction.options.get('feedback').value;
        const vote = option === 'review' ? interaction.options.get('vote')?.value : null;

        const feedbackEmbed = mailboxUserEmbed(feedback, options[option].name, vote);
        const previewMessage = await interaction.reply({
            content: options[option].previewMessage,
            embeds: [feedbackEmbed],
            components: [mailboxButtons],
            ephemeral: true,
        });

        const filter = i => i.customId === 'sendButton' || i.customId === 'cancelButton';
        const collector = interaction.channel.createMessageComponentCollector({ filter, time: 120000 });

        let sendButtonClicked = false;
        let cancelButtonClicked = false;

        collector.on('collect', async i => {
            if (i.customId === 'sendButton' && !sendButtonClicked) {
                const newMailboxEntry = new Mailbox({
                    userId: user.id,
                    userName: user.username,
                    guildId: interaction.guild.id,
                    option: options[option].name,
                    feedback,
                });

                await newMailboxEntry.save();

                const guild = client.guilds.cache.get('1028540923249958912');
                const channel = guild.channels.cache.get('1148874551514632192');
                const adminEmbed = mailboxAdminEmbed(feedback, options[option].name, user.username, interaction.guild.name, vote);

                channel.send({ embeds: [adminEmbed], components: [mailboxAdminButtons] });
                interaction.followUp({ content: options[option].replyMessage, ephemeral: true });
                await previewMessage.delete();
                collector.stop();
            } else if (i.customId === 'cancelButton' && !cancelButtonClicked) {
                interaction.followUp({ content: 'B·∫°n ƒë√£ hu·ª∑ vi·ªác g·ª≠i ph·∫£n h·ªìi.', ephemeral: true });
                await previewMessage.delete();
                collector.stop();
            }
        });

        collector.on('end', collected => {
            if (collected.size === 0) {
                // N·∫øu kh√¥ng c√≥ s·ª± ki·ªán n√†o ƒë∆∞·ª£c thu th·∫≠p, th√¥ng b√°o v·ªÅ vi·ªác h·∫øt th·ªùi gian
                interaction.followUp({ content: `B·∫°n ƒë√£ kh√¥ng th·ª±c hi·ªán h√†nh ƒë·ªông n√†o tong 2 ph√∫t, v√¨ v·∫≠y s·∫Ω kh√¥ng t∆∞∆°ng t√°c ƒë∆∞·ª£c v·ªõi n√∫t n·ªØa.`, ephemeral: true });
            }
        });
    },
};
