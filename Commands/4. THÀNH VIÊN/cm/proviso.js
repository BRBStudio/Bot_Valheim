const { SlashCommandSubcommandBuilder, ButtonBuilder, ButtonStyle, ActionRowBuilder, EmbedBuilder } = require("discord.js");
const UserAgreement = require('../../../schemas/userAgreementSchema');
// const Blacklist = require('../../schemas/blacklistSchema');
const Blacklist_dev = require('../../../schemas/blacklist_devSchema');
const interactionError = require('../../../Events/WebhookError/interactionError');
const config = require(`../../../config`)
const CommandStatus = require('../../../schemas/Command_Status');

module.exports = {
    data: new SlashCommandSubcommandBuilder()
        .setName("proviso")
        .setDescription("üîπ Kh·ªüi ƒë·ªông l·∫°i ƒëi·ªÅu kho·∫£n d·ªãch v·ª•"),

    async execute(interaction) {

        try {    

            // Ki·ªÉm tra tr·∫°ng th√°i c·ªßa l·ªánh
            const commandStatus = await CommandStatus.findOne({ command: '/proviso_bot' });

            // N·∫øu l·ªánh ƒëang t·∫Øt, g·ª≠i th√¥ng b√°o v√† kh√¥ng th·ª±c hi·ªán l·ªánh
            if (commandStatus && commandStatus.status === 'off') {
                return interaction.reply('L·ªánh n√†y ƒë√£ b·ªã t·∫Øt, vui l√≤ng th·ª≠ l·∫°i sau.');
            }

            const userId = interaction.user.id;
            const displayName = interaction.member.displayName; // L·∫•y bi·ªát danh ng∆∞·ªùi d√πng
            const guildId = interaction.guild.id; // L·∫•y ID m√°y ch·ªß
            const guildName = interaction.guild.name; // L·∫•y t√™n m√°y ch·ªß

            const termsEmbed = new EmbedBuilder()
                .setColor(config.embedCyan)
                .setTitle('ƒêi·ªÅu kho·∫£n v√† ƒëi·ªÅu ki·ªán')
                .setDescription(
                        `**1. ƒêƒÉng K√Ω V√† S·ª≠ D·ª•ng L·ªánh**\n` +

                        `- Ng∆∞·ªùi d√πng b·∫Øt bu·ªôc ph·∫£i ƒëƒÉng k√Ω m·ªôt t√†i kho·∫£n h·ª£p l·ªá ƒë·ªÉ c√≥ th·ªÉ s·ª≠ d·ª•ng c√°c l·ªánh c·ªßa bot. M·ªói ng∆∞·ªùi ch·ªâ ƒë∆∞·ª£c ph√©p s·ªü h·ªØu m·ªôt t√†i kho·∫£n duy nh·∫•t.\n` +
                        `- Vi·ªác s·ª≠ d·ª•ng bot ph·∫£i tu√¢n th·ªß ƒë√∫ng c√°c quy ƒë·ªãnh ƒë∆∞·ª£c ƒë·∫∑t ra. Nghi√™m c·∫•m c√°c h√†nh vi gian l·∫≠n, l·ª´a ƒë·∫£o ho·∫∑c g√¢y thi·ªát h·∫°i cho ng∆∞·ªùi d√πng kh√°c.\n\n` +

                        `**2. Tuy·ªÉn D·ª•ng V√† Khi·∫øu N·∫°i**\n` +

                        `- H·ªá th·ªëng tuy·ªÉn d·ª•ng c√≥ th·ªÉ s·∫Ω c·∫≠p nh·∫≠t ho·∫∑c h·ªßy b·ªè b·∫•t k·ª≥ l√∫c n√†o trong t∆∞∆°ng lai m√† kh√¥ng c·∫ßn th√¥ng b√°o tr∆∞·ªõc.quy·∫øt ƒë·ªãnh c·ªßa ch√∫ng t√¥i l√† quy·∫øt ƒë·ªãnh cu·ªëi c√πng.` +
                        `- Vi·ªác khi·∫øu n·∫°i, t·ª©c l√† d√πng l·ªánh \`/feedback\` sec ƒë∆∞·ª£c ch√∫ng t√¥i xem x√©t kƒ© l∆∞·ª°ng v√† g·ª≠i th√¥ng b√°o t·ªõi b·∫°n. h√£y ch√∫ √Ω t·ªõi nh·∫Øn c·ªßa b·∫°n.` +
                        ` L∆∞u √Ω: khi·∫øu n·∫°i c√° nh√¢n ch√∫ng t√¥i s·∫Ω kh√¥ng gi·∫£i quy·∫øt, ch√∫ng t√¥i ch·ªâ h·ªó tr·ª£ ph·∫£n h·ªìi v·ªÅ bot.` +
                        `- ƒê·ª´ng ƒë√°nh l·ª´a c√°c nh√≥m h·ªó tr·ª£ c·ªßa Discord. Kh√¥ng g·ª≠i b√°o c√°o sai l·ªách ho·∫∑c ƒë·ªôc h·∫°i cho b·ªô ph·∫≠n Ph·∫£n h·ªìi ph√°p l√Ω c·ªßa ch√∫ng t√¥i ho·∫∑c c√°c nh√≥m h·ªó tr·ª£` +
                        ` kh√°ch h√†ng kh√°c, g·ª≠i nhi·ªÅu b√°o c√°o v·ªÅ c√πng m·ªôt v·∫•n ƒë·ªÅ ho·∫∑c y√™u c·∫ßu m·ªôt nh√≥m ng∆∞·ªùi d√πng b√°o c√°o c√πng m·ªôt n·ªôi dung ho·∫∑c v·∫•n ƒë·ªÅ. Vi·ªác vi ph·∫°m nguy√™n` +
                        ` t·∫Øc n√†y nhi·ªÅu l·∫ßn c√≥ th·ªÉ d·∫´n ƒë·∫øn c·∫£nh b√°o t√†i kho·∫£n ho·∫∑c c√°c h√¨nh ph·∫°t kh√°c.\n\n` +

                        `**3. Ch√≠nh S√°ch D√πng L·ªánh**\n` +

                        `- B·∫°n c·∫ßn ƒë·ªìng √Ω v·ªõi ƒëi·ªÅu kho·∫£n d·ªãch v·ª• ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh c·ªßa bot.\n` +
                        `- M·ªçi l·ªánh ƒë√£ ƒë∆∞·ª£c ph√¢n chia r√µ r√†ng t·ª´ng m·ª•c ƒë·ªÉ b·∫°n hi·ªÉu r√µ.\n\n` +
                        `- Kh√¥ng cho ph√©p ·ª®ng D·ª•ng c·ªßa b·∫°n b·ªè qua ho·∫∑c ph√° v·ª° c√°c t√≠nh nƒÉng ri√™ng t∆∞, an to√†n v√†/ho·∫∑c b·∫£o m·∫≠t c·ªßa Discord` +
                        `- Kh√¥ng thu th·∫≠p, g·∫° g·∫´m ho·∫∑c l·ª´a d·ªëi ng∆∞·ªùi d√πng cung c·∫•p m·∫≠t kh·∫©u ho·∫∑c c√°c th√¥ng tin ƒëƒÉng nh·∫≠p kh√°c. Trong m·ªçi tr∆∞·ªùng h·ª£p, b·∫°n d√πng Bot c·ªßa` +
                        ` ch√∫ng t√¥i y√™u c·∫ßu ho·∫∑c c·ªë g·∫Øng l·∫•y th√¥ng tin ƒëƒÉng nh·∫≠p t·ª´ ng∆∞·ªùi d√πng Discord. Nh·ªØng th√¥ng tin n√†y bao g·ªìm nh·ªØng th√¥ng tin nh·∫≠y c·∫£m nh∆∞ m·∫≠t kh·∫©u` +
                        ` ho·∫∑c quy·ªÅn truy c·∫≠p t√†i kho·∫£n ho·∫∑c m√£ th√¥ng b√°o ƒëƒÉng nh·∫≠p th√¨ s·∫Ω ch√∫ng t√¥i s·∫Ω x·ª≠ l√Ω m√† kh√¥ng th√¥ng b√°o.\n\n` +

                        `**4. Ch√≠nh S√°ch B·∫£o M·∫≠t**\n` +

                        `- Th√¥ng tin c√° nh√¢n c·ªßa ng∆∞·ªùi d√πng s·∫Ω ƒë∆∞·ª£c b·∫£o m·∫≠t v√† ch·ªâ s·ª≠ d·ª•ng cho m·ª•c ƒë√≠ch cung c·∫•p d·ªãch v·ª• v√† c·∫£i thi·ªán tr·∫£i nghi·ªám ng∆∞·ªùi d√πng.\n` +
                        `- Ch√∫ng t√¥i cam k·∫øt b·∫£o v·ªá th√¥ng tin c·ªßa b·∫°n kh·ªèi c√°c h√†nh vi x√¢m ph·∫°m, nh∆∞ng kh√¥ng ch·ªãu tr√°ch nhi·ªám ƒë·ªëi v·ªõi c√°c s·ª± c·ªë kh√¥ng l∆∞·ªùng tr∆∞·ªõc do l·ªói` +
                        ` h·ªá th·ªëng ho·∫∑c t·∫•n c√¥ng m·∫°ng.\n\n` +

                        `**5. Quy·ªÅn v√† Nghƒ©a V·ª•**\n` +

                        `- Ch√∫ng t√¥i c√≥ quy·ªÅn thay ƒë·ªïi, c·∫≠p nh·∫≠t ho·∫∑c h·ªßy b·ªè b·∫•t k·ª≥ t√≠nh nƒÉng n√†o c·ªßa h·ªá th·ªëng m√† kh√¥ng c·∫ßn th√¥ng b√°o tr∆∞·ªõc.\n` +
                        `- Ng∆∞·ªùi d√πng c√≥ tr√°ch nhi·ªám tu√¢n th·ªß c√°c ƒëi·ªÅu kho·∫£n v√† ƒëi·ªÅu ki·ªán n√†y. B·∫•t k·ª≥ h√†nh vi vi ph·∫°m n√†o c≈©ng c√≥ th·ªÉ d·∫´n ƒë·∫øn vi·ªác t·∫°m ng∆∞ng` +
                        ` ho·∫∑c kh√≥a t√†i kho·∫£n vƒ©nh vi·ªÖn.\n\n` +

                        `**6. Gi·∫£i Quy·∫øt Tranh Ch·∫•p**\n` +

                        `M·ªçi tranh ch·∫•p ph√°t sinh li√™n quan ƒë·∫øn vi·ªác s·ª≠ d·ª•ng h·ªá th·ªëng s·∫Ω ƒë∆∞·ª£c gi·∫£i quy·∫øt theo ph√°p lu·∫≠t hi·ªán h√†nh v√†` +
                        ` quy·∫øt ƒë·ªãnh c·ªßa ch√∫ng t√¥i l√† quy·∫øt ƒë·ªãnh cu·ªëi c√πng.`
                    )
                .setFooter({ 
                    text:
                        `‚Äé                                                                                                                                                     \n` + 
                        `‚Äé                                                                                                                                 ¬© B·∫¢N QUY·ªÄN THU·ªòC V·ªÄ\n` +
                        `‚Äé                                                                                                                                       ¬π‚Åπ‚Å∏‚Å∏Valheim Survival¬π‚Åπ‚Å∏‚Å∏`
                    })

            const acceptButton = new ButtonBuilder()
                .setCustomId('accept_terms')
                .setLabel('Ch·∫•p Nh·∫≠n')
                .setStyle(ButtonStyle.Success);

            const row = new ActionRowBuilder().addComponents(acceptButton);

            // G·ª≠i l·∫°i tin nh·∫Øn ƒëi·ªÅu kho·∫£n d·ªãch v·ª•
            const termsMessage = await interaction.channel.send({
                embeds: [termsEmbed],
                components: [row]
            });

            // B·ªô l·ªçc ch·ªâ ki·ªÉm tra vi·ªác nh·∫•n n√∫t
            const filter = (i) => i.customId === "accept_terms";

            const collector = termsMessage.createMessageComponentCollector({
                filter,
                time: 3600000 // 1 ti·∫øng
            });

            // Khi b·∫•t k·ª≥ ai nh·∫•n n√∫t ch·∫•p nh·∫≠n ƒëi·ªÅu kho·∫£n
            collector.on('collect', async (i) => {
                await i.deferUpdate();
                const userId = i.user.id; // L·∫•y ID c·ªßa ng∆∞·ªùi nh·∫•n n√∫t
                const displayName = i.member.displayName; // C·∫≠p nh·∫≠t bi·ªát danh c·ªßa ng∆∞·ªùi nh·∫•n
                const guildId = i.guild.id; // C·∫≠p nh·∫≠t ID m√°y ch·ªß
                const guildName = i.guild.name; // C·∫≠p nh·∫≠t t√™n m√°y ch·ªß

                // Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ t·ªìn t·∫°i trong UserAgreement hay ch∆∞a
                const existingAgreement = await UserAgreement.findOne({ userId });
                if (!existingAgreement) {
                    const newAgreement = new UserAgreement({ 
                                                userId,
                                                displayName,
                                                guildId,
                                                guildName,
                                            });

                    await newAgreement.save();
                    await i.followUp({ content: `${i.user.displayName} ƒë√£ ƒë·ªìng √Ω v·ªõi ƒëi·ªÅu kho·∫£n d·ªãch v·ª•.`, ephemeral: true });
                } else {
                    await i.followUp({ content: `B·∫°n ƒë√£ ƒë·ªìng √Ω v·ªõi ƒëi·ªÅu kho·∫£n tr∆∞·ªõc ƒë√≥.`, ephemeral: true });
                }
            });

            // Khi h·∫øt th·ªùi gian m√† ng∆∞·ªùi d√πng ch∆∞a ch·∫•p nh·∫≠n
            collector.on('end', async (collected) => {
                if (collected.size === 0) {
                    // await termsMessage.edit({
                    //     embeds: [termsEmbed],
                    //     components: []
                    // });

                    // await termsMessage.delete().catch(console.error);

                    try {
                        await termsMessage.delete();
                    } catch (err) {
                        if (err.code !== 10008) console.error(err); // 10008 = Message already deleted
                    }

                    // Th√™m ng∆∞·ªùi d√πng ƒë√£ s·ª≠ d·ª•ng l·ªánh v√†o blacklist n·∫øu kh√¥ng ch·∫•p nh·∫≠n ƒëi·ªÅu kho·∫£n
                    // userName: displayName,
                    //         guildId,
                    //         guildName,
                    const newBlacklistEntry = new Blacklist_dev({
                        userId,
                        userName: displayName,
                        guildId,
                        guildName,
                        reason: 'Kh√¥ng ch·∫•p nh·∫≠n ƒëi·ªÅu kho·∫£n d·ªãch v·ª•'
                    });
                    await newBlacklistEntry.save();

                    await interaction.channel.send(`${interaction.user.displayName} ƒë√£ kh√¥ng ch·∫•p nh·∫≠n ƒëi·ªÅu kho·∫£n trong th·ªùi gian quy ƒë·ªãnh.`);
                }

                // X√≥a ho√†n to√†n tin nh·∫Øn ƒëi·ªÅu kho·∫£n sau khi collector h·∫øt th·ªùi gian
                // await termsMessage.delete().catch(console.error);
                // Xo√° tin nh·∫Øn n·∫øu ch∆∞a xo√° ·ªü tr√™n
                try {
                    await termsMessage.delete();
                } catch (err) {
                    if (err.code !== 10008) console.error(err);
                }
            });

            await interaction.deferReply();
            await interaction.deleteReply();
        } catch (error) {
            interactionError.execute(interaction, error, client);
        }
    }
};
