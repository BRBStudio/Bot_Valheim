const { SlashCommandBuilder, PermissionsBitField, ModalBuilder, TextInputBuilder, TextInputStyle, ActionRowBuilder } = require("discord.js");
const CommandStatus = require('../../schemas/Command_Status');

module.exports = {
    data: new SlashCommandBuilder()
        .setName("report_user")
        .setDescription("üîπ T·ªë c√°o ng∆∞·ªùi d√πng t·ªõi DEV ")
        .addUserOption(options => options.setName('user').setDescription('Ng∆∞·ªùi d√πng b·∫°n mu·ªën t·ªë c√°o').setRequired(true)),

    async execute(interaction) {

        // Ki·ªÉm tra tr·∫°ng th√°i c·ªßa l·ªánh
        const commandStatus = await CommandStatus.findOne({ command: '/report_user' });

        // N·∫øu l·ªánh ƒëang t·∫Øt, g·ª≠i th√¥ng b√°o v√† kh√¥ng th·ª±c hi·ªán l·ªánh
        if (commandStatus && commandStatus.status === 'off') {
            return interaction.reply('L·ªánh n√†y ƒë√£ b·ªã t·∫Øt, vui l√≤ng th·ª≠ l·∫°i sau.');
        }

        let user = interaction.options.getMember("user");

        if (!user) {
            user = interaction.user;
        }

        let reportModal = new ModalBuilder()
            .setCustomId("report")
            .setTitle("T·ªë c√°o ng∆∞·ªùi d√πng");

        let reportInput = new TextInputBuilder()
            .setCustomId("report")
            .setLabel("L√Ω do t·ªë c√°o")
            .setPlaceholder("Nh·∫≠p l√Ω do b·∫°n mu·ªën t·ªë c√°o ng∆∞·ªùi d√πng n√†y...")
            .setStyle(TextInputStyle.Paragraph)
            .setRequired(true);

        let reportEmbed = new TextInputBuilder()
            .setCustomId('embed')
            .setLabel("B·∫≠t/t·∫Øt ch·∫ø ƒë·ªô nh√∫ng? d√πng on/off")
            .setPlaceholder("on/off")
            .setStyle(TextInputStyle.Short)
            .setRequired(false);

        // Th√™m TextInput ·∫©n ƒë·ªÉ l∆∞u tr·ªØ ID c·ªßa ng∆∞·ªùi d√πng ƒë∆∞·ª£c t·ªë c√°o
        let userIdInput = new TextInputBuilder()
            .setCustomId('userId')
            .setLabel("Khuy·∫øn ngh·ªã: kh√¥ng ch·ªânh s·ª≠a ph·∫ßn n√†y")
            .setValue(user.id) // Truy·ªÅn ID c·ªßa ng∆∞·ªùi d√πng v√†o ƒë√¢y
            .setStyle(TextInputStyle.Short)
            .setRequired(true);

        let report = new ActionRowBuilder().addComponents(reportInput);
        let reportEmb = new ActionRowBuilder().addComponents(reportEmbed);
        let userRow = new ActionRowBuilder().addComponents(userIdInput); // H√†ng ch·ª©a User ID ·∫©n

        reportModal.addComponents(report, reportEmb, userRow);

        await interaction.showModal(reportModal);
    }
};

