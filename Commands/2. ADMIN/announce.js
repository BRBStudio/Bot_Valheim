
const { SlashCommandBuilder, PermissionsBitField, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, ChannelType } = require("discord.js");
const tinycolor = require("tinycolor2");
const moment = require("moment-timezone");
const randomColor = require("randomcolor");
const { getPreferredLanguage } = require('../../languageUtils');
const translate = require('@iamtraction/google-translate');
const CommandStatus = require('../../schemas/Command_Status');

module.exports = {
    data: new SlashCommandBuilder()
        .setName("announce")
        .setDescription("üîπ G·ª≠i th√¥ng b√°o n√¢ng cao")
        .setDescriptionLocalization(`en-US`, 'üîπ Send advanced notifications')
        .setDefaultMemberPermissions(PermissionsBitField.Flags.ManageGuild)
        .addChannelOption((option) =>
            option
                .setName("channel")
                .setDescription("Ch·ªçn k√™nh ƒë·ªÉ th√¥ng b√°o") 
                .setDescriptionLocalization('en-US', 'Choose the channel to send the notification')
                .setRequired(true)
                .addChannelTypes(ChannelType.GuildText)
                
        )
        .addStringOption((option) =>
            option
                .setName("message")
                .setDescription("Tin nh·∫Øn th√¥ng b√°o, M·∫πo: c√≥ th·ªÉ d√πng \\n: ƒë·ªÉ xu·ªëng 1 d√≤ng, {s1}m·∫ßu xanh{/s1} v√† {s2}m·∫ßu ƒë·ªè{/s2}")
                .setDescriptionLocalization('en-US', 'Notification message, Tip: you can use \\n: to go down one line, {s1}green{/s1} and {s2}red{/s2}')
                .setRequired(true)
        )
        .addRoleOption(option=>
            option.setName("role")
                  .setDescription("Ch·ªçn vai tr√≤ b·∫°n mu·ªën g·ª≠i th√¥ng b√°o")
                  .setRequired(true)         
        )
        .addStringOption((option) =>
            option.setName("title")
                .setDescription("Ti√™u ƒë·ªÅ c·ªßa th√¥ng b√°o")
                .setDescriptionLocalization('en-US', 'Title of the notification')
        )
        .addStringOption((option) =>
            option.setName("color")
                .setDescription("Ch·ªçn M·∫ßu b·∫°n mu·ªën (ch·ªâ d√†nh cho tin nh·∫Øn nh√∫ng)")
                .setDescriptionLocalization('en-US', 'Select the Color you want (embedded messages only)')
                .addChoices(
                    { name: "M·∫ßu ng·∫´u nhi√™n", value: "Random" },
                    { name: "M·∫ßu ƒë·ªè", value: "Red" },
                    { name: "M·∫ßu xanh d∆∞∆°ng", value: "Blue" },
                    { name: "M·∫ßu xanh l√° c√¢y", value: "Green" },
                    { name: "M·∫ßu t√≠m", value: "Purple" },
                    { name: "M·∫ßu cam", value: "Orange" },
                    { name: "M·∫ßu v√†ng", value: "Yellow" },
                    { name: "M·∫ßu ƒëen", value: "Black" },
                    { name: "M·∫ßu xanh l∆° (r·∫•t ƒë·∫πp)", value: "Cyan" },
                    { name: "M·∫ßu h·ªìng", value: "Pink" },
                    { name: "M·∫ßu hoa o·∫£i h∆∞∆°ng", value: "Lavender" },
                    { name: "M·∫ßu s·∫´m (M·∫ßu ƒë·ªè s·∫´m, h∆°i t√≠m)", value: "Maroon" },
                    { name: "M·∫ßu √¥ liu", value: "Olive" },
                    { name: "M·∫ßu xanh lam (xanh n∆∞·ªõc bi·ªÉn)", value: "Teal" },
                    { name: "M·∫ßu b·∫°c", value: "Silver" },
                    { name: "M·∫ßu v√†ng ƒë·ªìng", value: "Gold" },
                    { name: "M·∫ßu be", value: "Beige" },
                    { name: "M·∫ßu h·∫£i qu√¢n (xanh d∆∞∆°ng ƒë·∫≠m)", value: "Navy" },
                    { name: "M·∫ßu t√≠m ƒë·∫≠m", value: "Indigo" },
                    { name: "M·∫ßu h·ªìng t√≠m", value: "Violet" },
        ))
        .addStringOption((option) =>
            option
                .setName("timestamp")
                .setDescription("ƒê·ªãnh d·∫°ng H·∫πn th·ªùi gian ƒë·ªÉ g·ª≠i th√¥ng b√°o (HH:mm DD/MM/YYYY)")
                .setDescriptionLocalization('en-US', 'Set time to schedule the notification (HH:mm DD/MM/YYYY)')
        ),

    async execute(interaction) {
        try {

            // Ki·ªÉm tra tr·∫°ng th√°i c·ªßa l·ªánh
            const commandStatus = await CommandStatus.findOne({ command: '/announce' });

            // N·∫øu l·ªánh ƒëang t·∫Øt, g·ª≠i th√¥ng b√°o v√† kh√¥ng th·ª±c hi·ªán l·ªánh
            if (commandStatus && commandStatus.status === 'off') {
                return interaction.reply('L·ªánh n√†y ƒë√£ b·ªã t·∫Øt, vui l√≤ng th·ª≠ l·∫°i sau.');
            }

            const channel = interaction.options.getChannel("channel");
            const messageText = interaction.options.getString("message");
            const title = interaction.options.getString("title") || "Th√¥ng b√°o";
            const color = interaction.options.getString("color") || "turquoise";
            const timestamp = interaction.options.getString("timestamp");
            const Role = interaction.options.getRole('role');

            // L·∫•y ng√¥n ng·ªØ ƒë√£ l∆∞u t·ª´ c∆° s·ªü d·ªØ li·ªáu
            const preferredLanguage = await getPreferredLanguage(interaction.guild.id, interaction.user.id);

            // D·ªãch t√™n l·ªánh, m√¥ t·∫£ v√† c√°c th√¥ng b√°o n·∫øu ng√¥n ng·ªØ l√† ti·∫øng Anh
            let translatedDescription = "üîî | G·ª≠i th√¥ng b√°o n√¢ng cao"; // M√¥ t·∫£ g·ªëc
            if (preferredLanguage === 'en') {
                const translationResult = await translate(translatedDescription, { to: 'en' });
                translatedDescription = translationResult.text;
            }

            // Ki·ªÉm tra n·∫øu ng√¥n ng·ªØ l√† ti·∫øng Anh th√¨ d·ªãch ti√™u ƒë·ªÅ
            let translatedTitle = title;
            if (preferredLanguage === 'en') {
                const translationResult = await translate(title, { to: 'en' });
                translatedTitle = translationResult.text; // L∆∞u ti√™u ƒë·ªÅ ƒë√£ d·ªãch
            }

            // D·ªãch n·ªôi dung th√¥ng b√°o n·∫øu ng√¥n ng·ªØ l√† ti·∫øng Anh
            let translatedMessage = messageText;
            if (preferredLanguage === 'en') {
                const translationResult = await translate(messageText, { to: 'en' });
                translatedMessage = translationResult.text; // L∆∞u n·ªôi dung ƒë√£ d·ªãch
            }

            // D·ªãch c√°c th√¥ng b√°o n·∫øu ng√¥n ng·ªØ l√† ti·∫øng Anh
            const messages = {
                insufficientPermissions: preferredLanguage === 'en' 
                ? `You do not have permission to reset xp level in server ${interaction.guild.name}.`
                : `\`\`\`yml\nB·∫°n kh√¥ng c√≥ quy·ªÅn ƒë·∫∑t l·∫°i c·∫•p ƒë·ªô xp trong m√°y ch·ªß ${interaction.guild.name}.\`\`\``,
                invalidColor: preferredLanguage === 'en'
                ? "The color you entered is not valid."
                : "M·∫ßu b·∫°n nh·∫≠p kh√¥ng h·ª£p l·ªá.",
                scheduleError: preferredLanguage === 'en'
                ? "The scheduled time must be a future time."
                : "Th·ªùi gian l√™n l·ªãch ph·∫£i l√† m·ªôt th·ªùi gian trong t∆∞∆°ng lai.",
                // B·∫°n c√≥ th·ªÉ th√™m nhi·ªÅu th√¥ng b√°o kh√°c ·ªü ƒë√¢y...
            };

            const perm = new EmbedBuilder()
                .setColor(`Blue`)
                .setDescription(messages.insufficientPermissions);

            if(!interaction.member.permissions.has(PermissionsBitField.Flags.Administrator)) return await interaction.reply({ embeds: [perm], ephemeral: true });

            let colorCode;

            if (color === "Random") {
                colorCode = randomColor();
            } else {
                colorCode = tinycolor(color);
            }

            if (color !== "Random" && !colorCode.isValid()) {
                return await interaction.reply({ content: messages.invalidColor, ephemeral: true });
            }

            const processMessage = (text) => {
                return text
                    .replace(/{s1}/g, '```diff\n+ ')
                    .replace(/{\/s1}/g, '\n```')
                    .replace(/{s2}/g, '```diff\n- ')
                    .replace(/{\/s2}/g, '\n```')
                    .replace(/{s3}/g, '‚úÖ ')
                    .replace(/{s4}/g, '‚ùå ')
                    .replace(/\\n/g, '\n'); // Th√™m d√≤ng n√†y ƒë·ªÉ thay th·∫ø k√Ω t·ª± \n b·∫±ng xu·ªëng d√≤ng th·ª±c s·ª±;
            };

            const embed = new EmbedBuilder()
                .setTitle(translatedTitle)
                .setDescription(processMessage(translatedMessage));

            if (color === "Random") {
                embed.setColor(colorCode);
            } else {
                embed.setColor(colorCode.toHexString());
            }

            if (timestamp) {
                const regex = /^(\d{2}):(\d{2}) (\d{2})\/(\d{2})\/(\d{4})$/;
                const match = timestamp.match(regex);

                if (!match) {
                    await interaction.reply({
                        content: preferredLanguage === 'en'
                            ? "Invalid timestamp format. Please use the format HH:mm DD/MM/YYYY\n\n***NOTE***:\nHH: hour\nmm: minute\nDD: day\nMM: month\nYYYY: year."
                            : "ƒê·ªãnh d·∫°ng d·∫•u th·ªùi gian kh√¥ng h·ª£p l·ªá. Vui l√≤ng s·ª≠ d·ª•ng ƒë·ªãnh d·∫°ng HH:mm DD/MM/YYYY\n\n***CH√ö TH√çCH***:\nHH: hi·ªÉn th·ªã gi·ªù\nmm: hi·ªÉn th·ªã ph√∫t\nDD: hi·ªÉn th·ªã ng√†y\nMM: hi·ªÉn th·ªã th√°ng\nYYYY: hi·ªÉn th·ªã nƒÉm.",
                        ephemeral: true,
                    });
                    return;
                }

                const [_, hour, minute, day, month, year] = match;
                const scheduledTime = moment.tz(`${year}-${month}-${day} ${hour}:${minute}`, "YYYY-MM-DD HH:mm", "Asia/Ho_Chi_Minh");

                if (!scheduledTime.isValid()) {
                    await interaction.reply({
                        content: preferredLanguage === 'en'
                            ? "It seems you wrote the time value incorrectly. Please check the date and time again."
                            : "C√≥ v·∫ª nh∆∞ b·∫°n vi·∫øt ƒë√£ vi·∫øt sai gi√° tr·ªã th·ªùi gian r·ªìi. Vui l√≤ng ki·ªÉm tra l·∫°i ng√†y v√† gi·ªù",
                        ephemeral: true,
                    });
                    return;
                }

                const delay = scheduledTime.valueOf() - Date.now();

                if (delay <= 0) {
                    await interaction.reply({
                        content: messages.scheduleError,
                        ephemeral: true,
                    });
                    return;
                }

                await interaction.reply({
                    content: preferredLanguage === 'en' 
                    ? `The announcement will be sent at ${scheduledTime.format('HH:mm [on] DD/MM/YYYY')} (Vietnam time)`
                    : `Th√¥ng b√°o s·∫Ω ƒë∆∞·ª£c g·ª≠i v√†o l√∫c ${scheduledTime.format('HH:mm [ng√†y] DD/MM/YYYY')} (gi·ªù Vi·ªát Nam)`, // `Th√¥ng b√°o s·∫Ω ƒë∆∞·ª£c g·ª≠i v√†o l√∫c ${scheduledTime.format('HH:mm [ng√†y] DD/MM/YYYY')} (gi·ªù Vi·ªát Nam)`,
                    ephemeral: true,
                });

                setTimeout(async () => {
                    await channel.send({ content: `${Role}`, embeds: [embed] });
                }, delay);

            } else {
                const row = new ActionRowBuilder().addComponents(
                    new ButtonBuilder()
                        .setCustomId("confirm_send")
                        .setEmoji(`<:177envelopesend:1252735130003443722>`)
                        .setStyle(ButtonStyle.Success),
                    new ButtonBuilder()
                        .setCustomId("cancel_send")
                        .setEmoji(`<:giphy5:1252736661763391548>`)
                        .setStyle(ButtonStyle.Primary)
                );

                await interaction.deferReply({ ephemeral: true });

                await interaction.editReply({
                    content: preferredLanguage === 'en' ? "Preview announcement:" : "Xem tr∆∞·ªõc th√¥ng b√°o:",
                    embeds: [embed],
                    components: [row],
                });

                const filter = (i) => i.user.id === interaction.user.id;

                const collector = interaction.channel.createMessageComponentCollector({ filter, time: 15000 });

                collector.on("collect", async (i) => {
                    await i.deferUpdate();

                    if (i.customId === "confirm_send") {
                        await channel.send({ content: `${Role}`,embeds: [embed] });

                        await interaction.followUp({
                            content: preferredLanguage === 'en'
                                ? "Announcement sent!"
                                : "Th√¥ng b√°o ƒë√£ ƒë∆∞·ª£c g·ª≠i!",
                            ephemeral: true,
                        });

                        collector.stop();
                    } else if (i.customId === "cancel_send") {
                        await interaction.followUp({
                            content: preferredLanguage === 'en'
                                ? "Announcement canceled!"
                                : "ƒê√£ h·ªßy th√¥ng b√°o!",
                            ephemeral: true,
                        });

                        collector.stop();
                    }
                });

                collector.on("end", async () => {
                    await interaction.editReply({ components: [] });
                });
            }
        } catch (error) {
            // L·∫•y ng√¥n ng·ªØ ƒë√£ l∆∞u t·ª´ c∆° s·ªü d·ªØ li·ªáu
            const preferredLanguage = await getPreferredLanguage(interaction.guild.id, interaction.user.id);
            console.error("L·ªói khi th·ª±c hi·ªán l·ªánh:", error);
            await interaction.reply({
                content: preferredLanguage === 'en' 
                ? "An error occurred. Please try again."
                : "ƒê√£ c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i.", // "ƒê√£ c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i.",
                ephemeral: true,
            });
        }
    },
};