const { SlashCommandBuilder } = require("discord.js");
const { rowHi } = require("../../ButtonPlace/ActionRowBuilder");
const { createHiEmbed } = require(`../../Embeds/embedsCreate`);
const { checkAdministrator } = require(`../../permissionCheck`);
const CommandStatus = require('../../schemas/Command_Status');

module.exports = {
    data: new SlashCommandBuilder()
        .setName("hi")
        .setDescription("üîπ ƒê√¢y l√† tin nh·∫Øn ch√†o m·ª´ng."),
    async execute(interaction, client) {

        // Ki·ªÉm tra tr·∫°ng th√°i c·ªßa l·ªánh
        const commandStatus = await CommandStatus.findOne({ command: '/hi' });

        // N·∫øu l·ªánh ƒëang t·∫Øt, g·ª≠i th√¥ng b√°o v√† kh√¥ng th·ª±c hi·ªán l·ªánh
        if (commandStatus && commandStatus.status === 'off') {
            return interaction.reply('L·ªánh n√†y ƒë√£ b·ªã t·∫Øt, vui l√≤ng th·ª≠ l·∫°i sau.');
        }

        const hasPermission = await checkAdministrator(interaction);
        if (!hasPermission) return;

        // Tr√¨ ho√£n ph·∫£n h·ªìi
        await interaction.deferReply({ ephemeral: false });

        const embed = createHiEmbed(interaction);

        const row = rowHi(interaction);

        // G·ª≠i tin nh·∫Øn v·ªõi ho·∫∑c kh√¥ng c√≥ n√∫t
        if (row) {
            await interaction.channel.send({ embeds: [embed], components: [row] });
        } else {
            await interaction.channel.send({ embeds: [embed] });
        }

        // X√≥a ph·∫£n h·ªìi ƒë√£ b·ªã tr√¨ ho√£n
        await interaction.deleteReply();
    },
};
