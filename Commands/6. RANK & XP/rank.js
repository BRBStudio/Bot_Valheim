const { SlashCommandBuilder, EmbedBuilder, AttachmentBuilder, PermissionsBitField } = require('discord.js');
const levelSchema = require('../../schemas/messagelevelSchema');
const path = require('path');
const fs = require('fs');
const CommandStatus = require('../../schemas/Command_Status');
const { createCanvas, loadImage } = require('canvas');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('rank')
        .setDescription('üîπ Xem th·ª© h·∫°ng th√†nh vi√™n trong m√°y ch·ªß')
        .addSubcommand(subcommand =>
            subcommand
                .setName('user')
                .setDescription('üîπ Xem th·ª© h·∫°ng c·ªßa m·ªôt th√†nh vi√™n c·ª• th·ªÉ')
                .addUserOption(option => option.setName('user').setDescription('Th√†nh vi√™n c√≥ th·ª© h·∫°ng b·∫°n mu·ªën ki·ªÉm tra').setRequired(true))
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('top_level')
                .setDescription('üîπ Xem danh s√°ch 10 ng∆∞·ªùi ƒë·ª©ng ƒë·∫ßu b·∫£ng c·∫•p ƒë·ªô Level')
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('top_rank')
                .setDescription('üîπ Xem danh s√°ch 6 ng∆∞·ªùi ƒë·ª©ng ƒë·∫ßu b·∫£ng x·∫øp h·∫°ng Rank')
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('setup-level')
                .setDescription('üîπ Thi·∫øt l·∫≠p quy·ªÅn truy c·∫≠p k√™nh d·ª±a tr√™n c·∫•p ƒë·ªô')
                .addChannelOption(option => option.setName('channel1').setDescription('K√™nh cho ng∆∞·ªùi ƒë·∫°t level cao nh·∫•t').setRequired(true))
                .addIntegerOption(option => option.setName('level1').setDescription('Level c·∫ßn thi·∫øt cho k√™nh 1').setRequired(true))
                .addChannelOption(option => option.setName('channel2').setDescription('K√™nh cho ng∆∞·ªùi ƒë·∫°t level cao th·ª© 2').setRequired(true))
                .addIntegerOption(option => option.setName('level2').setDescription('Level c·∫ßn thi·∫øt cho k√™nh 2').setRequired(true))
                .addChannelOption(option => option.setName('channel3').setDescription('K√™nh cho ng∆∞·ªùi ƒë·∫°t level cao th·ª© 3').setRequired(true))
                .addIntegerOption(option => option.setName('level3').setDescription('Level c·∫ßn thi·∫øt cho k√™nh 3').setRequired(true))
        ),

    async execute(interaction, client) {

        // Ki·ªÉm tra tr·∫°ng th√°i c·ªßa l·ªánh
        const commandStatus = await CommandStatus.findOne({ command: '/rank' });

        // N·∫øu l·ªánh ƒëang t·∫Øt, g·ª≠i th√¥ng b√°o v√† kh√¥ng th·ª±c hi·ªán l·ªánh
        if (commandStatus && commandStatus.status === 'off') {
            return interaction.reply('L·ªánh n√†y ƒë√£ b·ªã t·∫Øt, vui l√≤ng th·ª≠ l·∫°i sau.');
        }

        const { options, user, guild } = interaction;
        const subcommand = options.getSubcommand();
        const memberOption = options.getMember('user') || user;
        const member = guild.members.cache.get(memberOption.id);

        // L·∫•y d·ªØ li·ªáu c·ªßa 10 ng∆∞·ªùi d√πng t·ª´ c∆° s·ªü d·ªØ li·ªáu
        const topUsers = await levelSchema.find({ Guild: guild.id }).sort({ XP: -1 }).limit(10);

        // Truy v·∫•n tr·ª±c ti·∫øp t·ª´ c∆° s·ªü d·ªØ li·ªáu
        const players = await Promise.all(topUsers.map(async (data, index) => {
            try {
                const cachedMember = await guild.members.fetch(data.User);
                const rank = Math.floor(data.Level / 10) + 1; // X√°c ƒë·ªãnh rank d·ª±a tr√™n level
                return {
                    avatar: cachedMember.user.displayAvatarURL({ forceStatic: true }),
                    username: cachedMember.user.username,
                    displayName: cachedMember.displayName,
                    level: data.Level,
                    xp: data.XP,
                    rank: rank,
                };
            } catch (error) {
                console.error(`üëë Kh√¥ng th·ªÉ t√¨m th·∫•y th√†nh vi√™n v·ªõi ID ${data.User} trong m√°y ch·ªß.`);
                return null;
            }
        }));

        const validPlayers = players.filter(player => player !== null);
        

        if (subcommand === 'top_rank') {
            // L·∫•y t·∫•t c·∫£ ng∆∞·ªùi d√πng trong c∆° s·ªü d·ªØ li·ªáu MongoDB theo Guild ID
            const allUsers = await levelSchema.find({ Guild: guild.id });
        
            // S·∫Øp x·∫øp danh s√°ch theo Rank -> Level -> XP
            allUsers.sort((a, b) => {
                if (b.Rank !== a.Rank) return b.Rank - a.Rank;
                if (b.Level !== a.Level) return b.Level - a.Level;
                return b.XP - a.XP;
            });
        
            // L·∫•y top 3 Rank cao nh·∫•t
            const uniqueRanks = [...new Set(allUsers.map(user => user.Rank))].slice(0, 3);
            const topRankedPlayers = uniqueRanks.map(rank => allUsers.find(user => user.Rank === rank)).filter(Boolean);
        
            // Tr√¨ ho√£n ph·∫£n h·ªìi ƒë·ªÉ c√≥ th·ªùi gian x·ª≠ l√Ω h√¨nh ·∫£nh
            await interaction.deferReply();
            try {
                // T·∫°o canvas v·ªõi k√≠ch th∆∞·ªõc 1120, 980, c√≤n k√≠ch th∆∞·ªõc max l√† 3000, 2048
                const canvas = createCanvas(1120, 980);
                const ctx = canvas.getContext('2d');
        
                // T·∫£i ·∫£nh n·ªÅn
                const background = await loadImage('https://topanh.com/wp-content/uploads/2024/01/anh-background-cuc-dep_110341116.jpg');

                // V·∫Ω n·ªÅn v·ªõi g√≥c bo tr√≤n
                const BORDER_RADIUS = 50; // ƒê·ªô bo g√≥c, c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh
                ctx.save();
                ctx.beginPath();
                ctx.roundRect(0, 0, canvas.width, canvas.height, BORDER_RADIUS);
                ctx.clip();
                ctx.drawImage(background, 0, 0, canvas.width, canvas.height);
                ctx.restore();

                // ƒê·ªãnh nghƒ©a gi·ªõi h·∫°n chi·ªÅu r·ªông t·ªëi ƒëa cho ch·ªØ
const maxWidth = canvas.width - 100; // Gi·ªõi h·∫°n ƒë·ªÉ tr√°nh tr√†n ra ngo√†i

// H√†m r√∫t g·ªçn chu·ªói n·∫øu qu√° d√†i
function shortenText(ctx, text, maxWidth, font) {
    ctx.font = font;
    if (ctx.measureText(text).width <= maxWidth) {
        return text; // N·∫øu v·ª´a th√¨ kh√¥ng c·∫ßn c·∫Øt
    }

    let trimmedText = text;
    while (ctx.measureText(trimmedText + "...").width > maxWidth) {
        trimmedText = trimmedText.slice(0, -1); // C·∫Øt t·ª´ng k√Ω t·ª± m·ªôt
    }
    return trimmedText + "..."; // Th√™m d·∫•u "..." v√†o cu·ªëi
}

// Ch·ªçn font tr∆∞·ªõc khi ƒëo
const fontSize = 40;
const font = `${fontSize}px Arial`;
ctx.font = font;

// C·∫Øt b·ªõt t√™n n·∫øu c·∫ßn
const serverName = shortenText(ctx, `ƒê∆Ø·ª¢C T·∫†O B·ªûI S√ìI TR·∫ÆNG`, maxWidth, font); // ${guild.name} ${client.user.username}

// V·ªã tr√≠ h·ª£p l√Ω h∆°n ƒë·ªÉ ƒë·∫£m b·∫£o ch·ªØ n·∫±m trong khung
const textX = canvas.width / 2; // Gi·ªØa ngang
const textY = canvas.height - 50; // G·∫ßn m√©p d∆∞·ªõi nh∆∞ng v·∫´n trong khung

ctx.textAlign = 'center'; // CƒÉn gi·ªØa theo chi·ªÅu ngang
ctx.textBaseline = 'middle'; // CƒÉn gi·ªØa theo chi·ªÅu d·ªçc

// T·∫°o vi·ªÅn cho ch·ªØ ƒë·ªÉ d·ªÖ ƒë·ªçc h∆°n
ctx.strokeStyle = 'black'; // Vi·ªÅn ƒëen
ctx.lineWidth = 6; 
ctx.strokeText(serverName, textX, textY); 

// V·∫Ω ch·ªØ v·ªõi m√†u tr·∫Øng
ctx.fillStyle = 'rgb(255, 255, 255)';
ctx.fillText(serverName, textX, textY);


        
                // C·∫•u h√¨nh vi·ªÅn v√† m√†u s·∫Øc
                const AVATAR_BORDER_COLOR = 'rgb(255, 255, 255)'; // M√†u vi·ªÅn avatar
                const AVATAR_BORDER_SIZE = 5; // ƒê·ªô d√†y vi·ªÅn avatar
                const FRAME_BORDER_COLOR = 'rgb(255, 255, 255)'; // M√†u vi·ªÅn khung avatar
                const FRAME_BORDER_SIZE = 2; // ƒê·ªô d√†y vi·ªÅn khung
                const DEFAULT_AVATAR_COLOR = 'rgb(0, 0, 0)'; // M√†u m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng c√≥ avatar

                // H√†m v·∫Ω √¥ avatar top 1 ƒë·∫øn top 3 tr√™n b·∫£ng x·∫øp h·∫°ng
                async function drawRankedBox(ctx, avatarUrl, x, y, size, bgColor, isDefault = false) {
                    ctx.save();
                    
                    // V·∫Ω vi·ªÅn ngo√†i c·ªßa avatar
                    ctx.beginPath();
                    ctx.arc(x + size / 2, y + size / 2, size / 2 + FRAME_BORDER_SIZE, 0, Math.PI * 2);
                    ctx.fillStyle = FRAME_BORDER_COLOR;
                    ctx.fill();
                    ctx.closePath();
        
                    // V·∫Ω n·ªÅn avatar
                    ctx.beginPath();
                    ctx.arc(x + size / 2, y + size / 2, size / 2, 0, Math.PI * 2);
                    ctx.fillStyle = bgColor;
                    ctx.fill();
                    ctx.closePath();
        
                    // V·∫Ω vi·ªÅn avatar
                    ctx.beginPath();
                    ctx.arc(x + size / 2, y + size / 2, (size / 2) - AVATAR_BORDER_SIZE, 0, Math.PI * 2);
                    ctx.lineWidth = AVATAR_BORDER_SIZE;
                    ctx.strokeStyle = AVATAR_BORDER_COLOR;
                    ctx.stroke();
                    ctx.closePath();
        
                    if (!isDefault) {
                        // N·∫øu c√≥ avatar, t·∫£i v√† v·∫Ω l√™n canvas
                        const avatarImg = await loadImage(avatarUrl);
                        ctx.save();
                        ctx.beginPath();
                        ctx.arc(x + size / 2, y + size / 2, (size / 2) - AVATAR_BORDER_SIZE, 0, Math.PI * 2);
                        ctx.closePath();
                        ctx.clip();
                        ctx.drawImage(avatarImg, x + AVATAR_BORDER_SIZE, y + AVATAR_BORDER_SIZE, size - (AVATAR_BORDER_SIZE * 2), size - (AVATAR_BORDER_SIZE * 2));
                        ctx.restore();
                    } else {
                        // N·∫øu kh√¥ng c√≥ avatar, hi·ªÉn th·ªã d·∫•u "?" tr√™n n·ªÅn ƒëen
                        ctx.fillStyle = 'white';
                        ctx.font = `${size / 2}px Arial`;
                        ctx.textAlign = 'center';
                        ctx.textBaseline = 'middle';
                        ctx.fillText('?', x + size / 2, y + size / 2);
                    }
                }

function khung_vuong(ctx, x, y, width, height, color, borderRadius, rank, username, isTop1 = false) {
    ctx.save();
    ctx.fillStyle = color;
    ctx.beginPath();
    ctx.roundRect(x, y, width, height, borderRadius);
    ctx.fill();
    ctx.restore();

    // C·∫•u h√¨nh hi·ªÉn th·ªã t√™n
    ctx.save();
    ctx.font = isTop1 ? "45px Arial" : "40px Arial";  // Font ch·ªØ l·ªõn h∆°n cho top 1
    ctx.fillStyle = "rgb(255, 254, 254)"; // M√†u ch·ªØ
    ctx.textAlign = "center";
    ctx.textBaseline = "middle";

    let p = isTop1 ? 0 : 0;  // ƒêi·ªÅu ch·ªânh v·ªã tr√≠ ngang (c√≥ th·ªÉ t√πy ch·ªânh)
    let q = isTop1 ? 40 : 50; // ƒêi·ªÅu ch·ªânh v·ªã tr√≠ d·ªçc (ri√™ng bi·ªát cho top 1)

    const textX = x + width / 2 + p;
    const textY = y + height * 0.6 - q;

    let displayName = username;
    const maxWidth = width * 0.8;
    while (ctx.measureText(displayName).width > maxWidth) {
        displayName = displayName.slice(0, -1); // C·∫Øt b·ªõt k√Ω t·ª± cu·ªëi
    }

    ctx.fillText(displayName, textX, textY);
    ctx.restore();

    // C·∫•u h√¨nh hi·ªÉn th·ªã rank
    ctx.save();
    ctx.font = isTop1 ? "50px Arial" : "45px Arial";  // Font l·ªõn h∆°n cho top 1
    ctx.fillStyle = "rgb(255, 251, 0)"; // M√†u ch·ªØ v√†ng
    ctx.textAlign = "center";
    ctx.textBaseline = "middle";

    let M = isTop1 ? 0 : 0;  // ƒêi·ªÅu ch·ªânh v·ªã tr√≠ ngang (c√≥ th·ªÉ t√πy ch·ªânh)
    let K = isTop1 ? 140 : 120; // ƒêi·ªÅu ch·ªânh v·ªã tr√≠ d·ªçc ri√™ng cho top 1

    const rankX = textX - M;
    const rankY = y + height * 0.3 + K; 

    ctx.fillText(`Rank: ${rank}`, rankX, rankY);
    ctx.restore();
}

// L·∫•y th√¥ng tin th√†nh vi√™n t·ª´ guild Discord
const finalPlayers = await Promise.all(topRankedPlayers.map(async player => {
    try {
        const member = await guild.members.fetch(player.User);
        return {
            username: member.user.username,
            displayName: member.displayName,
            avatar: member.user.displayAvatarURL({ extension: 'png', size: 256 }),
            level: player.Level,
            xp: player.XP,
            rank: player.Rank,
        };
    } catch (error) {
        return null; // N·∫øu kh√¥ng t√¨m th·∫•y th√†nh vi√™n, tr·∫£ v·ªÅ null
    }
}));


// C·∫•u h√¨nh cho 3 khung vu√¥ng b√™n d∆∞·ªõi avatar
const boxes0 = [
    // Rank top 2
    { 
        x: 50,  // ƒêi·ªÅu ch·ªânh v·ªã tr√≠ ngang (sang tr√°i/ph·∫£i)
        y: 220,  // ƒêi·ªÅu ch·ªânh v·ªã tr√≠ d·ªçc (l√™n/xu·ªëng)
        width: 300,  // ƒêi·ªÅu ch·ªânh chi·ªÅu r·ªông
        height: 300,  // ƒêi·ªÅu ch·ªânh chi·ªÅu cao
        color: 'rgba(111, 0, 255, 0.5)',  // ƒêi·ªÅu ch·ªânh m√†u s·∫Øc (R,G,B, Alpha - ƒë·ªô trong su·ªët)
        borderRadius: 20, // ƒêi·ªÅu ch·ªânh ƒë·ªô bo g√≥c
        player: finalPlayers[1] // text: "Khung 2 - t√≠m"
    },
    // Rank top 1
    { 
        x: 375, 
        y: 150,
        width: 370, 
        height: 370, 
        color: 'rgba(0, 255, 0, 0.5)', // Xanh l√° c√¢y
        borderRadius: 20, // Bo g√≥c ri√™ng bi·ªát
        player: finalPlayers[0] // text: "Khung 1 - xanh l√° c√¢y"
    },
    // Rank top 3
    { 
        x: 770, 
        y: 220, 
        width: 300, 
        height: 300, 
        color: 'rgba(0, 0, 255, 0.5)', // Xanh d∆∞∆°ng
        borderRadius: 20,
        player: finalPlayers[2] // text: "Khung 3 - Xanh d∆∞∆°ng"
    },
];

// V·∫Ω c√°c khung vu√¥ng b√™n d∆∞·ªõi avatar
for (let i = 0; i < boxes0.length; i++) {
    const box = boxes0[i];
    const rank = box.player ? box.player.rank : "N/A";
    const username = box.player ? box.player.displayName : "Unknown";

    // N·∫øu l√† top 1 th√¨ ƒë·∫∑t `isTop1 = true`, c√≤n l·∫°i l√† `false`
    const isTop1 = i === 1;

    khung_vuong(ctx, box.x, box.y, box.width, box.height, box.color, box.borderRadius, rank, username, isTop1);
}





// H√†m v·∫Ω khung tr√≤n
function khung_tron(ctx, x, y, radius, fillColor, strokeColor, strokeWidth, index) {
    ctx.save();
    ctx.fillStyle = fillColor; 
    ctx.strokeStyle = strokeColor;
    ctx.lineWidth = strokeWidth;
    
    ctx.beginPath();
    ctx.arc(x, y, radius, 0, Math.PI * 2);
    ctx.fill();
    
    if (strokeWidth > 0) {
        ctx.stroke();
    }

    // V·∫Ω s·ªë th·ª© t·ª± v√†o gi·ªØa h√¨nh tr√≤n
    ctx.fillStyle = "rgb(255, 255, 255)"; // M√†u ch·ªØ
    ctx.font = `${radius}px Arial`; // C·ª° ch·ªØ t√πy theo b√°n k√≠nh h√¨nh tr√≤n
    ctx.textAlign = "center";
    ctx.textBaseline = "middle";
    ctx.fillText(index, x, y);

    ctx.restore();
}

// C·∫•u h√¨nh cho 3 khung tr√≤n
const circles = [
    //khung top 1
    { 
        x: 560, 
        y: 250, 
        radius: 30, 
        fillColor: 'rgb(255, 187, 0)',
        strokeColor: 'rgb(255, 255, 255)',
        strokeWidth: 5 
    },
    // khung top 2
    { 
        x: 200,  // T·ªça ƒë·ªô X
        y: 290,  // T·ªça ƒë·ªô Y
        radius: 30,  // B√°n k√≠nh c·ªßa h√¨nh tr√≤n
        fillColor: 'rgb(255, 187, 0)', // M√†u n·ªÅn
        strokeColor: 'rgb(255, 255, 255)', // M√†u vi·ªÅn
        strokeWidth: 5 // ƒê·ªô d√†y vi·ªÅn
    },
    // khung top 3
    { 
        x: 920, 
        y: 290, 
        radius: 30, 
        fillColor: 'rgb(255, 187, 0)',
        strokeColor: 'rgb(255, 255, 255)',
        strokeWidth: 5
    },
];


// L·∫•y th√™m top 4, 5, 6
const nextRankedPlayers = allUsers.slice(3, 6); // L·∫•y t·ª´ v·ªã tr√≠ 3 -> 5 (top 4, 5, 6)

const finalNextPlayers = await Promise.all(nextRankedPlayers.map(async player => {
    try {
        const member = await guild.members.fetch(player.User);
        return {
            username: member.user.username,
            displayName: member.displayName,
            avatar: member.user.displayAvatarURL({ extension: 'png', size: 256 }),
            level: player.Level,
            xp: player.XP,
            rank: player.Rank,
        };
    } catch (error) {
        return null; // N·∫øu kh√¥ng t√¨m th·∫•y th√†nh vi√™n, tr·∫£ v·ªÅ null
    }
}));

async function avatar_top4_top5_top6(ctx, avatarUrl, x, y, size, bgColor, isDefault = false) {
    ctx.save();

    // V·∫Ω n·ªÅn bo g√≥c
    const radius = 15; // ƒê·ªô cong g√≥c
    ctx.fillStyle = bgColor;
    ctx.beginPath();
    ctx.moveTo(x + radius, y);
    ctx.arcTo(x + size, y, x + size, y + size, radius);
    ctx.arcTo(x + size, y + size, x, y + size, radius);
    ctx.arcTo(x, y + size, x, y, radius);
    ctx.arcTo(x, y, x + size, y, radius);
    ctx.closePath();
    ctx.fill();

    // V·∫Ω vi·ªÅn avatar
    ctx.strokeStyle = AVATAR_BORDER_COLOR;
    ctx.lineWidth = AVATAR_BORDER_SIZE;
    ctx.stroke();

    if (!isDefault) {
        // T·∫°o mask ƒë·ªÉ bo g√≥c avatar
        ctx.clip();
        const avatarImg = await loadImage(avatarUrl);
        ctx.drawImage(avatarImg, x, y, size, size);
    } else {
        // N·∫øu kh√¥ng c√≥ avatar, hi·ªÉn th·ªã d·∫•u "?"
        ctx.fillStyle = 'white';
        ctx.font = `${size / 2}px Arial`;
        ctx.textAlign = 'center';
        ctx.textBaseline = 'middle';
        ctx.fillText('?', x + size / 2, y + size / 2);
    }

    ctx.restore();
}

const positions15 = [
    { x: 75, y: 560, size: 100 }, // Top 4
    { x: 75, y: 670, size: 100 }, // Top 5
    { x: 75, y: 780, size: 100 }  // Top 6
];



// H√†m v·∫Ω khung ch·ªØ nh·∫≠t cho top 4, 5, 6
function khung_top4_top5_top6(ctx, x, y, width, height, color, borderRadius, opacity, player) {
    ctx.save();
    ctx.globalAlpha = opacity; // ƒêi·ªÅu ch·ªânh ƒë·ªô trong su·ªët
    ctx.fillStyle = color;
    ctx.beginPath();
    ctx.roundRect(x, y, width, height, borderRadius);
    ctx.fill();

    // v·∫Ω vi·ªÅn rank top 4 -> top 6
    ctx.strokeStyle = `rgb(255, 255, 255);`; 
    ctx.lineWidth = `1`;
    ctx.stroke();

    if (player) {
        // Hi·ªÉn th·ªã t√™n v√† rank
        ctx.fillStyle = "rgb(255, 255, 255)"; // M√†u ch·ªØ
        ctx.font = `bold 35px Arial`; // C·ª° ch·ªØ l·ªõn h∆°n
        ctx.textAlign = "center";
        ctx.textBaseline = "middle";

        const rankText = `${player.rank}`;
        // const nameText = player.displayName;

        ctx.fillText(rankText, x + width / 2, y + 47); // Rank
        ctx.font = `20px Arial`;
        // ctx.fillText(nameText, x + width / 2, y + 70); // T√™n ng∆∞·ªùi ch∆°i
    } else {
        ctx.fillStyle = "rgb(255, 255, 255)";
        ctx.font = `35px Arial`;
        ctx.textAlign = "center";
        ctx.textBaseline = "middle";
        ctx.fillText("N/A", x + width / 2, y + height / 2);
    }

    ctx.restore();
}

// C·∫•u h√¨nh 6 khung ch·ªØ nh·∫≠t v·ªõi ƒë·ªô trong su·ªët kh√°c nhau
    
const boxes1 = [
    { x: 870, y: 560, width: 175, height: 100, color: 'rgb(0, 0, 0)', borderRadius: 20, opacity: 1, player: finalNextPlayers[0] }, // hi·ªÉn th·ªã s·ªë Rank top 4
    { x: 870, y: 670, width: 175, height: 100, color: 'rgb(0, 0, 0)', borderRadius: 20, opacity: 1, player: finalNextPlayers[1] }, // hi·ªÉn th·ªã s·ªë Rank top 5
    { x: 870, y: 780, width: 175, height: 100, color: 'rgb(0, 0, 0)', borderRadius: 20, opacity: 1, player: finalNextPlayers[2] }, // hi·ªÉn th·ªã avatar ng∆∞·ªùi d√πng top 6
];

function khung_chu_nhat(ctx, x, y, width, height, color, borderRadius, player, fontSize = 30, textColor = "white", textOffsetX = 0, textOffsetY = 0) {
    ctx.save();
    
    // V·∫Ω khung ch·ªØ nh·∫≠t
    ctx.fillStyle = color;
    ctx.beginPath();
    ctx.roundRect(x, y, width, height, borderRadius);
    ctx.fill();

    // V·∫Ω t√™n ng∆∞·ªùi ch∆°i
    ctx.fillStyle = textColor;
    ctx.font = `bold ${fontSize}px Arial`;
    ctx.textAlign = "left"; // CƒÉn ch·ªØ v·ªÅ b√™n tr√°i
    ctx.textBaseline = "middle";

    let displayName = player ? player.displayName : "N/A";
    const maxWidth = width - 100; // Gi·ªõi h·∫°n chi·ªÅu r·ªông ch·ªØ (tr√°nh tr√†n)

    while (ctx.measureText(displayName).width > maxWidth) {
        displayName = displayName.slice(0, -1); // C·∫Øt k√Ω t·ª± cu·ªëi n·∫øu qu√° d√†i
    }

    const fixedTextX = x + 150; // V·ªã tr√≠ c·ªë ƒë·ªãnh c·ªßa ch·ªØ
    const fixedTextY = y + height / 2 + textOffsetY;

    ctx.fillText(displayName, fixedTextX, fixedTextY);
    ctx.restore();
}


// C·∫•u h√¨nh khung ch·ªØ nh·∫≠t v·ªõi c√°c t√πy ch·ªânh
const boxes = [
    { 
        x: 75, 
        y: 560, 
        width: 970, 
        height: 100, 
        color: 'rgb(48, 49, 54)', // rgb(48, 49, 54); rgba(255, 0, 0, 1)
        borderRadius: 20,
        player: finalNextPlayers[0], // Ng∆∞·ªùi ch∆°i top 4
        fontSize: 35,
        textColor: "rgb(255, 255, 255)",
        textOffsetX: -280,
        textOffsetY: 0
    },
    { 
        x: 75, 
        y: 670, 
        width: 970, 
        height: 100, 
        color: 'rgb(48, 49, 54)', // rgba(0, 255, 0, 1)
        borderRadius: 20,
        player: finalNextPlayers[1], // Ng∆∞·ªùi ch∆°i top 5
        fontSize: 35,
        textColor: "rgb(255, 255, 255)",
        textOffsetX: -280,
        textOffsetY: 0
    },
    { 
        x: 75, 
        y: 780, 
        width: 970, 
        height: 100, 
        color: 'rgb(48, 49, 54)', // rgba(0, 0, 255, 1)
        borderRadius: 20,
        player: finalNextPlayers[2], // Ng∆∞·ªùi ch∆°i top 6
        fontSize: 35,
        textColor: "rgb(255, 255, 255)",
        textOffsetX: -280,
        textOffsetY: 0
    },
];

// V·∫Ω c√°c khung ch·ªØ nh·∫≠t v·ªõi t√™n ng∆∞·ªùi d√πng
for (let box of boxes) {
    khung_chu_nhat(ctx, box.x, box.y, box.width, box.height, box.color, box.borderRadius, 
        box.player, box.fontSize, box.textColor, box.textOffsetX, box.textOffsetY);
}




// function ve_vuong_mien(ctx, x, y, scale, color, k) {
//     ctx.save();
//     ctx.translate(x, y);
//     ctx.scale(scale, scale);
    
//     ctx.fillStyle = color;
//     ctx.strokeStyle = "black";
//     ctx.lineWidth = 3;

//     // V·∫Ω ph·∫ßn ƒë√°y v∆∞∆°ng mi·ªán (h√¨nh ch·ªØ nh·∫≠t)
//     ctx.beginPath();       // B·∫Øt ƒë·∫ßu m·ªôt ƒë∆∞·ªùng v·∫Ω m·ªõi
//     ctx.moveTo(-50, 30);   // ƒêi·ªÉm b·∫Øt ƒë·∫ßu b√™n tr√°i (t·ªça ƒë·ªô x = -50, y = 30)
//     ctx.lineTo(50, 30);    // K·∫ª ƒë∆∞·ªùng ngang sang ph·∫£i (t·ªça ƒë·ªô x = 50, y = 30)
//     ctx.lineTo(40, 50);    // K·∫ª ƒë∆∞·ªùng ch√©o xu·ªëng b√™n ph·∫£i (t·ªça ƒë·ªô x = 40, y = 50)
//     ctx.lineTo(-40, 50);   // K·∫ª ƒë∆∞·ªùng ngang sang tr√°i ƒë·ªÉ ƒë√≥ng ph·∫ßn ƒë√°y (t·ªça ƒë·ªô x = -40, y = 50)
//     ctx.closePath();       // ƒê√≥ng h√¨nh ƒë·ªÉ t·∫°o th√†nh m·ªôt v√πng kh√©p k√≠n
//     ctx.fill();            // T√¥ m√†u ph·∫ßn ƒë√°y v∆∞∆°ng mi·ªán
//     ctx.stroke();          // V·∫Ω vi·ªÅn ƒëen xung quanh ƒë√°y v∆∞∆°ng mi·ªán

//     ctx.beginPath();
// ctx.moveTo(-50, 30);   // B·∫Øt ƒë·∫ßu t·ª´ c·∫°nh tr√°i
// ctx.lineTo(60, -20);   // ƒê·ªânh tr√°i (nghi√™ng ra ngo√†i)
// ctx.lineTo(-10, 10);   // Xu·ªëng m·ªôt t√≠ ƒë·ªÉ t·∫°o khe
// ctx.lineTo(0, 20);     // ƒê·ªânh gi·ªØa cao nh·∫•t
// ctx.lineTo(10, 10);    // Xu·ªëng m·ªôt t√≠ ƒë·ªÉ t·∫°o khe
// ctx.lineTo(40, -20);   // ƒê·ªânh ph·∫£i (nghi√™ng ra ngo√†i)
// ctx.lineTo(50, 30);    // C·∫°nh ph·∫£i
// ctx.closePath();
// ctx.fill();
// ctx.stroke();



//     // V·∫Ω h√¨nh tr√≤n tr√™n c√°c ƒë·ªânh
//     let peaks = [
//         { x: -30, y: -10 },
//         { x: 0, y: 20 },
//         { x: 30, y: -10 }
//     ];

//     ctx.fillStyle = color;
//     for (let p of peaks) {
//         ctx.beginPath();
//         ctx.arc(p.x, p.y - k, 8, 0, Math.PI * 2);
//         ctx.fill();
//         ctx.stroke();
//     }

//     ctx.restore();
// }


// // C·∫•u h√¨nh v√† v·∫Ω v∆∞∆°ng mi·ªán
// const vuongMienConfigs = [
//     { x: 100, y: 100, scale: 1.5, color: "gold" },
//     { x: 300, y: 150, scale: 1.2, color: "red" },
//     { x: 500, y: 120, scale: 1.8, color: "blue" }
// ];

// for (let config of vuongMienConfigs) {
//     ve_vuong_mien(ctx, config.x, config.y, config.scale, config.color);
// }








        
                // X√°c ƒë·ªãnh v·ªã tr√≠ khung vu√¥ng c·ªßa top 3 tr√™n b·∫£ng x·∫øp h·∫°ng
                const positions = [
                    { x: 460, y: 50, color: 'rgb(255, 255, 255)', size: 200 }, // top 1
                    { x: 130, y: 150, color: 'rgb(255, 255, 255)', size: 140 }, // top 2
                    { x: 850, y: 150, color: 'rgb(255, 255, 255)', size: 140 }, // top 3
                ];
        
                // ƒê·∫£m b·∫£o danh s√°ch c√≥ ƒë·ªß 3 v·ªã tr√≠, n·∫øu thi·∫øu th√¨ th√™m null
                while (finalPlayers.length < 3) {
                    finalPlayers.push(null);
                }

                // ƒê·∫£m b·∫£o danh s√°ch c√≥ ƒë·ªß 3 v·ªã tr√≠, n·∫øu thi·∫øu th√¨ th√™m null
                while (finalNextPlayers.length < 3) {
                    finalNextPlayers.push(null);
                }
        
                // V·∫Ω avatar l√™n b·∫£ng x·∫øp h·∫°ng
                for (let i = 0; i < finalPlayers.length; i++) {
                    const player = finalPlayers[i];
                    const { x, y, color, size } = positions[i];
                    if (player) {
                        await drawRankedBox(ctx, player.avatar, x, y, size, color);
                    } else {
                        await drawRankedBox(ctx, null, x, y, size, DEFAULT_AVATAR_COLOR, true);
                    }
                }

                for (let i = 0; i < circles.length; i++) {
                    let circle = circles[i];
                    khung_tron(ctx, circle.x, circle.y, circle.radius, circle.fillColor, circle.strokeColor, circle.strokeWidth, i + 1);
                }

                // V·∫Ω c√°c khung ch·ªØ nh·∫≠t
                for (let box of boxes1) {
                    khung_top4_top5_top6(ctx, box.x, box.y, box.width, box.height, box.color, box.borderRadius, box.opacity, box.player);
                }

                // V·∫Ω avatar l√™n b·∫£ng x·∫øp h·∫°ng
for (let i = 0; i < finalNextPlayers.length; i++) {
    const player = finalNextPlayers[i];
    const { x, y, color, size } = positions15[i];
    if (player) {
        await avatar_top4_top5_top6(ctx, player.avatar, x, y, size, color); // 'rgb(255, 255, 255)'
    } else {
        await avatar_top4_top5_top6(ctx, null, x, y, size, DEFAULT_AVATAR_COLOR, true);
    }
}

                       
                // Xu·∫•t h√¨nh ·∫£nh b·∫£ng x·∫øp h·∫°ng
                const attachment = new AttachmentBuilder(canvas.toBuffer(), { name: 'rank-card.png' });
                await interaction.editReply({ files: [attachment] });
            } catch (error) {
                console.error('L·ªói khi t·∫°o b·∫£ng x·∫øp h·∫°ng:', error);
                await interaction.editReply({ content: 'ƒê√£ x·∫£y ra l·ªói khi t·∫°o b·∫£ng x·∫øp h·∫°ng.', ephemeral: true });
            }
        }

        
        if (subcommand === 'top_level') {
            if (validPlayers.length === 0) {
                const embed = new EmbedBuilder()
                    .setColor('Red')
                    .setDescription(`üëë Hi·ªán t·∫°i kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã b·∫£ng x·∫øp h·∫°ng.`);
                return await interaction.reply({ embeds: [embed] });
            }
        
            await interaction.deferReply(); // Tr√¨ ho√£n ph·∫£n h·ªìi ƒë·ªÉ tr√°nh l·ªói h·∫øt th·ªùi gian ch·ªù
        
            try {
                const canvas = createCanvas(1100, 830);
                const ctx = canvas.getContext('2d');
        
                // H√†m v·∫Ω ·∫£nh n·ªÅn v·ªõi g√≥c bo tr√≤n
                async function drawRoundedImage(ctx, img, x, y, width, height, radius) {
                    ctx.save();
                    ctx.beginPath();
                    ctx.moveTo(x + radius, y);
                    ctx.lineTo(x + width - radius, y);
                    ctx.quadraticCurveTo(x + width, y, x + width, y + radius);
                    ctx.lineTo(x + width, y + height - radius);
                    ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);
                    ctx.lineTo(x + radius, y + height);
                    ctx.quadraticCurveTo(x, y + height, x, y + height - radius);
                    ctx.lineTo(x, y + radius);
                    ctx.quadraticCurveTo(x, y, x + radius, y);
                    ctx.closePath();
                    ctx.clip();
                    ctx.drawImage(img, x, y, width, height);
                    ctx.restore();
                }
        
                try {
                    const background = await loadImage('https://topanh.com/wp-content/uploads/2024/01/anh-background-cuc-dep_110341116.jpg');
                    await drawRoundedImage(ctx, background, 0, 0, 1100, 830, 60); // Bo tr√≤n 60px
        
                    ctx.globalAlpha = 0.7;
                    const background1 = await loadImage('https://t4.ftcdn.net/jpg/04/92/22/93/240_F_492229389_5ve1bCKgYrLRHpCj3o4FAzz60efaZgG0.jpg');
                    await drawRoundedImage(ctx, background1, 0, 0, 1100, 830, 60); // Bo tr√≤n 60px
        
                    ctx.globalAlpha = 1;
                } catch (err) {
                    console.error("L·ªói khi t·∫£i ·∫£nh n·ªÅn:", err);
                }
                
                // H√†m v·∫Ω khung s·ªë th·ª© t·ª±
                function drawRankBox(ctx, x, y, width, height, text) {
                    ctx.fillStyle = 'rgb(25, 26, 28);';
                    ctx.beginPath();
                    ctx.moveTo(x + 10, y);
                    ctx.lineTo(x + width - 10, y);
                    ctx.quadraticCurveTo(x + width, y, x + width, y + 10);
                    ctx.lineTo(x + width, y + height - 10);
                    ctx.quadraticCurveTo(x + width, y + height, x + width - 10, y + height);
                    ctx.lineTo(x + 10, y + height);
                    ctx.quadraticCurveTo(x, y + height, x, y + height - 10);
                    ctx.lineTo(x, y + 10);
                    ctx.quadraticCurveTo(x, y, x + 10, y);
                    ctx.closePath();
                    ctx.fill();
        
                    // V·∫Ω text v√†o khung s·ªë th·ª© t·ª±
                    ctx.fillStyle = 'rgb(255, 255, 255)';
                    ctx.font = '20px Arial';
                    const textWidth = ctx.measureText(text).width;
                    const textX = x + (width - textWidth) / 2;
                    const textY = y + (height + 20) / 2;
                    ctx.fillText(text, textX, textY);
                }
        
                // H√†m v·∫Ω khung th√¥ng tin ng∆∞·ªùi ch∆°i
                function drawPlayerInfoBox(ctx, x, y, width, height, text) {
                    ctx.fillStyle = 'rgb(48, 49, 54);';
                    ctx.beginPath();
                    ctx.moveTo(x + 15, y);
                    ctx.lineTo(x + width - 15, y);
                    ctx.quadraticCurveTo(x + width, y, x + width, y + 15);
                    ctx.lineTo(x + width, y + height - 15);
                    ctx.quadraticCurveTo(x + width, y + height, x + width - 15, y + height);
                    ctx.lineTo(x + 15, y + height);
                    ctx.quadraticCurveTo(x, y + height, x, y + height - 15);
                    ctx.lineTo(x, y + 15);
                    ctx.quadraticCurveTo(x, y, x + 15, y);
                    ctx.closePath();
                    ctx.fill();
        
                    // V·∫Ω text v√†o khung th√¥ng tin ng∆∞·ªùi ch∆°i
                    ctx.fillStyle = 'rgb(255, 255, 255)';
                    ctx.font = '30px Arial';
                    const textWidth = ctx.measureText(text).width;
                    const textX = x + (width - textWidth) / 2;
                    const textY = y + (height + 20) / 2;
                    ctx.fillText(text, textX, textY);
                }
        
                ctx.fillStyle = "rgb(255, 255, 255)";
                ctx.font = '40px Arial';

                // T√≠nh to√°n ƒë·ªô d√†i c·ªßa vƒÉn b·∫£n
                const text = `üèÜB·∫¢NG X·∫æP H·∫†NG LEVEL M√ÅY CH·ª¶ ${guild}üèÜ`;
                let textWidth = ctx.measureText(text).width;

                // Ki·ªÉm tra n·∫øu ƒë·ªô r·ªông c·ªßa vƒÉn b·∫£n qu√° l·ªõn
                const maxWidth = canvas.width - 40; // Gi·ªõi h·∫°n chi·ªÅu r·ªông c·ªßa vƒÉn b·∫£n (40px d·ª± ph√≤ng cho padding)

                let truncatedText = text; // Khai b√°o truncatedText tr∆∞·ªõc khi v√†o v√≤ng l·∫∑p

                if (textWidth > maxWidth) {
                    // C·∫Øt vƒÉn b·∫£n n·∫øu qu√° d√†i v√† th√™m "..."
                    while (textWidth > maxWidth) {
                        truncatedText = truncatedText.slice(0, -1); // C·∫Øt d·∫ßn k√Ω t·ª± cu·ªëi
                        textWidth = ctx.measureText(truncatedText + '...').width; // C·∫≠p nh·∫≠t ƒë·ªô d√†i c·ªßa vƒÉn b·∫£n m·ªói l·∫ßn c·∫Øt
                    }
                    truncatedText += '...'; // Th√™m d·∫•u "..." v√†o cu·ªëi
                }

                // T√≠nh to√°n v·ªã tr√≠ X sao cho vƒÉn b·∫£n lu√¥n ·ªü gi·ªØa
                const textX = (canvas.width - ctx.measureText(truncatedText).width) / 2;
                const textY = 60; // V·ªã tr√≠ Y, gi·ªØ nguy√™n

                ctx.fillText(truncatedText, textX, textY);



                // ctx.fillText(`üèÜB·∫¢NG X·∫æP H·∫†NG ${guild}üèÜ`, 120, 60);
        
                const padding = 12;
                const startX = 35;
                const startY = 100;

                validPlayers.sort((a, b) => {
                    if (b.level !== a.level) {
                        return b.level - a.level; // S·∫Øp x·∫øp gi·∫£m d·∫ßn theo level
                    }
                    return b.xp - a.xp; // N·∫øu level b·∫±ng nhau, s·∫Øp x·∫øp theo xp
                });

                validPlayers.forEach((player, index) => {
                    const rankWidth = 60; // K√≠ch th∆∞·ªõc khung th·ª© t·ª±
                    const rankHeight = 60;
                    const rankX = startX;
                    const rankY = startY + (index * (rankHeight + padding));
                
                    const playerInfoWidth = 1030;
                    const playerInfoHeight = 60;
                    const playerInfoX = 35;
                    const playerInfoY = rankY + (rankHeight - playerInfoHeight) / 2;
                
                    // V·∫Ω khung th√¥ng tin ng∆∞·ªùi ch∆°i
                    drawPlayerInfoBox(ctx, playerInfoX, playerInfoY, playerInfoWidth, playerInfoHeight, '');
                
                    // V·∫Ω khung s·ªë th·ª© t·ª±
                    drawRankBox(ctx, rankX, rankY, rankWidth, rankHeight, `${index + 1}`);

                    // C·ªë ƒë·ªãnh v·ªã tr√≠ t·ª´ng ƒëo·∫°n text trong khung th√¥ng tin ng∆∞·ªùi ch∆°i
                    ctx.fillStyle = 'rgb(255, 255, 255)';
                    ctx.font = '30px Arial';
                    ctx.textAlign = "left";
                
                    // X√°c ƒë·ªãnh v·ªã tr√≠ c√°c c·ªôt
                    const nameX = playerInfoX + 70; // V·ªã tr√≠ t√™n ng∆∞·ªùi ch∆°i
                    const levelX = playerInfoX + 560; // V·ªã tr√≠ "LV"
                    const xpX = playerInfoX + 750; // V·ªã tr√≠ "XP"
                    const nameY = playerInfoY + 38; // CƒÉn gi·ªØa chi·ªÅu cao khung
                
                    // C·∫Øt t√™n n·∫øu qu√° d√†i
                    let playerName = player.displayName;
                    let maxNameWidth = levelX - nameX - 140; // Kho·∫£ng c√°ch gi·ªØa t√™n v√† "LV"
                
                    if (ctx.measureText(playerName).width > maxNameWidth) {
                        while (ctx.measureText(playerName + "...").width > maxNameWidth) {
                            playerName = playerName.slice(0, -1); // C·∫Øt d·∫ßn k√Ω t·ª± cu·ªëi
                        }
                        playerName += "..."; // Th√™m d·∫•u "..." v√†o cu·ªëi
                    }
                
                    // V·∫Ω t√™n ng∆∞·ªùi ch∆°i
                    ctx.fillText(playerName, nameX, nameY);
                
                    // V·∫Ω c·∫•p ƒë·ªô v√† kinh nghi·ªám
                    ctx.fillText(`LV: ${player.level}`, levelX, nameY);
                    ctx.fillText(`XP: ${player.xp}`, xpX, nameY);
                });

                const attachment = new AttachmentBuilder(canvas.toBuffer(), { name: 'rank-card.png' });
                await interaction.editReply({ files: [attachment] });
            } catch (error) {
                console.error("Error building leaderboard image:", error);
                await interaction.editReply({ content: 'üëë ƒê√£ x·∫£y ra l·ªói khi t·∫°o b·∫£ng x·∫øp h·∫°ng. Vui l√≤ng th·ª≠ l·∫°i sau.', ephemeral: true });
            }
        }
        
         else if (subcommand === 'user') {
            const memberRank = validPlayers.find(player => player.username === member.user.username);

            if (validPlayers.length === 0 || !memberRank) {
                const embed = new EmbedBuilder()
                    .setColor('Green')
                    .setDescription(`üëë ${member} Ch∆∞a nh·∫≠n ƒë∆∞·ª£c XP n√†o, h√£y th·ª≠ l·∫°i khi ${member} tr√≤ chuy·ªán th√™m m·ªôt ch√∫t.`);
                return await interaction.reply({ embeds: [embed] });
            }

            await interaction.deferReply();

            try {
                const displayName = memberRank.displayName;
                const username = memberRank.username;
                const currentXP = memberRank.xp;
                const requiredXP = (memberRank.level * memberRank.level * 20) + 20;
                const level = memberRank.level;
                // const rank = validPlayers.findIndex(player => player.username === username) + 1; // ƒê·∫∑t rank l√† ch·ªâ s·ªë + 1 levelSchema

                const userRankData = await levelSchema.findOne({ User: member.user.id, Guild: interaction.guild.id });
                const rank = userRankData ? userRankData.Rank : 0; // N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu, ƒë·∫∑t rank m·∫∑c ƒë·ªãnh l√† 0

                const canvas = createCanvas(1000, 300);
                const ctx = canvas.getContext('2d');

                // // T·∫£i ·∫£nh n·ªÅn
                // const background = await loadImage('https://i.imgur.com/tNTVr9o.jpeg');
                // ctx.drawImage(background, 0, 0, canvas.width, canvas.height);

                // V·∫Ω n·ªÅn m√†u #3F3E3E
                ctx.fillStyle = "rgb(63, 62, 62);";
                ctx.fillRect(0, 0, 1000, 300);

                // ƒê·ªãnh nghƒ©a ƒë∆∞·ªùng ch√©o
                const startX = 800, startY = 300; // ƒêi·ªÉm cu·ªëi tr√™n canvas
                const endX = 600, endY = 0; // ƒêi·ªÉm ƒë·∫ßu tr√™n canvas 
                const ƒë∆∞·ªùng_vi·ªÅn_ch√©o = 0; // ƒê·ªô d√†y vi·ªÅn ƒë∆∞·ªùng ch√©o

                // T√¥ m√†u ph·∫ßn b√™n ph·∫£i ƒë∆∞·ªùng ch√©o
                ctx.beginPath();
                ctx.moveTo(startX, startY);
                ctx.lineTo(startX, 300);
                ctx.lineTo(1000, 300);
                ctx.lineTo(1000, endY);
                ctx.lineTo(endX, endY);
                ctx.closePath();
                ctx.fillStyle = "rgb(0, 255, 246);";
                ctx.fill();

                // v·∫Ω h√¨nh m√°y ·∫£nh
                // T·ªça ƒë·ªô ƒë·ªÉ b·∫°n c√≥ th·ªÉ thay ƒë·ªïi v·ªã tr√≠ c·ªßa camera
                const cameraX = 780;  // V·ªã tr√≠ ngang (ƒëi·ªÅu ch·ªânh ƒë·ªÉ sang tr√°i/ph·∫£i) 820
                const cameraY = 40;   // V·ªã tr√≠ d·ªçc (ƒëi·ªÅu ch·ªânh ƒë·ªÉ l√™n/xu·ªëng) 50

                // V·∫Ω th√¢n m√°y ·∫£nh (h√¨nh ch·ªØ nh·∫≠t bo g√≥c)
                const cameraWidth = 120, cameraHeight = 80, cornerRadius = 15;
                ctx.beginPath();
                ctx.moveTo(cameraX + cornerRadius, cameraY);
                ctx.lineTo(cameraX + cameraWidth - cornerRadius, cameraY);
                ctx.arcTo(cameraX + cameraWidth, cameraY, cameraX + cameraWidth, cameraY + cornerRadius, cornerRadius);
                ctx.lineTo(cameraX + cameraWidth, cameraY + cameraHeight - cornerRadius);
                ctx.arcTo(cameraX + cameraWidth, cameraY + cameraHeight, cameraX + cameraWidth - cornerRadius, cameraY + cameraHeight, cornerRadius);
                ctx.lineTo(cameraX + cornerRadius, cameraY + cameraHeight);
                ctx.arcTo(cameraX, cameraY + cameraHeight, cameraX, cameraY + cameraHeight - cornerRadius, cornerRadius);
                ctx.lineTo(cameraX, cameraY + cornerRadius);
                ctx.arcTo(cameraX, cameraY, cameraX + cornerRadius, cameraY, cornerRadius);
                ctx.closePath();
                ctx.fillStyle = "rgb(20, 20, 20)"; // M√†u th√¢n m√°y ·∫£nh
                ctx.fill();

                // V·∫Ω vƒÉn b·∫£n
                ctx.fillStyle = "rgb(59, 59, 59)";
                ctx.font = '20px Arial';
                ctx.fillText(`WEDDING - MAKEUP - EVENT\n¬†¬†¬†NH·∫¨N ƒê√ÄO T·∫†O H·ªåC VI√äN`, 710, 160);
                ctx.fillText(`STUDIO: BRB STUDIO`, 745, 220);
                ctx.fillText(`PHONE: 0818.25.04.88`, 780, 260);

                // V·∫Ω ·ªëng k√≠nh (h√¨nh tr√≤n l·ªõn)
                const lensX = cameraX + cameraWidth / 2;
                const lensY = cameraY + cameraHeight / 2;
                const lensRadius = 25;
                ctx.beginPath();
                ctx.arc(lensX, lensY, lensRadius, 0, Math.PI * 2);
                ctx.closePath();
                ctx.fillStyle = "rgb(100, 200, 255)"; // M√†u xanh d∆∞∆°ng
                ctx.fill();

                // V·∫Ω vi·ªÅn ngo√†i c·ªßa ·ªëng k√≠nh
                ctx.beginPath();
                ctx.arc(lensX, lensY, lensRadius + 5, 0, Math.PI * 2);
                ctx.closePath();
                ctx.strokeStyle = "rgb(255, 255, 255)";
                ctx.lineWidth = 3;
                ctx.stroke();

                // V·∫Ω n√∫t ch·ª•p ·∫£nh (h√¨nh tr√≤n nh·ªè ph√≠a tr√™n)
                const buttonX = cameraX + cameraWidth - 20;
                const buttonY = cameraY - 10;
                const buttonRadius = 8;
                ctx.beginPath();
                ctx.arc(buttonX, buttonY, buttonRadius, 0, Math.PI * 2);
                ctx.closePath();
                ctx.fillStyle = "rgb(150, 150, 150)"; // M√†u x√°m
                ctx.fill();

                // V·∫Ω ƒë√®n flash (h√¨nh ch·ªØ nh·∫≠t nh·ªè b√™n g√≥c)
                const flashX = cameraX + 10;
                const flashY = cameraY + 10;
                const flashWidth = 20, flashHeight = 8;
                ctx.beginPath();
                ctx.rect(flashX, flashY, flashWidth, flashHeight);
                ctx.fillStyle = "rgb(255, 255, 0)"; // M√†u v√†ng
                ctx.fill();
                //////////

                // V·∫Ω vi·ªÅn ƒë∆∞·ªùng ch√©o
                ctx.beginPath();
                ctx.moveTo(startX, startY);
                ctx.lineTo(endX, endY);
                ctx.fillStyle = "#3F3E3E";
                ctx.lineWidth = ƒë∆∞·ªùng_vi·ªÅn_ch√©o;
                ctx.strokeStyle = "rgb(0, 255, 246);"; // M√†u vi·ªÅn ƒë∆∞·ªùng ch√©o
                ctx.stroke();
                ctx.closePath();

                // v·∫Ω avatar
                const avatarURL = member.user.displayAvatarURL({ extension: 'png', size: 256 });
                const avatarImg = await loadImage(avatarURL);

                // ƒêi·ªÅu ch·ªânh v·ªã tr√≠ v√† k√≠ch th∆∞·ªõc khung tr√≤n
                const avatarX = 60;  // T·ªça ƒë·ªô X c·ªßa avatar
                const avatarY = 50;  // T·ªça ƒë·ªô Y c·ªßa avatar
                const avatarSize = 200; // K√≠ch th∆∞·ªõc avatar (chi·ªÅu r·ªông & chi·ªÅu cao)
                const avatarRadius = avatarSize / 2; // B√°n k√≠nh khung tr√≤n
                const borderThickness = 4; // ƒê·ªô d√†y c·ªßa vi·ªÅn
                const borderColor = "rgb(255, 255, 255)"; // M√†u vi·ªÅn (c√≥ th·ªÉ thay ƒë·ªïi)

                // V·∫Ω vi·ªÅn tr√≤n b√™n ngo√†i
                ctx.beginPath();
                ctx.arc(avatarX + avatarRadius, avatarY + avatarRadius, avatarRadius + borderThickness, 0, Math.PI * 2);
                ctx.fillStyle = borderColor;
                ctx.fill();
                ctx.closePath();

                // T·∫°o clip h√¨nh tr√≤n ƒë·ªÉ gi·ªõi h·∫°n avatar
                ctx.save();
                ctx.beginPath();
                ctx.arc(avatarX + avatarRadius, avatarY + avatarRadius, avatarRadius, 0, Math.PI * 2);
                ctx.closePath();
                ctx.clip();

                // V·∫Ω avatar v√†o trong khung tr√≤n
                ctx.drawImage(avatarImg, avatarX, avatarY, avatarSize, avatarSize);

                // Kh√¥i ph·ª•c tr·∫°ng th√°i canvas
                ctx.restore();

                // V·∫Ω l·∫°i vi·ªÅn ngo√†i ƒë·ªÉ l√†m n·ªïi b·∫≠t
                ctx.beginPath();
                ctx.arc(avatarX + avatarRadius, avatarY + avatarRadius, avatarRadius + borderThickness, 0, Math.PI * 2);
                ctx.lineWidth = borderThickness;
                ctx.strokeStyle = borderColor;
                ctx.stroke();
                ctx.closePath();

                // V·∫Ω vƒÉn b·∫£n
                ctx.fillStyle = '#FFFFFF';
                ctx.font = '30px Arial';
                ctx.fillText(`${displayName}`, 280, 80);
                ctx.fillText(`üèÜ Rank: #${rank}`, 280, 140);
                ctx.fillText(`üìä LV: ${level}`, 280, 180);
                ctx.fillText(`üí° EXP: ${currentXP}/${requiredXP}`, 280, 220);

                // V·∫Ω ƒë∆∞·ªùng k·∫ª ngang d∆∞·ªõi t√™n ng∆∞·ªùi d√πng
                ctx.beginPath();
                ctx.moveTo(260, 90); // V·ªã tr√≠ b·∫Øt ƒë·∫ßu c·ªßa ƒë∆∞·ªùng k·∫ª 1
                ctx.lineTo(550, 90); // V·ªã tr√≠ k·∫øt th√∫c c·ªßa ƒë∆∞·ªùng k·∫ª 1
                ctx.lineWidth = 1; // ƒê·ªô d√†y c·ªßa ƒë∆∞·ªùng k·∫ª
                ctx.strokeStyle = 'rgb(67, 183, 183);'; // M√†u s·∫Øc ƒë∆∞·ªùng k·∫ª
                ctx.stroke(); // V·∫Ω ƒë∆∞·ªùng k·∫ª

                // V·∫Ω thanh ti·∫øn tr√¨nh
                const progressBarX = 240; // V·ªã tr√≠ X c·ªßa thanh ti·∫øn tr√¨nh
                const progressBarY = 240; // V·ªã tr√≠ Y c·ªßa thanh ti·∫øn tr√¨nh
                const progressBarWidth = 500; // Chi·ªÅu r·ªông c·ªßa thanh ti·∫øn tr√¨nh
                const progressBarHeight = 30; // Chi·ªÅu cao c·ªßa thanh ti·∫øn tr√¨nh
                const progressBarRadius = 15; // B√°n k√≠nh bo g√≥c
                const progressBarBackgroundColor = 'rgb(50, 50, 50)'; // M√†u n·ªÅn thanh ti·∫øn tr√¨nh
                const progressBarFillColor = 'rgb(67, 183, 183)'; // M√†u thanh ti·∫øn tr√¨nh

                // V·∫Ω n·ªÅn thanh ti·∫øn tr√¨nh
                ctx.beginPath();
                ctx.moveTo(progressBarX + progressBarRadius, progressBarY);
                ctx.arcTo(progressBarX + progressBarWidth, progressBarY, progressBarX + progressBarWidth, progressBarY + progressBarHeight, progressBarRadius);
                ctx.arcTo(progressBarX + progressBarWidth, progressBarY + progressBarHeight, progressBarX, progressBarY + progressBarHeight, progressBarRadius);
                ctx.arcTo(progressBarX, progressBarY + progressBarHeight, progressBarX, progressBarY, progressBarRadius);
                ctx.arcTo(progressBarX, progressBarY, progressBarX + progressBarWidth, progressBarY, progressBarRadius);
                ctx.closePath();
                ctx.fillStyle = progressBarBackgroundColor;
                ctx.fill();

                // const progressWidth = Math.min((currentXP / requiredXP) * 100, progressBarWidth);

                // Chia thanh ti·∫øn tr√¨nh th√†nh 20 ph·∫ßn
const progressStep = requiredXP / 20;

// X√°c ƒë·ªãnh s·ªë b·∫≠c m√† ng∆∞·ªùi ch∆°i ƒë√£ ƒë·∫°t ƒë∆∞·ª£c
const progressLevel = Math.floor(currentXP / progressStep);

// T√≠nh to√°n chi·ªÅu r·ªông c·ªßa thanh ti·∫øn tr√¨nh d·ª±a tr√™n s·ªë b·∫≠c ƒë√£ ƒë·∫°t ƒë∆∞·ª£c
const progressWidth = Math.min((progressLevel / 20) * progressBarWidth, progressBarWidth);






                // n·∫øu currentXP = 598905, requiredXP = 19960040 v√† progressBarWidth = 500 th√¨ px s·∫Ω b·∫±ng 15.00260019518999
                // const rawProgressWidth = (currentXP / requiredXP) * progressBarWidth;
                // const progressWidth = rawProgressWidth >= 15.00260019518999 ? Math.min(rawProgressWidth, progressBarWidth) : 0;

// // V·∫Ω thanh ti·∫øn tr√¨nh (ƒëo theo XP)
// const minProgressWidth = 15; // Gi√° tr·ªã t·ªëi thi·ªÉu ƒë·ªÉ thanh kh√¥ng b·ªã m√©o
// const progressRatio = currentXP / requiredXP;
// const progressWidth = Math.max(minProgressWidth, Math.min(progressRatio * progressBarWidth, progressBarWidth));




                ctx.beginPath();
                ctx.moveTo(progressBarX, progressBarY + progressBarRadius);
                ctx.arcTo(progressBarX, progressBarY, progressBarX + progressWidth, progressBarY, progressBarRadius);
                ctx.arcTo(progressBarX + progressWidth, progressBarY, progressBarX + progressWidth, progressBarY + progressBarHeight, progressBarRadius);
                ctx.arcTo(progressBarX + progressWidth, progressBarY + progressBarHeight, progressBarX, progressBarY + progressBarHeight, progressBarRadius);
                ctx.arcTo(progressBarX, progressBarY + progressBarHeight, progressBarX, progressBarY, progressBarRadius);
                ctx.closePath();
                ctx.fillStyle = progressBarFillColor;
                ctx.fill();

                // Th√™m ch·ªØ v√†o n·ªÅn thanh ti·∫øn tr√¨nh
                const text = "BRB Studio";

                // Ch·ªânh v·ªã tr√≠ ch·ªØ b·∫±ng c√°ch thay ƒë·ªïi gi√° tr·ªã c·ªßa textX
                // ƒê·ªÉ ch·ªânh ch·ªØ sang tr√°i ho·∫∑c ph·∫£i, ch·ªâ c·∫ßn thay ƒë·ªïi gi√° tr·ªã c·ªßa textX.
                let textX = progressBarX + progressBarWidth / 2 - ctx.measureText(text).width / 2; // CƒÉn gi·ªØa ch·ªØ
                // N·∫øu mu·ªën di chuy·ªÉn ch·ªØ sang tr√°i:
                textX += 230; // Gi·∫£m gi√° tr·ªã c·ªßa textX ƒë·ªÉ ch·ªØ l·ªách sang tr√°i
                // N·∫øu mu·ªën di chuy·ªÉn ch·ªØ sang ph·∫£i:
                // textX += 50; // TƒÉng gi√° tr·ªã c·ªßa textX ƒë·ªÉ ch·ªØ l·ªách sang ph·∫£i

                // Ch·ªânh v·ªã tr√≠ ch·ªØ theo chi·ªÅu d·ªçc (ƒëi·ªÅu ch·ªânh l√™n xu·ªëng)
                let textY = progressBarY + progressBarHeight / 2 + 10; // ƒê·∫∑t ch·ªØ ·ªü gi·ªØa chi·ªÅu cao thanh ti·∫øn tr√¨nh
                // N·∫øu mu·ªën di chuy·ªÉn ch·ªØ l√™n:
                textY -= 5; // Gi·∫£m gi√° tr·ªã c·ªßa textY ƒë·ªÉ ch·ªØ l√™n tr√™n
                // N·∫øu mu·ªën di chuy·ªÉn ch·ªØ xu·ªëng:
                // textY += 10; // TƒÉng gi√° tr·ªã c·ªßa textY ƒë·ªÉ ch·ªØ xu·ªëng d∆∞·ªõi

                ctx.fillStyle = 'rgb(255, 255, 255)'; // M√†u ch·ªØ
                ctx.font = '15px Roboto';
                ctx.fillText(text, textX, textY); // V·∫Ω ch·ªØ
                
                // Xu·∫•t ·∫£nh
                const attachment = new AttachmentBuilder(canvas.toBuffer(), { name: 'rank-card.png' });

                await interaction.editReply({ files: [attachment] });
                
            } catch (error) {
                console.error("Error building rank card:", error);
                await interaction.editReply({ content: '‚ö†Ô∏è ƒê√£ x·∫£y ra l·ªói khi t·∫°o th·∫ª x·∫øp h·∫°ng. Vui l√≤ng th·ª≠ l·∫°i sau.', ephemeral: true });
            }
        } 

        else if (subcommand === 'setup-level') {
            const guildOwner = await interaction.guild.fetchOwner();
            if (interaction.user.id !== guildOwner.id) {
                return await interaction.reply({ content: 'L·ªánh n√†y ch·ªâ d√†nh cho ch·ªß s·ªü h·ªØu.', ephemeral: true });
            }

            const channel1 = options.getChannel('channel1');
            const level1 = options.getInteger('level1');
            const channel2 = options.getChannel('channel2');
            const level2 = options.getInteger('level2');
            const channel3 = options.getChannel('channel3');
            const level3 = options.getInteger('level3');
        
            // Ki·ªÉm tra c·∫•p ƒë·ªô c√≥ ƒë√∫ng th·ª© t·ª± hay kh√¥ng
            if (!(level1 > level2 && level2 > level3)) {
                const embed = new EmbedBuilder()
                    .setColor('Red')
                    .setDescription('‚ö†Ô∏è C√°c c·∫•p ƒë·ªô c·∫ßn ƒë∆∞·ª£c s·∫Øp x·∫øp theo th·ª© t·ª± t·ª´ cao ƒë·∫øn th·∫•p.\n\nVui l√≤ng nh·∫≠p l·∫°i l·ªánh v·ªõi c·∫•p ƒë·ªô ƒë√∫ng th·ª© t·ª±.');
                return await interaction.reply({ embeds: [embed], ephemeral: true });
            }
        
            try {
                // C·∫≠p nh·∫≠t d·ªØ li·ªáu v√†o MongoDB
                await levelSchema.findOneAndUpdate(
                    { Guild: guild.id },
                    {
                        $set: {
                            "Channels": {
                                channel1: channel1.id,
                                channel2: channel2.id,
                                channel3: channel3.id
                            },
                            "Levels": {
                                level1: level1,
                                level2: level2,
                                level3: level3
                            }
                        }
                    },
                    { upsert: true, new: true }
                );
        
                const embed = new EmbedBuilder()
                    .setColor('Green')
                    .setTitle('üìä Thi·∫øt l·∫≠p quy·ªÅn c·∫•p ƒë·ªô th√†nh c√¥ng!')
                    .addFields(
                        { name: 'üîπ K√™nh c·∫•p ƒë·ªô 1', value: `${channel1} (C·∫ßn C·∫•p ƒë·ªô ${level1})`, inline: true },
                        { name: 'üîπ K√™nh c·∫•p ƒë·ªô 2', value: `${channel2} (C·∫ßn C·∫•p ƒë·ªô ${level2})`, inline: true },
                        { name: 'üîπ K√™nh c·∫•p ƒë·ªô 3', value: `${channel3} (C·∫ßn C·∫•p ƒë·ªô ${level3})`, inline: true }
                    );
        
                return await interaction.reply({ embeds: [embed] });
            } catch (error) {
                console.error('L·ªói khi thi·∫øt l·∫≠p quy·ªÅn:', error);
                return await interaction.reply({ content: '‚ö†Ô∏è ƒê√£ x·∫£y ra l·ªói khi thi·∫øt l·∫≠p quy·ªÅn. Vui l√≤ng th·ª≠ l·∫°i!', ephemeral: true });
            }
        }
    }
}