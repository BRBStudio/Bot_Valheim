const { SlashCommandSubcommandBuilder, ChannelType } = require('discord.js');

module.exports = {
    data: new SlashCommandSubcommandBuilder()
        .setName('create')
        .setDescription('T·∫°o s·ª± ki·ªán ph√°t tr·ª±c ti·∫øp tr√™n Discord')
        .addStringOption(o => o
            .setName('tensukien')
            .setDescription('Nh·∫≠p ch·ªß ƒë·ªÅ s·ª± ki·ªán')
            .setRequired(true))
        .addStringOption(o => o
            .setName('mota')
            .setDescription('M√¥ t·∫£ s·ª± ki·ªán')
            .setRequired(true))
        .addStringOption(o => o
            .setName('thoigian')
            .setDescription('Th·ªùi gian b·∫Øt ƒë·∫ßu, ghi r√µ gi·ªù v√† ng√†y theo ƒë√∫ng ƒë·ªãnh d·∫°ng (vd: 01:24 16-05-2025 ho·∫∑c 1:24 16/5/2025)')
            .setRequired(true))
        .addStringOption(o => o
            .setName('noitochuc')
            .setDescription('Ch·ªçn n∆°i s·ª± ki·ªán di·ªÖn ra')
            .addChoices(
                { name: 'K√™nh tho·∫°i (Voice)', value: 'VOICE' },
                { name: 'K√™nh s√¢n kh·∫•u (Stage)', value: 'STAGE' },
                { name: 'Ngo√†i Discord (External)', value: 'EXTERNAL' },
                { name: 'Livestream (YouTube/Twitch)', value: 'LIVESTREAM' }
            )
            .setRequired(true))
        .addChannelOption(o => o
            .setName('kenh')
            .setDescription('ƒê·ªãa ƒëi·ªÉm di·ªÖn ra s·ª± ki·ªán ( d√†nh cho n∆°i di·ªÖn ra s·ª± ki·ªán nh∆∞ voice ho·∫∑c s√¢n kh·∫•u )')
            .addChannelTypes(ChannelType.GuildVoice, ChannelType.GuildStageVoice)
            .setRequired(false))
        .addStringOption(o => o
            .setName('diadiem')
            .setDescription('ƒê·ªãa ƒëi·ªÉm di·ªÖn ra s·ª± ki·ªán ( d√†nh cho n∆°i di·ªÖn ra s·ª± ki·ªán nh∆∞ ngo√†i Discord )')
            .setRequired(false))
        .addStringOption(o => o
            .setName('link')
            .setDescription('Link livestream YouTube ( d√†nh ri√™ng cho l·ª±a ch·ªçn Livestream (YouTube/Twitch) ) ')
            .setRequired(false))
        .addAttachmentOption(o => o
            .setName('hinhanh')
            .setDescription('·∫¢nh minh h·ªça cho s·ª± ki·ªán')
            .setRequired(false)),

    async execute(interaction) {
        await interaction.deferReply({ ephemeral: true });
        

        // if (!interaction.guild.features.includes('COMMUNITY')) {
        //     return interaction.reply({
        //     content: '‚ùå M√°y ch·ªß n√†y ch∆∞a b·∫≠t t√≠nh nƒÉng **C·ªông ƒë·ªìng** n√™n kh√¥ng th·ªÉ t·∫°o s·ª± ki·ªán. B·∫°n c√≥ th·ªÉ b·∫≠t t·∫°i: **Server Settings > Enable Community** ( c√†i ƒë·∫∑t m√°y ch·ªß > K√≠ch ho·∫°t c·ªông ƒë·ªìng ).',
        //     ephemeral: true,
        //     });
        // }

        const name = interaction.options.getString('tensukien');
        const type = interaction.options.getString('noitochuc');
        const channel = interaction.options.getChannel('kenh');
        const location = interaction.options.getString('diadiem');
        const description = interaction.options.getString('mota');
        const timeStr = interaction.options.getString('thoigian');
        const imageAttachment = interaction.options.getAttachment('hinhanh');
        const livestreamLink = interaction.options.getString('link');

        // Parse th·ªùi gian
        // const timeRegex = /^(\d{1,2}):(\d{2}) (\d{1,2})-(\d{1,2})-(\d{4})$/;
        const timeRegex = /^(\d{1,2}):(\d{1,2}) (\d{1,2})[-\/](\d{1,2})[-\/](\d{4})$/;
        const match = timeStr.match(timeRegex);

        if (!match) {
            return interaction.editReply({
                content: '‚ùå ƒê·ªãnh d·∫°ng th·ªùi gian kh√¥ng h·ª£p l·ªá. H√£y d√πng ƒë·ªãnh d·∫°ng: `01:24 16-05-2025` ho·∫∑c `1:24 16-5-2025`',
                ephemeral: true,
            });
        }

        const [, hour, minute, day, month, year] = match.map(Number);
        const startTime = new Date(year, month - 1, day, hour, minute);

        // Ki·ªÉm tra th·ªùi gian h·ª£p l·ªá
        if (isNaN(startTime.getTime()) || startTime < new Date()) {
            return interaction.editReply({
                content: '‚ùå Th·ªùi gian b·∫Øt ƒë·∫ßu kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ qua. H√£y ki·ªÉm tra l·∫°i.',
                ephemeral: true,
            });
        }

        // Format ng√†y gi·ªù th√†nh ti·∫øng Vi·ªát <t:${Math.floor(startTime.getTime() / 1000)}:F>
        const weekdays = ['Ch·ªß nh·∫≠t', 'Th·ª© 2', 'Th·ª© 3', 'Th·ª© 4', 'Th·ª© 5', 'Th·ª© 6', 'Th·ª© 7'];
        const weekday = weekdays[startTime.getDay()];
        const dd = startTime.getDate();
        const mm = startTime.getMonth() + 1;
        const yyyy = startTime.getFullYear();
        const hh = startTime.getHours().toString().padStart(2, '0');
        const min = startTime.getMinutes().toString().padStart(2, '0');
        const formattedDate = `${weekday}, ng√†y ${dd} th√°ng ${mm} nƒÉm ${yyyy} l√∫c ${hh}:${min}`;

        // X√°c ƒë·ªãnh lo·∫°i s·ª± ki·ªán
        let entityType;

        const createdAt = new Date().toLocaleString('vi-VN');

        let options = {
            name: `Ch·ªß ƒë·ªÅ: ${name}`,
            description: `N·ªôi dung s·ª± ki·ªán: ${description}\n\nüë§ ${interaction.member?.displayName || interaction.user.tag} ƒë√£ t·∫°o s·ª± ki·ªán n√†y b·∫±ng l·ªánh /events_online create (l√∫c ${createdAt})`,
            scheduledStartTime: startTime,
            privacyLevel: 2,
            reason: `T·∫°o b·ªüi /events_online create c·ªßa ${interaction.member?.displayName || interaction.user.tag}`,
        };

        if (type === 'VOICE') {
            entityType = 2;

            if (!channel || channel.type !== ChannelType.GuildVoice) {
                return interaction.editReply({ content: '‚ùå B·∫°n ph·∫£i ch·ªçn k√™nh tho·∫°i h·ª£p l·ªá.', ephemeral: true });
            }

            if (location || livestreamLink) {
                return interaction.editReply({ content: '‚ùå Kh√¥ng ƒë∆∞·ª£c nh·∫≠p ƒë·ªãa ƒëi·ªÉm ho·∫∑c link cho s·ª± ki·ªán tho·∫°i.', ephemeral: true });
            }

            options.entityType = entityType;
            options.channel = channel.id;

        } else if (type === 'STAGE') {
            entityType = 1;
            
            if (!channel || channel.type !== ChannelType.GuildStageVoice) {
                return interaction.editReply({ content: '‚ùå B·∫°n ph·∫£i ch·ªçn k√™nh s√¢n kh·∫•u h·ª£p l·ªá.', ephemeral: true });
            }

            if (location || livestreamLink) {
                return interaction.editReply({ content: '‚ùå Kh√¥ng ƒë∆∞·ª£c nh·∫≠p ƒë·ªãa ƒëi·ªÉm ho·∫∑c link cho s·ª± ki·ªán s√¢n kh·∫•u.', ephemeral: true });
            }

            options.entityType = entityType;
            options.channel = channel.id;

        } else if (type === 'EXTERNAL') {
            entityType = 3;

            if (!location) {
                return interaction.editReply({ content: '‚ùå B·∫°n c·∫ßn cung c·∫•p ƒë·ªãa ƒëi·ªÉm di·ªÖn ra s·ª± ki·ªán.', ephemeral: true });
            }

            if (channel || livestreamLink) {
                return interaction.editReply({ content: '‚ùå Kh√¥ng ƒë∆∞·ª£c ch·ªçn k√™nh ho·∫∑c nh·∫≠p link cho s·ª± ki·ªán ngo√†i Discord.', ephemeral: true });
            }

            const endTime = new Date(startTime.getTime() + 60 * 60 * 1000); // M·∫∑c ƒë·ªãnh k√©o d√†i 1 gi·ªù
            options.entityType = entityType;
            options.entityMetadata = { location };
            options.scheduledEndTime = endTime;

        } else if (type === 'LIVESTREAM') {
            if (!livestreamLink || !livestreamLink.startsWith('http')) {
                return interaction.editReply({ content: '‚ùå B·∫°n c·∫ßn nh·∫≠p link livestream h·ª£p l·ªá.', ephemeral: true });
            }

            if (channel || location) {
                return interaction.editReply({ content: '‚ùå Kh√¥ng ƒë∆∞·ª£c ch·ªçn k√™nh ho·∫∑c nh·∫≠p ƒë·ªãa ƒëi·ªÉm cho s·ª± ki·ªán livestream.', ephemeral: true });
            }

            entityType = 3;
            options.entityType = entityType;
            options.entityMetadata = { location: livestreamLink };
            options.scheduledEndTime = new Date(startTime.getTime() + 60 * 60 * 1000);
        }

        // N·∫øu c√≥ ·∫£nh
        if (imageAttachment) {
            try {
                const response = await fetch(imageAttachment.url);
                const buffer = await response.arrayBuffer();
                options.image = Buffer.from(buffer);
            } catch (e) {
                return interaction.editReply({ content: '‚ùå ·∫¢nh kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng t·∫£i ƒë∆∞·ª£c.', ephemeral: true });
            }
        }

        try {
            const event = await interaction.guild.scheduledEvents.create(options);

        // T·∫°o ho·∫∑c l·∫•y m·ªôt invite (n·∫øu ch∆∞a c√≥)
        let invite = null;
        const systemChannel = interaction.guild.systemChannel || interaction.guild.channels.cache.find(
            c => c.type === ChannelType.GuildText && c.permissionsFor(interaction.guild.members.me).has(PermissionsBitField.Flags.CreateInstantInvite)
        );

        if (systemChannel) {
            invite = await systemChannel.createInvite({ maxAge: 0, maxUses: 0, reason: 'T·∫°o ƒë·ªÉ chia s·∫ª s·ª± ki·ªán' });
        }

        const link = invite
            ? `https://discord.gg/${invite.code}?event=${event.id}`
            : `S·ª± ki·ªán ƒë√£ t·∫°o th√†nh c√¥ng nh∆∞ng kh√¥ng th·ªÉ t·∫°o link chia s·∫ª do thi·∫øu quy·ªÅn t·∫°o invite.`;

            await interaction.editReply({ content: `‚úÖ ƒê√£ t·∫°o s·ª± ki·ªán: **${event.name}** b·∫Øt ƒë·∫ßu v√†o ${formattedDate}\nüîó Sao ch√©p link ƒë·ªÉ m·ªùi m·ªçi ng∆∞·ªùi tham gia s·ª± ki·ªán c·ªßa b·∫°n. Li√™n k·∫øt n√†y c≈©ng l√† li√™n k·∫øt m·ªùi v√†o m√°y ch·ªß: ${link}`, ephemeral: true });
        } catch (err) {
            console.error('L·ªói t·∫°o s·ª± ki·ªán:', err);
            await interaction.editReply({
                content: '‚ùå L·ªói khi t·∫°o s·ª± ki·ªán. H√£y ki·ªÉm tra l·∫°i quy·ªÅn bot v√† ƒë·∫ßu v√†o.',
                ephemeral: true,
            });
        }
    }
};