// const { SlashCommandBuilder, EmbedBuilder, AttachmentBuilder, PermissionsBitField } = require('discord.js');
// const levelSchema = require('../../schemas/messagelevelSchema');
// const path = require('path');
// const fs = require('fs');
// const CommandStatus = require('../../schemas/Command_Status');
// const { createCanvas, loadImage } = require('canvas');

// module.exports = {
//     data: new SlashCommandBuilder()
//         .setName('rank_m')
//         .setDescription('üîπ Nh·∫≠n th·ª© h·∫°ng th√†nh vi√™n trong m√°y ch·ªß')
//         .addSubcommand(subcommand =>
//             subcommand
//                 .setName('user')
//                 .setDescription('üîπ Xem th·ª© h·∫°ng c·ªßa m·ªôt th√†nh vi√™n c·ª• th·ªÉ')
//                 .addUserOption(option => option.setName('user').setDescription('Th√†nh vi√™n c√≥ th·ª© h·∫°ng b·∫°n mu·ªën ki·ªÉm tra').setRequired(true))
//         )
//         .addSubcommand(subcommand =>
//             subcommand
//                 .setName('all')
//                 .setDescription('üîπ Xem danh s√°ch 10 ng∆∞·ªùi ƒë·ª©ng ƒë·∫ßu b·∫£ng x·∫øp h·∫°ng')
//         )
//         .addSubcommand(subcommand =>
//             subcommand
//                 .setName('setup-level')
//                 .setDescription('üîπ Thi·∫øt l·∫≠p quy·ªÅn truy c·∫≠p k√™nh d·ª±a tr√™n c·∫•p ƒë·ªô')
//                 .addChannelOption(option => option.setName('channel1').setDescription('K√™nh cho ng∆∞·ªùi ƒë·∫°t level cao nh·∫•t').setRequired(true))
//                 .addIntegerOption(option => option.setName('level1').setDescription('Level c·∫ßn thi·∫øt cho k√™nh 1').setRequired(true))
//                 .addChannelOption(option => option.setName('channel2').setDescription('K√™nh cho ng∆∞·ªùi ƒë·∫°t level cao th·ª© 2').setRequired(true))
//                 .addIntegerOption(option => option.setName('level2').setDescription('Level c·∫ßn thi·∫øt cho k√™nh 2').setRequired(true))
//                 .addChannelOption(option => option.setName('channel3').setDescription('K√™nh cho ng∆∞·ªùi ƒë·∫°t level cao th·ª© 3').setRequired(true))
//                 .addIntegerOption(option => option.setName('level3').setDescription('Level c·∫ßn thi·∫øt cho k√™nh 3').setRequired(true))
//         ),

//     guildSpecific: true,
//     guildId: ['1312185401347407902'], // m√°y ch·ªß Host Vappppo

//     async execute(interaction) {

//         // Ki·ªÉm tra tr·∫°ng th√°i c·ªßa l·ªánh
//         const commandStatus = await CommandStatus.findOne({ command: '/rank' });

//         // N·∫øu l·ªánh ƒëang t·∫Øt, g·ª≠i th√¥ng b√°o v√† kh√¥ng th·ª±c hi·ªán l·ªánh
//         if (commandStatus && commandStatus.status === 'off') {
//             return interaction.reply('L·ªánh n√†y ƒë√£ b·ªã t·∫Øt, vui l√≤ng th·ª≠ l·∫°i sau.');
//         }

//         const { options, user, guild } = interaction;
//         const subcommand = options.getSubcommand();
//         const memberOption = options.getMember('user') || user;
//         const member = guild.members.cache.get(memberOption.id);

//         // L·∫•y d·ªØ li·ªáu c·ªßa 10 ng∆∞·ªùi d√πng t·ª´ c∆° s·ªü d·ªØ li·ªáu
//         const topUsers = await levelSchema.find({ Guild: guild.id }).sort({ XP: -1 }).limit(10);

//         // Truy v·∫•n tr·ª±c ti·∫øp t·ª´ c∆° s·ªü d·ªØ li·ªáu
//         const players = await Promise.all(topUsers.map(async (data, index) => {
//             try {
//                 const cachedMember = await guild.members.fetch(data.User);
//                 const rank = Math.floor(data.Level / 10) + 1; // X√°c ƒë·ªãnh rank d·ª±a tr√™n level
//                 return {
//                     avatar: cachedMember.user.displayAvatarURL({ forceStatic: true }),
//                     username: cachedMember.user.username,
//                     displayName: cachedMember.displayName,
//                     level: data.Level,
//                     xp: data.XP,
//                     rank: rank,
//                 };
//             } catch (error) {
//                 console.error(`üëë Kh√¥ng th·ªÉ t√¨m th·∫•y th√†nh vi√™n v·ªõi ID ${data.User} trong m√°y ch·ªß.`);
//                 return null;
//             }
//         }));

//         const validPlayers = players.filter(player => player !== null);

//         // ƒê∆∞·ªùng d·∫´n ƒë·∫øn h√¨nh ·∫£nh n·ªÅn trong th∆∞ m·ª•c 'anh'
//         const backgroundPath = path.join(__dirname, '../../anh/leaderboard-background5.png');

//         // Ki·ªÉm tra xem t·ªáp c√≥ t·ªìn t·∫°i kh√¥ng
//         if (!fs.existsSync(backgroundPath)) {
//             console.error('Th∆∞ m·ª•c ·∫£nh kh√¥ng t·ªìn t·∫°i:', backgroundPath);
//             return await interaction.reply({ content: 'üëë ƒê√£ x·∫£y ra l·ªói khi t·∫°o b·∫£ng x·∫øp h·∫°ng. Vui l√≤ng th·ª≠ l·∫°i sau.', ephemeral: true });
//         }

//         if (subcommand === 'all') {
//             if (validPlayers.length === 0) {
//                 const embed = new EmbedBuilder()
//                     .setColor('Red')
//                     .setDescription(`üëë Hi·ªán t·∫°i kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã b·∫£ng x·∫øp h·∫°ng.`);
//                 return await interaction.reply({ embeds: [embed] });
//             }
        
//             await interaction.deferReply(); // Tr√¨ ho√£n ph·∫£n h·ªìi ƒë·ªÉ tr√°nh l·ªói h·∫øt th·ªùi gian ch·ªù
        
//             try {
//                 const canvas = createCanvas(1100, 830);
//                 const ctx = canvas.getContext('2d');
        
//                 // H√†m v·∫Ω ·∫£nh n·ªÅn v·ªõi g√≥c bo tr√≤n
//                 async function drawRoundedImage(ctx, img, x, y, width, height, radius) {
//                     ctx.save();
//                     ctx.beginPath();
//                     ctx.moveTo(x + radius, y);
//                     ctx.lineTo(x + width - radius, y);
//                     ctx.quadraticCurveTo(x + width, y, x + width, y + radius);
//                     ctx.lineTo(x + width, y + height - radius);
//                     ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);
//                     ctx.lineTo(x + radius, y + height);
//                     ctx.quadraticCurveTo(x, y + height, x, y + height - radius);
//                     ctx.lineTo(x, y + radius);
//                     ctx.quadraticCurveTo(x, y, x + radius, y);
//                     ctx.closePath();
//                     ctx.clip();
//                     ctx.drawImage(img, x, y, width, height);
//                     ctx.restore();
//                 }
        
//                 try {
//                     const background = await loadImage('https://topanh.com/wp-content/uploads/2024/01/anh-background-cuc-dep_110341116.jpg');
//                     await drawRoundedImage(ctx, background, 0, 0, 1100, 830, 60); // Bo tr√≤n 60px
        
//                     ctx.globalAlpha = 0.7;
//                     const background1 = await loadImage('https://t4.ftcdn.net/jpg/04/92/22/93/240_F_492229389_5ve1bCKgYrLRHpCj3o4FAzz60efaZgG0.jpg');
//                     await drawRoundedImage(ctx, background1, 0, 0, 1100, 830, 60); // Bo tr√≤n 60px
        
//                     ctx.globalAlpha = 1;
//                 } catch (err) {
//                     console.error("L·ªói khi t·∫£i ·∫£nh n·ªÅn:", err);
//                 }
                
//                 // H√†m v·∫Ω khung s·ªë th·ª© t·ª±
//                 function drawRankBox(ctx, x, y, width, height, text) {
//                     ctx.fillStyle = 'rgb(25, 26, 28);';
//                     ctx.beginPath();
//                     ctx.moveTo(x + 10, y);
//                     ctx.lineTo(x + width - 10, y);
//                     ctx.quadraticCurveTo(x + width, y, x + width, y + 10);
//                     ctx.lineTo(x + width, y + height - 10);
//                     ctx.quadraticCurveTo(x + width, y + height, x + width - 10, y + height);
//                     ctx.lineTo(x + 10, y + height);
//                     ctx.quadraticCurveTo(x, y + height, x, y + height - 10);
//                     ctx.lineTo(x, y + 10);
//                     ctx.quadraticCurveTo(x, y, x + 10, y);
//                     ctx.closePath();
//                     ctx.fill();
        
//                     // V·∫Ω text v√†o khung s·ªë th·ª© t·ª±
//                     ctx.fillStyle = 'rgb(255, 255, 255)';
//                     ctx.font = '20px Arial';
//                     const textWidth = ctx.measureText(text).width;
//                     const textX = x + (width - textWidth) / 2;
//                     const textY = y + (height + 20) / 2;
//                     ctx.fillText(text, textX, textY);
//                 }
        
//                 // H√†m v·∫Ω khung th√¥ng tin ng∆∞·ªùi ch∆°i
//                 function drawPlayerInfoBox(ctx, x, y, width, height, text) {
//                     ctx.fillStyle = 'rgb(48, 49, 54);';
//                     ctx.beginPath();
//                     ctx.moveTo(x + 15, y);
//                     ctx.lineTo(x + width - 15, y);
//                     ctx.quadraticCurveTo(x + width, y, x + width, y + 15);
//                     ctx.lineTo(x + width, y + height - 15);
//                     ctx.quadraticCurveTo(x + width, y + height, x + width - 15, y + height);
//                     ctx.lineTo(x + 15, y + height);
//                     ctx.quadraticCurveTo(x, y + height, x, y + height - 15);
//                     ctx.lineTo(x, y + 15);
//                     ctx.quadraticCurveTo(x, y, x + 15, y);
//                     ctx.closePath();
//                     ctx.fill();
        
//                     // V·∫Ω text v√†o khung th√¥ng tin ng∆∞·ªùi ch∆°i
//                     ctx.fillStyle = 'rgb(255, 255, 255)';
//                     ctx.font = '30px Arial';
//                     const textWidth = ctx.measureText(text).width;
//                     const textX = x + (width - textWidth) / 2;
//                     const textY = y + (height + 20) / 2;
//                     ctx.fillText(text, textX, textY);
//                 }
        
//                 ctx.fillStyle = "rgb(255, 255, 255)";
//                 ctx.font = '40px Arial';

//                 // T√≠nh to√°n ƒë·ªô d√†i c·ªßa vƒÉn b·∫£n
//                 const text = `üèÜB·∫¢NG X·∫æP H·∫†NG M√ÅY CH·ª¶ ${guild}üèÜ`;
//                 let textWidth = ctx.measureText(text).width;

//                 // Ki·ªÉm tra n·∫øu ƒë·ªô r·ªông c·ªßa vƒÉn b·∫£n qu√° l·ªõn
//                 const maxWidth = canvas.width - 40; // Gi·ªõi h·∫°n chi·ªÅu r·ªông c·ªßa vƒÉn b·∫£n (40px d·ª± ph√≤ng cho padding)

//                 let truncatedText = text; // Khai b√°o truncatedText tr∆∞·ªõc khi v√†o v√≤ng l·∫∑p

//                 if (textWidth > maxWidth) {
//                     // C·∫Øt vƒÉn b·∫£n n·∫øu qu√° d√†i v√† th√™m "..."
//                     while (textWidth > maxWidth) {
//                         truncatedText = truncatedText.slice(0, -1); // C·∫Øt d·∫ßn k√Ω t·ª± cu·ªëi
//                         textWidth = ctx.measureText(truncatedText + '...').width; // C·∫≠p nh·∫≠t ƒë·ªô d√†i c·ªßa vƒÉn b·∫£n m·ªói l·∫ßn c·∫Øt
//                     }
//                     truncatedText += '...'; // Th√™m d·∫•u "..." v√†o cu·ªëi
//                 }

//                 // T√≠nh to√°n v·ªã tr√≠ X sao cho vƒÉn b·∫£n lu√¥n ·ªü gi·ªØa
//                 const textX = (canvas.width - ctx.measureText(truncatedText).width) / 2;
//                 const textY = 60; // V·ªã tr√≠ Y, gi·ªØ nguy√™n

//                 ctx.fillText(truncatedText, textX, textY);



//                 // ctx.fillText(`üèÜB·∫¢NG X·∫æP H·∫†NG ${guild}üèÜ`, 120, 60);
        
//                 const padding = 12;
//                 const startX = 35;
//                 const startY = 100;

//                 validPlayers.sort((a, b) => {
//                     if (b.level !== a.level) {
//                         return b.level - a.level; // S·∫Øp x·∫øp gi·∫£m d·∫ßn theo level
//                     }
//                     return b.xp - a.xp; // N·∫øu level b·∫±ng nhau, s·∫Øp x·∫øp theo xp
//                 });
        
//                 // // Duy·ªát qua c√°c ng∆∞·ªùi ch∆°i v√† v·∫Ω c√°c khung th√¥ng tin
//                 // validPlayers.forEach((player, index) => {
//                 //     const rankWidth = 60; // khung th·ª© t·ª±
//                 //     const rankHeight = 60;
//                 //     const rankX = startX;
//                 //     const rankY = startY + (index * (rankHeight + padding)); 
        
//                 //     const playerInfoWidth = 1050;
//                 //     const playerInfoHeight = 60;
//                 //     const playerInfoX = 35; // rankX + padding; //  + rankWidth
//                 //     const playerInfoY = rankY + (rankHeight - playerInfoHeight) / 2; 

//                 //     // V·∫Ω khung th√¥ng tin ng∆∞·ªùi ch∆°i
//                 //     drawPlayerInfoBox(
//                 //         ctx, 
//                 //         playerInfoX, 
//                 //         playerInfoY, 
//                 //         playerInfoWidth, 
//                 //         playerInfoHeight, 
//                 //         `${player.displayName}            C·∫•p ƒê·ªô: ${player.level}            Kinh Nghi·ªám: ${player.xp}`); // H·∫°ng ${player.rank} ${player.displayName}
//                 //         // ctx.fillText(`${player.displayName}`, 120, 140);
        
//                 //     // V·∫Ω khung s·ªë th·ª© t·ª±
//                 //     drawRankBox(ctx, rankX, rankY, rankWidth, rankHeight, `${index + 1}`);
        
                    
//                 // });

//                 validPlayers.forEach((player, index) => {
//                     const rankWidth = 60; // K√≠ch th∆∞·ªõc khung th·ª© t·ª±
//                     const rankHeight = 60;
//                     const rankX = startX;
//                     const rankY = startY + (index * (rankHeight + padding));
                
//                     const playerInfoWidth = 1030;
//                     const playerInfoHeight = 60;
//                     const playerInfoX = 35;
//                     const playerInfoY = rankY + (rankHeight - playerInfoHeight) / 2;
                
//                     // V·∫Ω khung th√¥ng tin ng∆∞·ªùi ch∆°i
//                     drawPlayerInfoBox(ctx, playerInfoX, playerInfoY, playerInfoWidth, playerInfoHeight, '');
                
//                     // V·∫Ω khung s·ªë th·ª© t·ª±
//                     drawRankBox(ctx, rankX, rankY, rankWidth, rankHeight, `${index + 1}`);

//                     // C·ªë ƒë·ªãnh v·ªã tr√≠ t·ª´ng ƒëo·∫°n text trong khung th√¥ng tin ng∆∞·ªùi ch∆°i
//                     ctx.fillStyle = 'rgb(255, 255, 255)';
//                     ctx.font = '30px Arial';
//                     ctx.textAlign = "left";
                
//                     // X√°c ƒë·ªãnh v·ªã tr√≠ c√°c c·ªôt
//                     const nameX = playerInfoX + 70; // V·ªã tr√≠ t√™n ng∆∞·ªùi ch∆°i
//                     const levelX = playerInfoX + 560; // V·ªã tr√≠ "LV"
//                     const xpX = playerInfoX + 750; // V·ªã tr√≠ "XP"
//                     const nameY = playerInfoY + 38; // CƒÉn gi·ªØa chi·ªÅu cao khung
                
//                     // C·∫Øt t√™n n·∫øu qu√° d√†i
//                     let playerName = player.displayName;
//                     let maxNameWidth = levelX - nameX - 140; // Kho·∫£ng c√°ch gi·ªØa t√™n v√† "LV"
                
//                     if (ctx.measureText(playerName).width > maxNameWidth) {
//                         while (ctx.measureText(playerName + "...").width > maxNameWidth) {
//                             playerName = playerName.slice(0, -1); // C·∫Øt d·∫ßn k√Ω t·ª± cu·ªëi
//                         }
//                         playerName += "..."; // Th√™m d·∫•u "..." v√†o cu·ªëi
//                     }
                
//                     // V·∫Ω t√™n ng∆∞·ªùi ch∆°i
//                     ctx.fillText(playerName, nameX, nameY);
                
//                     // V·∫Ω c·∫•p ƒë·ªô v√† kinh nghi·ªám
//                     ctx.fillText(`LV: ${player.level}`, levelX, nameY);
//                     ctx.fillText(`XP: ${player.xp}`, xpX, nameY);
//                 });


//                 // validPlayers.forEach((player, index) => {
//                 //     const rankWidth = 60; // K√≠ch th∆∞·ªõc khung th·ª© t·ª±
//                 //     const rankHeight = 60;
//                 //     const rankX = startX;
//                 //     const rankY = startY + (index * (rankHeight + padding));
                
//                 //     const playerInfoWidth = 1030;
//                 //     const playerInfoHeight = 60;
//                 //     const playerInfoX = 35;
//                 //     const playerInfoY = rankY + (rankHeight - playerInfoHeight) / 2;
                
//                 //     // V·∫Ω khung th√¥ng tin ng∆∞·ªùi ch∆°i
//                 //     drawPlayerInfoBox(ctx, playerInfoX, playerInfoY, playerInfoWidth, playerInfoHeight, '');
                
//                 //     // V·∫Ω khung s·ªë th·ª© t·ª±
//                 //     drawRankBox(ctx, rankX, rankY, rankWidth, rankHeight, `${index + 1}`);
                
//                 //     // C·ªë ƒë·ªãnh v·ªã tr√≠ t·ª´ng ƒëo·∫°n text trong khung th√¥ng tin ng∆∞·ªùi ch∆°i
//                 //     ctx.fillStyle = 'rgb(255, 255, 255)';
//                 //     ctx.font = '30px Arial';
//                 //     ctx.textAlign = "left";
                
//                 //     // V·∫Ω t√™n ng∆∞·ªùi ch∆°i ·ªü v·ªã tr√≠ c·ªë ƒë·ªãnh trong khung
//                 //     const nameX = playerInfoX + 70; // C√°ch l·ªÅ tr√°i 10px
//                 //     const nameY = playerInfoY + 38; // CƒÉn gi·ªØa chi·ªÅu cao khung
//                 //     ctx.fillText(player.displayName, nameX, nameY);
                
//                 //     // V·∫Ω c·∫•p ƒë·ªô ·ªü v·ªã tr√≠ c·ªë ƒë·ªãnh
//                 //     const levelX = playerInfoX + 560; // ƒêi·ªÅu ch·ªânh v·ªã tr√≠ ngang
//                 //     ctx.fillText(`LV: ${player.level}`, levelX, nameY);
                
//                 //     // V·∫Ω kinh nghi·ªám ·ªü v·ªã tr√≠ c·ªë ƒë·ªãnh
//                 //     const xpX = playerInfoX + 750; // ƒêi·ªÅu ch·ªânh v·ªã tr√≠ ngang
//                 //     ctx.fillText(`XP: ${player.xp}`, xpX, nameY);
//                 // });
                
        
//                 const attachment = new AttachmentBuilder(canvas.toBuffer(), { name: 'rank-card.png' });
//                 await interaction.editReply({ files: [attachment] });
//             } catch (error) {
//                 console.error("Error building leaderboard image:", error);
//                 await interaction.editReply({ content: 'üëë ƒê√£ x·∫£y ra l·ªói khi t·∫°o b·∫£ng x·∫øp h·∫°ng. Vui l√≤ng th·ª≠ l·∫°i sau.', ephemeral: true });
//             }
//         }
        
//          else if (subcommand === 'user') {
//             const memberRank = validPlayers.find(player => player.username === member.user.username);

//             if (validPlayers.length === 0 || !memberRank) {
//                 const embed = new EmbedBuilder()
//                     .setColor('Green')
//                     .setDescription(`üëë ${member} Ch∆∞a nh·∫≠n ƒë∆∞·ª£c XP n√†o, h√£y th·ª≠ l·∫°i khi ${member} tr√≤ chuy·ªán th√™m m·ªôt ch√∫t.`);
//                 return await interaction.reply({ embeds: [embed] });
//             }

//             await interaction.deferReply();

//             try {
//                 const displayName = memberRank.displayName;
//                 const username = memberRank.username;
//                 const currentXP = memberRank.xp;
//                 const requiredXP = (memberRank.level * memberRank.level * 20) + 20;
//                 const level = memberRank.level;
//                 // const rank = validPlayers.findIndex(player => player.username === username) + 1; // ƒê·∫∑t rank l√† ch·ªâ s·ªë + 1 levelSchema

//                 const userRankData = await levelSchema.findOne({ User: member.user.id, Guild: interaction.guild.id });
//                 const rank = userRankData ? userRankData.Rank : 0; // N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu, ƒë·∫∑t rank m·∫∑c ƒë·ªãnh l√† 0

//                 const canvas = createCanvas(1000, 300);
//                 const ctx = canvas.getContext('2d');

//                 // // T·∫£i ·∫£nh n·ªÅn
//                 // const background = await loadImage('https://i.imgur.com/tNTVr9o.jpeg');
//                 // ctx.drawImage(background, 0, 0, canvas.width, canvas.height);

//                 // V·∫Ω n·ªÅn m√†u #3F3E3E
//                 ctx.fillStyle = "rgb(63, 62, 62);";
//                 ctx.fillRect(0, 0, 1000, 300);

//                 // ƒê·ªãnh nghƒ©a ƒë∆∞·ªùng ch√©o
//                 const startX = 800, startY = 300; // ƒêi·ªÉm cu·ªëi tr√™n canvas
//                 const endX = 600, endY = 0; // ƒêi·ªÉm ƒë·∫ßu tr√™n canvas 
//                 const ƒë∆∞·ªùng_vi·ªÅn_ch√©o = 0; // ƒê·ªô d√†y vi·ªÅn ƒë∆∞·ªùng ch√©o

//                 // T√¥ m√†u ph·∫ßn b√™n ph·∫£i ƒë∆∞·ªùng ch√©o
//                 ctx.beginPath();
//                 ctx.moveTo(startX, startY);
//                 ctx.lineTo(startX, 300);
//                 ctx.lineTo(1000, 300);
//                 ctx.lineTo(1000, endY);
//                 ctx.lineTo(endX, endY);
//                 ctx.closePath();
//                 ctx.fillStyle = "rgb(0, 255, 246);";
//                 ctx.fill();

//                 // v·∫Ω h√¨nh m√°y ·∫£nh
//                 // T·ªça ƒë·ªô ƒë·ªÉ b·∫°n c√≥ th·ªÉ thay ƒë·ªïi v·ªã tr√≠ c·ªßa camera
//                 const cameraX = 780;  // V·ªã tr√≠ ngang (ƒëi·ªÅu ch·ªânh ƒë·ªÉ sang tr√°i/ph·∫£i) 820
//                 const cameraY = 40;   // V·ªã tr√≠ d·ªçc (ƒëi·ªÅu ch·ªânh ƒë·ªÉ l√™n/xu·ªëng) 50

//                 // V·∫Ω th√¢n m√°y ·∫£nh (h√¨nh ch·ªØ nh·∫≠t bo g√≥c)
//                 const cameraWidth = 120, cameraHeight = 80, cornerRadius = 15;
//                 ctx.beginPath();
//                 ctx.moveTo(cameraX + cornerRadius, cameraY);
//                 ctx.lineTo(cameraX + cameraWidth - cornerRadius, cameraY);
//                 ctx.arcTo(cameraX + cameraWidth, cameraY, cameraX + cameraWidth, cameraY + cornerRadius, cornerRadius);
//                 ctx.lineTo(cameraX + cameraWidth, cameraY + cameraHeight - cornerRadius);
//                 ctx.arcTo(cameraX + cameraWidth, cameraY + cameraHeight, cameraX + cameraWidth - cornerRadius, cameraY + cameraHeight, cornerRadius);
//                 ctx.lineTo(cameraX + cornerRadius, cameraY + cameraHeight);
//                 ctx.arcTo(cameraX, cameraY + cameraHeight, cameraX, cameraY + cameraHeight - cornerRadius, cornerRadius);
//                 ctx.lineTo(cameraX, cameraY + cornerRadius);
//                 ctx.arcTo(cameraX, cameraY, cameraX + cornerRadius, cameraY, cornerRadius);
//                 ctx.closePath();
//                 ctx.fillStyle = "rgb(20, 20, 20)"; // M√†u th√¢n m√°y ·∫£nh
//                 ctx.fill();

//                 // V·∫Ω vƒÉn b·∫£n
//                 ctx.fillStyle = "rgb(59, 59, 59)";
//                 ctx.font = '20px Arial';
//                 ctx.fillText(`WEDDING - MAKEUP - EVENT\n¬†¬†¬†NH·∫¨N ƒê√ÄO T·∫†O H·ªåC VI√äN`, 710, 160);
//                 ctx.fillText(`STUDIO: BRB STUDIO`, 745, 220);
//                 ctx.fillText(`PHONE: 0818.25.04.88`, 780, 260);

//                 // V·∫Ω ·ªëng k√≠nh (h√¨nh tr√≤n l·ªõn)
//                 const lensX = cameraX + cameraWidth / 2;
//                 const lensY = cameraY + cameraHeight / 2;
//                 const lensRadius = 25;
//                 ctx.beginPath();
//                 ctx.arc(lensX, lensY, lensRadius, 0, Math.PI * 2);
//                 ctx.closePath();
//                 ctx.fillStyle = "rgb(100, 200, 255)"; // M√†u xanh d∆∞∆°ng
//                 ctx.fill();

//                 // V·∫Ω vi·ªÅn ngo√†i c·ªßa ·ªëng k√≠nh
//                 ctx.beginPath();
//                 ctx.arc(lensX, lensY, lensRadius + 5, 0, Math.PI * 2);
//                 ctx.closePath();
//                 ctx.strokeStyle = "rgb(255, 255, 255)";
//                 ctx.lineWidth = 3;
//                 ctx.stroke();

//                 // V·∫Ω n√∫t ch·ª•p ·∫£nh (h√¨nh tr√≤n nh·ªè ph√≠a tr√™n)
//                 const buttonX = cameraX + cameraWidth - 20;
//                 const buttonY = cameraY - 10;
//                 const buttonRadius = 8;
//                 ctx.beginPath();
//                 ctx.arc(buttonX, buttonY, buttonRadius, 0, Math.PI * 2);
//                 ctx.closePath();
//                 ctx.fillStyle = "rgb(150, 150, 150)"; // M√†u x√°m
//                 ctx.fill();

//                 // V·∫Ω ƒë√®n flash (h√¨nh ch·ªØ nh·∫≠t nh·ªè b√™n g√≥c)
//                 const flashX = cameraX + 10;
//                 const flashY = cameraY + 10;
//                 const flashWidth = 20, flashHeight = 8;
//                 ctx.beginPath();
//                 ctx.rect(flashX, flashY, flashWidth, flashHeight);
//                 ctx.fillStyle = "rgb(255, 255, 0)"; // M√†u v√†ng
//                 ctx.fill();
//                 //////////

//                 // V·∫Ω vi·ªÅn ƒë∆∞·ªùng ch√©o
//                 ctx.beginPath();
//                 ctx.moveTo(startX, startY);
//                 ctx.lineTo(endX, endY);
//                 ctx.fillStyle = "#3F3E3E";
//                 ctx.lineWidth = ƒë∆∞·ªùng_vi·ªÅn_ch√©o;
//                 ctx.strokeStyle = "rgb(0, 255, 246);"; // M√†u vi·ªÅn ƒë∆∞·ªùng ch√©o
//                 ctx.stroke();
//                 ctx.closePath();

//                 // v·∫Ω avatar
//                 const avatarURL = member.user.displayAvatarURL({ extension: 'png', size: 256 });
//                 const avatarImg = await loadImage(avatarURL);

//                 // ƒêi·ªÅu ch·ªânh v·ªã tr√≠ v√† k√≠ch th∆∞·ªõc khung tr√≤n
//                 const avatarX = 60;  // T·ªça ƒë·ªô X c·ªßa avatar
//                 const avatarY = 50;  // T·ªça ƒë·ªô Y c·ªßa avatar
//                 const avatarSize = 200; // K√≠ch th∆∞·ªõc avatar (chi·ªÅu r·ªông & chi·ªÅu cao)
//                 const avatarRadius = avatarSize / 2; // B√°n k√≠nh khung tr√≤n
//                 const borderThickness = 4; // ƒê·ªô d√†y c·ªßa vi·ªÅn
//                 const borderColor = "rgb(255, 255, 255)"; // M√†u vi·ªÅn (c√≥ th·ªÉ thay ƒë·ªïi)

//                 // V·∫Ω vi·ªÅn tr√≤n b√™n ngo√†i
//                 ctx.beginPath();
//                 ctx.arc(avatarX + avatarRadius, avatarY + avatarRadius, avatarRadius + borderThickness, 0, Math.PI * 2);
//                 ctx.fillStyle = borderColor;
//                 ctx.fill();
//                 ctx.closePath();

//                 // T·∫°o clip h√¨nh tr√≤n ƒë·ªÉ gi·ªõi h·∫°n avatar
//                 ctx.save();
//                 ctx.beginPath();
//                 ctx.arc(avatarX + avatarRadius, avatarY + avatarRadius, avatarRadius, 0, Math.PI * 2);
//                 ctx.closePath();
//                 ctx.clip();

//                 // V·∫Ω avatar v√†o trong khung tr√≤n
//                 ctx.drawImage(avatarImg, avatarX, avatarY, avatarSize, avatarSize);

//                 // Kh√¥i ph·ª•c tr·∫°ng th√°i canvas
//                 ctx.restore();

//                 // V·∫Ω l·∫°i vi·ªÅn ngo√†i ƒë·ªÉ l√†m n·ªïi b·∫≠t
//                 ctx.beginPath();
//                 ctx.arc(avatarX + avatarRadius, avatarY + avatarRadius, avatarRadius + borderThickness, 0, Math.PI * 2);
//                 ctx.lineWidth = borderThickness;
//                 ctx.strokeStyle = borderColor;
//                 ctx.stroke();
//                 ctx.closePath();

//                 // V·∫Ω vƒÉn b·∫£n
//                 ctx.fillStyle = '#FFFFFF';
//                 ctx.font = '30px Arial';
//                 ctx.fillText(`${displayName}`, 280, 80);
//                 ctx.fillText(`üèÜ Rank: #${rank}`, 280, 140);
//                 ctx.fillText(`üìä LV: ${level}`, 280, 180);
//                 ctx.fillText(`üí° EXP: ${currentXP}/${requiredXP}`, 280, 220);

//                 // V·∫Ω ƒë∆∞·ªùng k·∫ª ngang d∆∞·ªõi t√™n ng∆∞·ªùi d√πng
//                 ctx.beginPath();
//                 ctx.moveTo(260, 90); // V·ªã tr√≠ b·∫Øt ƒë·∫ßu c·ªßa ƒë∆∞·ªùng k·∫ª 1
//                 ctx.lineTo(550, 90); // V·ªã tr√≠ k·∫øt th√∫c c·ªßa ƒë∆∞·ªùng k·∫ª 1
//                 ctx.lineWidth = 1; // ƒê·ªô d√†y c·ªßa ƒë∆∞·ªùng k·∫ª
//                 ctx.strokeStyle = 'rgb(67, 183, 183);'; // M√†u s·∫Øc ƒë∆∞·ªùng k·∫ª
//                 ctx.stroke(); // V·∫Ω ƒë∆∞·ªùng k·∫ª

//                 // V·∫Ω thanh ti·∫øn tr√¨nh
//                 const progressBarX = 240; // V·ªã tr√≠ X c·ªßa thanh ti·∫øn tr√¨nh
//                 const progressBarY = 240; // V·ªã tr√≠ Y c·ªßa thanh ti·∫øn tr√¨nh
//                 const progressBarWidth = 500; // Chi·ªÅu r·ªông c·ªßa thanh ti·∫øn tr√¨nh
//                 const progressBarHeight = 30; // Chi·ªÅu cao c·ªßa thanh ti·∫øn tr√¨nh
//                 const progressBarRadius = 15; // B√°n k√≠nh bo g√≥c
//                 const progressBarBackgroundColor = 'rgb(50, 50, 50)'; // M√†u n·ªÅn thanh ti·∫øn tr√¨nh
//                 const progressBarFillColor = 'rgb(67, 183, 183)'; // M√†u thanh ti·∫øn tr√¨nh

//                 // V·∫Ω n·ªÅn thanh ti·∫øn tr√¨nh
//                 ctx.beginPath();
//                 ctx.moveTo(progressBarX + progressBarRadius, progressBarY);
//                 ctx.arcTo(progressBarX + progressBarWidth, progressBarY, progressBarX + progressBarWidth, progressBarY + progressBarHeight, progressBarRadius);
//                 ctx.arcTo(progressBarX + progressBarWidth, progressBarY + progressBarHeight, progressBarX, progressBarY + progressBarHeight, progressBarRadius);
//                 ctx.arcTo(progressBarX, progressBarY + progressBarHeight, progressBarX, progressBarY, progressBarRadius);
//                 ctx.arcTo(progressBarX, progressBarY, progressBarX + progressBarWidth, progressBarY, progressBarRadius);
//                 ctx.closePath();
//                 ctx.fillStyle = progressBarBackgroundColor;
//                 ctx.fill();

//                 // const progressWidth = Math.min((currentXP / requiredXP) * 100, progressBarWidth);

//                 // Chia thanh ti·∫øn tr√¨nh th√†nh 20 ph·∫ßn
// const progressStep = requiredXP / 20;

// // X√°c ƒë·ªãnh s·ªë b·∫≠c m√† ng∆∞·ªùi ch∆°i ƒë√£ ƒë·∫°t ƒë∆∞·ª£c
// const progressLevel = Math.floor(currentXP / progressStep);

// // T√≠nh to√°n chi·ªÅu r·ªông c·ªßa thanh ti·∫øn tr√¨nh d·ª±a tr√™n s·ªë b·∫≠c ƒë√£ ƒë·∫°t ƒë∆∞·ª£c
// const progressWidth = Math.min((progressLevel / 20) * progressBarWidth, progressBarWidth);






//                 // n·∫øu currentXP = 598905, requiredXP = 19960040 v√† progressBarWidth = 500 th√¨ px s·∫Ω b·∫±ng 15.00260019518999
//                 // const rawProgressWidth = (currentXP / requiredXP) * progressBarWidth;
//                 // const progressWidth = rawProgressWidth >= 15.00260019518999 ? Math.min(rawProgressWidth, progressBarWidth) : 0;

// // // V·∫Ω thanh ti·∫øn tr√¨nh (ƒëo theo XP)
// // const minProgressWidth = 15; // Gi√° tr·ªã t·ªëi thi·ªÉu ƒë·ªÉ thanh kh√¥ng b·ªã m√©o
// // const progressRatio = currentXP / requiredXP;
// // const progressWidth = Math.max(minProgressWidth, Math.min(progressRatio * progressBarWidth, progressBarWidth));




//                 ctx.beginPath();
//                 ctx.moveTo(progressBarX, progressBarY + progressBarRadius);
//                 ctx.arcTo(progressBarX, progressBarY, progressBarX + progressWidth, progressBarY, progressBarRadius);
//                 ctx.arcTo(progressBarX + progressWidth, progressBarY, progressBarX + progressWidth, progressBarY + progressBarHeight, progressBarRadius);
//                 ctx.arcTo(progressBarX + progressWidth, progressBarY + progressBarHeight, progressBarX, progressBarY + progressBarHeight, progressBarRadius);
//                 ctx.arcTo(progressBarX, progressBarY + progressBarHeight, progressBarX, progressBarY, progressBarRadius);
//                 ctx.closePath();
//                 ctx.fillStyle = progressBarFillColor;
//                 ctx.fill();

//                 // Th√™m ch·ªØ v√†o n·ªÅn thanh ti·∫øn tr√¨nh
//                 const text = "BRB Studio";

//                 // Ch·ªânh v·ªã tr√≠ ch·ªØ b·∫±ng c√°ch thay ƒë·ªïi gi√° tr·ªã c·ªßa textX
//                 // ƒê·ªÉ ch·ªânh ch·ªØ sang tr√°i ho·∫∑c ph·∫£i, ch·ªâ c·∫ßn thay ƒë·ªïi gi√° tr·ªã c·ªßa textX.
//                 let textX = progressBarX + progressBarWidth / 2 - ctx.measureText(text).width / 2; // CƒÉn gi·ªØa ch·ªØ
//                 // N·∫øu mu·ªën di chuy·ªÉn ch·ªØ sang tr√°i:
//                 textX += 230; // Gi·∫£m gi√° tr·ªã c·ªßa textX ƒë·ªÉ ch·ªØ l·ªách sang tr√°i
//                 // N·∫øu mu·ªën di chuy·ªÉn ch·ªØ sang ph·∫£i:
//                 // textX += 50; // TƒÉng gi√° tr·ªã c·ªßa textX ƒë·ªÉ ch·ªØ l·ªách sang ph·∫£i

//                 // Ch·ªânh v·ªã tr√≠ ch·ªØ theo chi·ªÅu d·ªçc (ƒëi·ªÅu ch·ªânh l√™n xu·ªëng)
//                 let textY = progressBarY + progressBarHeight / 2 + 10; // ƒê·∫∑t ch·ªØ ·ªü gi·ªØa chi·ªÅu cao thanh ti·∫øn tr√¨nh
//                 // N·∫øu mu·ªën di chuy·ªÉn ch·ªØ l√™n:
//                 textY -= 5; // Gi·∫£m gi√° tr·ªã c·ªßa textY ƒë·ªÉ ch·ªØ l√™n tr√™n
//                 // N·∫øu mu·ªën di chuy·ªÉn ch·ªØ xu·ªëng:
//                 // textY += 10; // TƒÉng gi√° tr·ªã c·ªßa textY ƒë·ªÉ ch·ªØ xu·ªëng d∆∞·ªõi

//                 ctx.fillStyle = 'rgb(255, 255, 255)'; // M√†u ch·ªØ
//                 ctx.font = '15px Roboto';
//                 ctx.fillText(text, textX, textY); // V·∫Ω ch·ªØ
                
//                 // Xu·∫•t ·∫£nh
//                 const attachment = new AttachmentBuilder(canvas.toBuffer(), { name: 'rank-card.png' });

//                 await interaction.editReply({ files: [attachment] });
                
//             } catch (error) {
//                 console.error("Error building rank card:", error);
//                 await interaction.editReply({ content: '‚ö†Ô∏è ƒê√£ x·∫£y ra l·ªói khi t·∫°o th·∫ª x·∫øp h·∫°ng. Vui l√≤ng th·ª≠ l·∫°i sau.', ephemeral: true });
//             }
//         } 

//         else if (subcommand === 'setup-level') {
//             const guildOwner = await interaction.guild.fetchOwner();
//             if (interaction.user.id !== guildOwner.id) {
//                 return await interaction.reply({ content: 'L·ªánh n√†y ch·ªâ d√†nh cho ch·ªß s·ªü h·ªØu.', ephemeral: true });
//             }

//             const channel1 = options.getChannel('channel1');
//             const level1 = options.getInteger('level1');
//             const channel2 = options.getChannel('channel2');
//             const level2 = options.getInteger('level2');
//             const channel3 = options.getChannel('channel3');
//             const level3 = options.getInteger('level3');
        
//             // Ki·ªÉm tra c·∫•p ƒë·ªô c√≥ ƒë√∫ng th·ª© t·ª± hay kh√¥ng
//             if (!(level1 > level2 && level2 > level3)) {
//                 const embed = new EmbedBuilder()
//                     .setColor('Red')
//                     .setDescription('‚ö†Ô∏è C√°c c·∫•p ƒë·ªô c·∫ßn ƒë∆∞·ª£c s·∫Øp x·∫øp theo th·ª© t·ª± t·ª´ cao ƒë·∫øn th·∫•p.\n\nVui l√≤ng nh·∫≠p l·∫°i l·ªánh v·ªõi c·∫•p ƒë·ªô ƒë√∫ng th·ª© t·ª±.');
//                 return await interaction.reply({ embeds: [embed], ephemeral: true });
//             }
        
//             try {
//                 // C·∫≠p nh·∫≠t d·ªØ li·ªáu v√†o MongoDB
//                 await levelSchema.findOneAndUpdate(
//                     { Guild: guild.id },
//                     {
//                         $set: {
//                             "Channels": {
//                                 channel1: channel1.id,
//                                 channel2: channel2.id,
//                                 channel3: channel3.id
//                             },
//                             "Levels": {
//                                 level1: level1,
//                                 level2: level2,
//                                 level3: level3
//                             }
//                         }
//                     },
//                     { upsert: true, new: true }
//                 );
        
//                 const embed = new EmbedBuilder()
//                     .setColor('Green')
//                     .setTitle('üìä Thi·∫øt l·∫≠p quy·ªÅn c·∫•p ƒë·ªô th√†nh c√¥ng!')
//                     .addFields(
//                         { name: 'üîπ K√™nh c·∫•p ƒë·ªô 1', value: `${channel1} (C·∫ßn C·∫•p ƒë·ªô ${level1})`, inline: true },
//                         { name: 'üîπ K√™nh c·∫•p ƒë·ªô 2', value: `${channel2} (C·∫ßn C·∫•p ƒë·ªô ${level2})`, inline: true },
//                         { name: 'üîπ K√™nh c·∫•p ƒë·ªô 3', value: `${channel3} (C·∫ßn C·∫•p ƒë·ªô ${level3})`, inline: true }
//                     );
        
//                 return await interaction.reply({ embeds: [embed] });
//             } catch (error) {
//                 console.error('L·ªói khi thi·∫øt l·∫≠p quy·ªÅn:', error);
//                 return await interaction.reply({ content: '‚ö†Ô∏è ƒê√£ x·∫£y ra l·ªói khi thi·∫øt l·∫≠p quy·ªÅn. Vui l√≤ng th·ª≠ l·∫°i!', ephemeral: true });
//             }
//         }
//     }
// }