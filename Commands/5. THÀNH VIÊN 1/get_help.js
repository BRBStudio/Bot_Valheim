const { SlashCommandBuilder } = require("discord.js");
const gethelpSchema = require(`../../schemas/gethelpSchema`);
const { checkAdministrator } = require(`../../permissionCheck`);
const { createGetHelpListEmbed, createGetHelpDMEmbed, createGetHelpTagEmbed } = require(`../../Embeds/embedsCreate`);
const { threadembed } = require(`../../Embeds/embedsDEV`);
const CommandStatus = require('../../schemas/Command_Status');

module.exports = {
    data: new SlashCommandBuilder()
        .setName("get_help")
        .setDescription("üîπ G·ªçi ng∆∞·ªùi gi√∫p ƒë·ª° (ch·ªâ d√πng trong di·ªÖn ƒë√†n).")
        .addSubcommand(subcommand =>
            subcommand
                .setName('setup')
                .setDescription('üîπ Thi·∫øt l·∫≠p ng∆∞·ªùi d√πng tr·ª£ gi√∫p')
                .addUserOption(option => option.setName('user1').setDescription('Ch·ªçn ng∆∞·ªùi d√πng').setRequired(false))
                .addUserOption(option => option.setName('user2').setDescription('Ch·ªçn ng∆∞·ªùi d√πng').setRequired(false))
                .addUserOption(option => option.setName('user3').setDescription('Ch·ªçn ng∆∞·ªùi d√πng').setRequired(false))
                .addUserOption(option => option.setName('user4').setDescription('Ch·ªçn ng∆∞·ªùi d√πng').setRequired(false))
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('tag')
                .setDescription('üîπ G·ª≠i y√™u c·∫ßu tr·ª£ gi√∫p')
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('remove')
                .setDescription('üîπ X√≥a ng∆∞·ªùi d√πng tr·ª£ gi√∫p')
                .addUserOption(option => option.setName('user').setDescription('Ch·ªçn ng∆∞·ªùi d√πng').setRequired(true))
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('list')
                .setDescription('üîπ Xem danh s√°ch ng∆∞·ªùi d√πng tr·ª£ gi√∫p')
        ),

    async execute(interaction, client) {

        // Ki·ªÉm tra tr·∫°ng th√°i c·ªßa l·ªánh
        const commandStatus = await CommandStatus.findOne({ command: '/get_help' });

        // N·∫øu l·ªánh ƒëang t·∫Øt, g·ª≠i th√¥ng b√°o v√† kh√¥ng th·ª±c hi·ªán l·ªánh
        if (commandStatus && commandStatus.status === 'off') {
            return interaction.reply('L·ªánh n√†y ƒë√£ b·ªã t·∫Øt, vui l√≤ng th·ª≠ l·∫°i sau.');
        }

        const subcommand = interaction.options.getSubcommand();
        const serverId = interaction.guild.id;

        if (subcommand === 'setup') {

            const hasPermission = await checkAdministrator(interaction);
            if (!hasPermission) return;

            const users = [
                interaction.options.getUser('user1'),
                interaction.options.getUser('user2'),
                interaction.options.getUser('user3'),
                interaction.options.getUser('user4')
            ].filter(user => user !== null && !user.bot);


            const data = await gethelpSchema.findOne({ serverId }); // let

            if (!data) {
                data = new gethelpSchema({ serverId, userIds: [] });
            }

            // Ki·ªÉm tra n·∫øu danh s√°ch ƒë√£ ƒë·∫°t gi·ªõi h·∫°n 50 ng∆∞·ªùi
            if (data.userIds.length >= 50) {
                return interaction.reply({ content: 'B·∫°n ƒë√£ ƒë·∫°t gi·ªõi h·∫°n 50 ng∆∞·ªùi d√πng h·ªó tr·ª£.', ephemeral: true });
            }

            let replyMessage = '';
            let isChanged = false; // Bi·∫øn c·ªù ƒë·ªÉ ki·ªÉm tra xem c√≥ thay ƒë·ªïi n√†o kh√¥ng

            users.forEach(user => {
                if (!data.userIds.includes(user.id)) {
                    data.userIds.push(user.id);
                    replyMessage += `ƒê√£ th√™m ng∆∞·ªùi d√πng ${user.displayName}.\n`;
                    isChanged = true; // ƒê√°nh d·∫•u ƒë√£ c√≥ thay ƒë·ªïi
                } else {
                    replyMessage += `Ng∆∞·ªùi d√πng ${user.displayName} ƒë√£ ƒë∆∞·ª£c th√™m tr∆∞·ªõc ƒë√≥.\n`;
                }
            });

            if (isChanged) {
                await data.save();
            } else {
                replyMessage = 'Kh√¥ng c√≥ thay ƒë·ªïi n√†o ƒë∆∞·ª£c th·ª±c hi·ªán.';
            }
            await interaction.reply({ content: `${replyMessage}`, ephemeral: true });

        } else if (subcommand === 'tag') {

            if (!interaction.channel || !interaction.channel.isThread()) {

                await interaction.reply({ embeds: [threadembed], ephemeral: true });
                return;
            }

            // Ki·ªÉm tra xem ng∆∞·ªùi th·ª±c hi·ªán l·ªánh c√≥ ph·∫£i l√† ng∆∞·ªùi t·∫°o thread kh√¥ng
            const threadAuthorId = interaction.channel.ownerId;  // L·∫•y ID c·ªßa ng∆∞·ªùi t·∫°o thread
            const userId = interaction.user.id;  // ID c·ªßa ng∆∞·ªùi ƒëang th·ª±c hi·ªán l·ªánh

            if (threadAuthorId !== userId) {
                // N·∫øu ng∆∞·ªùi th·ª±c hi·ªán kh√¥ng ph·∫£i l√† ng∆∞·ªùi t·∫°o thread, tr·∫£ v·ªÅ th√¥ng b√°o
                return interaction.reply({
                    content: "B·∫°n ch·ªâ c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y trong b√†i vi·∫øt m√† b·∫°n ƒë√£ t·∫°o.",
                    ephemeral: true,
                });
            }

            const data = await gethelpSchema.findOne({ serverId }); // let

            if (!data || !data.userIds.length) {
                return interaction.reply('Ch∆∞a c√≥ ng∆∞·ªùi d√πng n√†o ƒë∆∞·ª£c thi·∫øt l·∫≠p ƒë·ªÉ nh·∫≠n y√™u c·∫ßu tr·ª£ gi√∫p.');
            }
            
            const embed = await createGetHelpTagEmbed (interaction)

            // Ki·ªÉm tra xem c√≥ ng∆∞·ªùi d√πng n√†o trong danh s√°ch kh√¥ng, n·∫øu kh√¥ng th√¨ ch·ªâ tr·∫£ l·ªùi v·ªõi th√¥ng b√°o th√≠ch h·ª£p
            if (!embed) {
                await interaction.reply('Ch∆∞a c√≥ ng∆∞·ªùi d√πng n√†o ƒë∆∞·ª£c thi·∫øt l·∫≠p ƒë·ªÉ nh·∫≠n y√™u c·∫ßu tr·ª£ gi√∫p.');
            } else {
            await interaction.reply({ embeds: [embed], ephemeral: false });
            }

            // T·∫°o tin nh·∫Øn DM embed
            const dmEmbed = await createGetHelpDMEmbed (interaction)

            // G·ª≠i tin nh·∫Øn DM t·ªõi t·∫•t c·∫£ ng∆∞·ªùi d√πng ƒë√£ thi·∫øt l·∫≠p
            for (const userId of data.userIds) {
                const user = await client.users.fetch(userId);
                try {
                    await user.send({ embeds: [dmEmbed] });
                } catch (error) {
                    console.error(`Kh√¥ng th·ªÉ g·ª≠i DM cho ${user.displayName}:`, error);
                }
            }
        } else if (subcommand === 'remove') {

            const hasPermission = await checkAdministrator(interaction);
            if (!hasPermission) return;

            const user = interaction.options.getUser('user');
            const data = await gethelpSchema.findOne({ serverId }); // let

            if (!data || !data.userIds.includes(user.id)) {
                await interaction.reply({ content: `Ng∆∞·ªùi d√πng ${user.displayName} kh√¥ng c√≥ trong danh s√°ch tr·ª£ gi√∫p.`, ephemeral: true });
                return;
            }

            // X√≥a ng∆∞·ªùi d√πng kh·ªèi danh s√°ch
            data.userIds = data.userIds.filter(id => id !== user.id);
            await data.save();
            await interaction.reply({ content: `Ng∆∞·ªùi d√πng ${user.displayName} ƒë√£ ƒë∆∞·ª£c x√≥a kh·ªèi danh s√°ch tr·ª£ gi√∫p.`, ephemeral: true });
        } else if (subcommand === 'list') {

            // const hasPermission = await checkAdministrator(interaction);
            // if (!hasPermission) return;

            const embed = await createGetHelpListEmbed (interaction)

            // Ki·ªÉm tra xem c√≥ ng∆∞·ªùi d√πng n√†o trong danh s√°ch kh√¥ng, n·∫øu kh√¥ng th√¨ ch·ªâ tr·∫£ l·ªùi v·ªõi th√¥ng b√°o th√≠ch h·ª£p
            if (!embed) {
                await interaction.reply('Ch∆∞a c√≥ ng∆∞·ªùi d√πng n√†o ƒë∆∞·ª£c thi·∫øt l·∫≠p ƒë·ªÉ nh·∫≠n y√™u c·∫ßu tr·ª£ gi√∫p.');
            } else {
                await interaction.reply({ embeds: [embed], ephemeral: true });
            }
        }
    }
};

