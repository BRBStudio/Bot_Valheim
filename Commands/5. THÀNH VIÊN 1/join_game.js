const { SlashCommandBuilder, EmbedBuilder, ButtonBuilder, ActionRowBuilder, ButtonStyle } = require('discord.js');
const joingameModel = require('../../schemas/joingameSchema.js');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('join_game')
        .setDescription('üîπ Qu·∫£n l√Ω danh s√°ch tham gia cho c√°c tr√≤ ch∆°i.')
        .addSubcommand(subcommand =>
            subcommand
                .setName('send')
                .setDescription('üîπ T·∫°o danh s√°ch tham gia cho tr√≤ ch∆°i.')
                .addStringOption(option =>
                    option.setName('game')
                        .setDescription('Ch·ªçn tr√≤ ch∆°i b·∫°n mu·ªën t·∫°o danh s√°ch tham gia.')
                        .setRequired(true)
                        .addChoices(
                            { name: 'Li√™n minh huy·ªÅn tho·∫°i', value: 'Li√™n minh huy·ªÅn tho·∫°i' },
                            { name: 'Valheim', value: 'Valheim' },
                            { name: 'Pubg', value: 'Pubg' }
                        )
                )
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('recall')
                .setDescription('üîπ G·ªçi l·∫°i danh s√°ch tham gia c·ªßa b·∫°n.')
                .addStringOption(option =>
                    option.setName('game')
                        .setDescription('Ch·ªçn tr√≤ ch∆°i b·∫°n mu·ªën g·ªçi l·∫°i.')
                        .setRequired(true)
                        .addChoices(
                            { name: 'Li√™n minh huy·ªÅn tho·∫°i', value: 'Li√™n minh huy·ªÅn tho·∫°i' },
                            { name: 'Valheim', value: 'Valheim' },
                            { name: 'Pubg', value: 'Pubg' }
                        )
                )
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('delete')
                .setDescription('üîπ X√≥a ng∆∞·ªùi d√πng kh·ªèi danh s√°ch tham gia tr√≤ ch∆°i.')
                .addStringOption(option =>
                    option.setName('game')
                        .setDescription('Ch·ªçn tr√≤ ch∆°i.')
                        .setRequired(true)
                        .addChoices(
                            { name: 'Li√™n minh huy·ªÅn tho·∫°i', value: 'Li√™n minh huy·ªÅn tho·∫°i' },
                            { name: 'Valheim', value: 'Valheim' },
                            { name: 'Pubg', value: 'Pubg' }
                        )
                )
                .addStringOption(option =>
                    option.setName('id')
                        .setDescription('ID ng∆∞·ªùi d√πng c·∫ßn x√≥a.')
                        .setRequired(true)
                )
        ),
    async execute(interaction) {
        const subCommand = interaction.options.getSubcommand();
        const gameChoice = interaction.options.getString('game');

        if (subCommand === 'send') {
            const guildId = interaction.guild.id;
            const guildName = interaction.guild.name;
            const userId = interaction.user.id;
            const displayName = interaction.member.displayName;

            // Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng ƒë√£ t·∫°o danh s√°ch cho tr√≤ ch∆°i n√†y
            const existingGame = await joingameModel.findOne({ guildId, userId, title: gameChoice });

            if (existingGame) {
                return interaction.reply({ content: `B·∫°n ƒë√£ t·∫°o danh s√°ch cho tr√≤ ch∆°i **${gameChoice}** r·ªìi!`, ephemeral: true });
            }

            const currentTime = new Date();
            const options = {
                year: 'numeric',
                month: '2-digit',
                day: '2-digit',
                hour: '2-digit',
                minute: '2-digit',
                second: '2-digit',
                hour12: false,
                timeZone: 'Asia/Ho_Chi_Minh'
            };
            const formattedTime = currentTime.toLocaleString('vi-VN', options);

            const newGame = new joingameModel({
                guildId,
                guildName,
                userId,
                displayName,
                title: gameChoice,
                Listjoin: [],
                time: formattedTime,
                totalUsers: 0,
                maxUsers: 20
            });

            await newGame.save();

            // L·∫•y s·ªë l∆∞·ª£ng ng∆∞·ªùi tham gia t·ª´ MongoDB
            const gameData = await joingameModel.findOne({ guildId, userId, title: gameChoice });

            const embed = new EmbedBuilder()
                .setColor('Red')
                .setTitle(`T·∫°o danh s√°ch ƒë·ªôi ${gameChoice}`)
                .setDescription(`Nh·∫•p v√†o n√∫t b√™n d∆∞·ªõi ƒë·ªÉ tham gia ƒë·ªôi c·ªßa ${displayName}.\n<a:warning:1322596681329410162> **Danh s√°ch n√†y s·∫Ω ƒë∆∞·ª£c l∆∞u trong 1 nƒÉm**`)
                .addFields(
                    {
                        name: 'S·ªë ng∆∞·ªùi ƒë√£ ƒëƒÉng k√≠',
                        value: `${gameData.totalUsers}/${gameData.maxUsers}`,
                        inline: true
                    }
                )
                .setFooter({ text: `T·∫°o b·ªüi ${displayName}` });

            // Ch·ªânh s·ª≠a ID c·ªßa n√∫t ƒë·ªÉ bao g·ªìm t√™n tr√≤ ch∆°i
            const joinButton = new ButtonBuilder()
                .setCustomId(`join_game_${gameChoice}_${userId}`) // G·∫Øn t√™n tr√≤ ch∆°i v√†o ID
                .setLabel('Tham Gia')
                .setStyle(ButtonStyle.Primary);
            
            const listButton = new ButtonBuilder()
                .setCustomId(`list_${gameChoice}_${userId}`) // G·∫Øn t√™n tr√≤ ch∆°i v√†o ID
                .setLabel('Danh s√°ch ng∆∞·ªùi tham gia')
                .setStyle(ButtonStyle.Primary);

            const row = new ActionRowBuilder().addComponents(joinButton, listButton);

            const h = await interaction.reply({ embeds: [embed], components: [row] });

            // // Sau 1 ph√∫t, x√≥a danh s√°ch Listjoin
            // setTimeout(async () => {
            //     await joingameModel.updateOne(
            //         { guildId, userId, title: gameChoice },
            //         { $set: { Listjoin: [], totalUsers: 0 } }
            //     );
            // }, 60000); // 60000ms = 1 ph√∫t
        } 
        
        else if (subCommand === 'recall') {

            const guildId = interaction.guild.id;
            const userId = interaction.user.id;
            const displayName = interaction.member.displayName;

            // T√¨m danh s√°ch tham gia c·ªßa ng∆∞·ªùi d√πng cho tr√≤ ch∆°i ƒë∆∞·ª£c ch·ªçn
            const gameData = await joingameModel.findOne({ guildId, userId, title: gameChoice });

            if (!gameData) {
                return interaction.reply({ content: `B·∫°n ch∆∞a t·∫°o danh s√°ch tham gia cho tr√≤ ch∆°i **${gameChoice}**!`, ephemeral: true });
            }

            const embed = new EmbedBuilder()
                .setColor('Red')
                .setTitle(`T·∫°o danh s√°ch ƒë·ªôi ${gameChoice}`)
                .setDescription(`Nh·∫•p v√†o n√∫t b√™n d∆∞·ªõi ƒë·ªÉ tham gia ƒë·ªôi c·ªßa ${displayName}.`)
                .addFields(
                    {
                        name: 'S·ªë ng∆∞·ªùi ƒë√£ ƒëƒÉng k√≠',
                        value: `${gameData.totalUsers}/${gameData.maxUsers}`,
                        inline: true
                    }
                )
                .setFooter({ text: `T·∫°o b·ªüi ${gameData.displayName}` });

            const joinButton = new ButtonBuilder()
                .setCustomId(`join_game_${gameChoice}_${userId}`)
                .setLabel('Tham Gia')
                .setStyle(ButtonStyle.Primary);

            const listButton = new ButtonBuilder()
                .setCustomId(`list_${gameChoice}_${userId}`)
                .setLabel('Danh s√°ch ng∆∞·ªùi tham gia')
                .setStyle(ButtonStyle.Primary);

            const row = new ActionRowBuilder().addComponents(joinButton, listButton);

            await interaction.reply({ embeds: [embed], components: [row] });
        } 
        
        else if (subCommand === 'delete') {
            const guildId = interaction.guild.id;
            const userId = interaction.user.id;
            const targetUserId = interaction.options.getString('id');

            const gameData = await joingameModel.findOne({ guildId, userId, title: gameChoice });

            if (!gameData) {
                return interaction.reply({ content: `Kh√¥ng t√¨m th·∫•y danh s√°ch tr√≤ ch∆°i **${gameChoice}** trong m√°y ch·ªß n√†y.`, ephemeral: true });
            }

            const userIndex = gameData.Listjoin.findIndex(user => user.userId === targetUserId);

            if (userIndex === -1) {
                return interaction.reply({ content: `Ng∆∞·ªùi d√πng c√≥ ID **${targetUserId}** kh√¥ng c√≥ trong danh s√°ch tham gia tr√≤ ch∆°i **${gameChoice}**.`, ephemeral: true });
            }

            gameData.Listjoin.splice(userIndex, 1);
            gameData.totalUsers -= 1;
            await gameData.save();

            // T·∫°o Embed m·ªõi v·ªõi s·ªë l∆∞·ª£ng c·∫≠p nh·∫≠t
            const updatedEmbed = new EmbedBuilder()
                .setColor('Red')
                .setTitle(`T·∫°o danh s√°ch ƒë·ªôi ${gameChoice}`)
                .setDescription(`Nh·∫•p v√†o n√∫t b√™n d∆∞·ªõi ƒë·ªÉ tham gia ƒë·ªôi c·ªßa ${gameData.displayName}.`)
                .addFields(
                    {
                        name: 'S·ªë ng∆∞·ªùi ƒë√£ ƒëƒÉng k√≠',
                        value: `${gameData.totalUsers}/${gameData.maxUsers}`,
                        inline: true
                    }
                )
                .setFooter({ text: `T·∫°o b·ªüi ${gameData.displayName}` });

            const joinButton = new ButtonBuilder()
                .setCustomId(`join_game_${gameChoice}_${userId}`)
                .setLabel('Tham Gia')
                .setStyle(ButtonStyle.Primary);

            const listButton = new ButtonBuilder()
                .setCustomId(`list_${gameChoice}_${userId}`)
                .setLabel('Danh s√°ch ng∆∞·ªùi tham gia')
                .setStyle(ButtonStyle.Primary);

            const row = new ActionRowBuilder().addComponents(joinButton, listButton);

            return interaction.reply({ 
                content: `ƒê√£ x√≥a ng∆∞·ªùi d√πng c√≥ ID **${targetUserId}** kh·ªèi danh s√°ch tham gia tr√≤ ch∆°i **${gameChoice}**.`, 
                embeds: [updatedEmbed], 
                components: [row] 
            }); // ephemeral: true
        }

    }
};
