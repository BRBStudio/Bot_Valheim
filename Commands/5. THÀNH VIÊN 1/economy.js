const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');
const economySystem = require('../../schemas/economySystem');
const economyCK = require('../../schemas/economyck')
const config = require(`../../config`);
const { checkOwner } = require(`../../permissionCheck`)
const moment = require('moment-timezone');
const CommandStatus = require('../../schemas/Command_Status');

var timeout = [];

module.exports = {
    data: new SlashCommandBuilder()
        .setName('economy')
        .setDescription('üîπ Kinh t·∫ø BRB STUDIO.')
        .addSubcommand(command => command.setName('great-account').setDescription('üîπ T·∫°o t√†i kho·∫£n kinh t·∫ø'))
        .addSubcommand(command => command.setName('delete').setDescription('üîπ X√≥a t√†i kho·∫£n ti·∫øt ki·ªám c·ªßa ng∆∞·ªùi d√πng').addUserOption(op => op.setName('account').setDescription('Ch·ªçn ng∆∞·ªùi d√πng ƒë·ªÉ x√≥a t√†i kho·∫£n').setRequired(true)))
        .addSubcommand(command => command.setName('view-account').setDescription('üîπ Xem s·ªë d∆∞ v√† th√¥ng tin t√†i kho·∫£n n·ªÅn kinh t·∫ø c·ªßa b·∫°n.'))
        .addSubcommand(command => command.setName('deposit-account').setDescription('üîπ G·ª≠i ti·ªÅn t·ª´ v√≠ c·ªßa b·∫°n v√†o ng√¢n h√†ng.').addStringOption(op => op.setName('amount').setDescription('S·ªë ti·ªÅn g·ª≠i').setRequired(true)))
        .addSubcommand(command => command.setName('daily-account').setDescription('üîπ s·ªë ti·ªÅn h·ªó tr·ª£ h√†ng ng√†y c·ªßa b·∫°n'))
        .addSubcommand(command => command.setName('ask-money').setDescription('üîπ Xin ti·ªÅn'))
        .addSubcommand(command => command.setName('gamble').setDescription('üîπ ƒê√°nh b·∫°c ƒë·ªÉ th·∫Øng ho·∫∑c thua ti·ªÅn').addStringOption(op => op.setName('amount').setDescription('S·ªë ti·ªÅn ƒë√°nh b·∫°c (m·∫∑c ƒë·ªãnh = 500)').setRequired(false)))
        .addSubcommand(command => command.setName('work').setDescription('üîπ L√†m vi·ªác ƒë·ªÉ ki·∫øm ti·ªÅn'))
        .addSubcommand(command => command.setName('withdraw-money').setDescription('üîπ R√∫t ti·ªÅn t·ª´ ng√¢n h√†ng v·ªÅ v√≠').addStringOption(op => op.setName('amount').setDescription('S·ªë ti·ªÅn c·∫ßn r√∫t').setRequired(true)))
        .addSubcommand(command => command.setName('rob').setDescription('üîπ C∆∞·ªõp ti·ªÅn m·ªôt ng∆∞·ªùi').addUserOption(op => op.setName('user').setDescription('Ch·ªçn ng∆∞·ªùi d√πng b·∫°n mu·ªën c∆∞·ªõp').setRequired(true)))
        .addSubcommand(command => command.setName('ck').setDescription('üîπ Chuy·ªÉn kho·∫£n cho ng∆∞·ªùi d√πng kh√°c').addUserOption(op => op.setName('user').setDescription('Ng∆∞·ªùi nh·∫≠n').setRequired(true)).addStringOption(op => op.setName('amount').setDescription('S·ªë ti·ªÅn chuy·ªÉn').setRequired(true)).addStringOption(op => op.setName('nd').setDescription('N·ªôi dung chuy·ªÉn kho·∫£n').setRequired(true)).addStringOption(op => op.setName('id').setDescription('ID m√°y ch·ªß (t√πy ch·ªçn)')))
        .addSubcommand(command => command.setName('transaction-history').setDescription('üîπ Xem l·ªãch s·ª≠ giao d·ªãch chuy·ªÉn kho·∫£n c·ªßa b·∫°n (30 ng√†y g·∫ßn nh·∫•t)')),

    async execute(interaction, client) {

        // Ki·ªÉm tra tr·∫°ng th√°i c·ªßa l·ªánh
        const commandStatus = await CommandStatus.findOne({ command: '/economy' });

        // N·∫øu l·ªánh ƒëang t·∫Øt, g·ª≠i th√¥ng b√°o v√† kh√¥ng th·ª±c hi·ªán l·ªánh
        if (commandStatus && commandStatus.status === 'off') {
            return interaction.reply('L·ªánh n√†y ƒë√£ b·ªã t·∫Øt, vui l√≤ng th·ª≠ l·∫°i sau.');
        }

        const { options, guild, user } = interaction;

        // Ghi l·∫°i th√¥ng tin ng∆∞·ªùi d√πng v√† guild
        // console.log(`User: ${user.id}, Guild: ${guild.id}`);
        
        let data = await economySystem.findOne({ Guild: guild.id, User: user.id });
        // console.log('T√¨m d·ªØ li·ªáu t√†i kho·∫£n:', data);
        
        const sub = options.getSubcommand();
        // console.log(`Subcommand ƒë∆∞·ª£c th·ª±c thi: ${sub}`);

        try {
            switch (sub) {
            case "great-account":
                    if (data) {
                        // console.log("T√†i kho·∫£n ƒë√£ t·ªìn t·∫°i.");
                        return await interaction.reply({ content: "B·∫°n ƒë√£ c√≥ t√†i kho·∫£n ph·ªï th√¥ng!", ephemeral: true });
                    } else {
                        // console.log("T·∫°o t√†i kho·∫£n m·ªõi.");
                try {        
                        await economySystem.create({
                            Guild: guild.id,
                            User: user.id,
                            Bank: 5000,
                            Wallet: 5000,
                            Worked: 0,
                            Gambled: 0,
                            Begged: 0,
                            HoursWorked: 0,
                            CommandsRan: 0,
                            Moderated: 0
                        });
                    } catch (error) {
                        // console.error("L·ªói khi t·∫°o t√†i kho·∫£n:", error);
                        return await interaction.reply({ content: "ƒê√£ x·∫£y ra l·ªói khi t·∫°o t√†i kho·∫£n!", ephemeral: true });
                    }

                        const embed = new EmbedBuilder()
                            .setAuthor({ name: `H·ªá th·ªëng kinh t·∫ø ${client.config.DevBy}` })
                            .setColor(config.embedCyan)
                            .setTitle(`H·ªá th·ªëng kinh t·∫ø c·ªßa ${client.user.displayName} ${client.config.arrowDownEmoji}`)
                            .setThumbnail(client.user.displayAvatarURL())
                            .setDescription(
                                `B·∫°n ƒë√£ t·∫°o t√†i kho·∫£n kinh t·∫ø, b·∫°n ƒë√£ ƒë∆∞·ª£c th∆∞·ªüng:\n\n` +
                                `‚Ä¢ 5.000 <a:xu:1320563128848744548> -> üè¶\n` +
                                `‚Ä¢ 5.000 <a:xu:1320563128848744548> -> üíµ\n\n` +
                                `__D√πng l·ªánh \`/economy view-account \` ƒë·ªÉ xem s·ªë d∆∞ v√† th√¥ng tin c·ªßa b·∫°n.__`)
                            .setFooter({ text: `Kinh t·∫ø m√°y ch·ªß ${guild.name}`, iconURL: guild.iconURL() })
                            .setTimestamp();

                        await interaction.reply({ embeds: [embed] });
                    }
                    break;

            
            // case "ck":
            //         const receiver = options.getUser('user');
            //         let amountStringCK = options.getString('amount');
            //         let amountCK = parseFloat(amountStringCK.replace(/\./g, ''));
            //         const contentCK = options.getString('nd');

            //         if (isNaN(amountCK) || amountCK <= 0) 
            //             return await interaction.reply({ content: "S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá! H√£y d√πng c√°ch vi·∫øt ```1.000```", ephemeral: true });

            //         // Ki·ªÉm tra n·∫øu ng∆∞·ªùi g·ª≠i v√† ng∆∞·ªùi nh·∫≠n l√† c√πng m·ªôt ng∆∞·ªùi
            //         if (receiver.id === user.id) 
            //             return await interaction.reply({ content: "B·∫°n kh√¥ng th·ªÉ chuy·ªÉn ti·ªÅn cho ch√≠nh m√¨nh!", ephemeral: true });

            //         // T√¨m d·ªØ li·ªáu ng∆∞·ªùi g·ª≠i
            //         let senderData = await economySystem.findOne({ Guild: guild.id, User: user.id });
            //         if (!senderData) 
            //             return await interaction.reply({ content: "B·∫°n ch∆∞a c√≥ t√†i kho·∫£n, h√£y t·∫°o m·ªôt t√†i kho·∫£n b·∫±ng c√°ch s·ª≠ d·ª•ng `/economy great-account`", ephemeral: true });

            //         // T√¨m d·ªØ li·ªáu ng∆∞·ªùi nh·∫≠n
            //         let receiverData = await economySystem.findOne({ Guild: guild.id, User: receiver.id });
            //         if (!receiverData) 
            //             return await interaction.reply({ content: "Ng∆∞·ªùi nh·∫≠n ch∆∞a c√≥ t√†i kho·∫£n ph·ªï th√¥ng ƒë∆∞·ª£c t·∫°o.", ephemeral: true });

            //         // T√≠nh ph√≠ 10% s·ªë ti·ªÅn chuy·ªÉn
            //         const transferFee = Math.ceil(amountCK * 0.1); // L√†m tr√≤n l√™n ƒë·ªÉ ƒë·∫£m b·∫£o kh√¥ng c√≥ l·ªói l√†m tr√≤n
            //         const totalAmount = amountCK + transferFee;   // T·ªïng s·ªë ti·ªÅn b·ªã tr·ª´ c·ªßa ng∆∞·ªùi g·ª≠i

            //         // Ki·ªÉm tra s·ªë d∆∞ c·ªßa ng∆∞·ªùi g·ª≠i
            //         if (senderData.Bank < totalAmount) 
            //             return await interaction.reply({ 
            //                 content: `B·∫°n kh√¥ng ƒë·ªß ti·ªÅn ƒë·ªÉ th·ª±c hi·ªán giao d·ªãch.\nS·ªë d∆∞ hi·ªán t·∫°i c·ªßa b·∫°n: **${senderData.Bank.toLocaleString('vi-VN')} vnd**\nC·∫ßn thi·∫øt: **${totalAmount.toLocaleString('vi-VN')} vnd** (bao g·ªìm ph√≠ chuy·ªÉn kho·∫£n 10%).`, 
            //                 ephemeral: true 
            //             });

            //         // Th·ª±c hi·ªán giao d·ªãch
            //         // senderData.Bank -= amountCK;
            //         // receiverData.Bank += amountCK;
            //         senderData.Bank -= totalAmount; // Tr·ª´ t·ªïng ti·ªÅn c·ªßa ng∆∞·ªùi g·ª≠i
            //         receiverData.Bank += amountCK; // C·ªông ti·ªÅn th·ª±c nh·∫≠n cho ng∆∞·ªùi nh·∫≠n
            //         await senderData.save();
            //         await receiverData.save();

            //         // L·∫•y th·ªùi gian chuy·ªÉn kho·∫£n theo ƒë·ªãnh d·∫°ng mong mu·ªën
            //         const transferTime = moment().tz("Asia/Ho_Chi_Minh").format('HH:mm:ss DD/MM/YYYY');

            //         await economyCK.create({
            //             Guild: guild.id,
            //             GuildName: guild.name,
            //             SenderID: user.id,            // ID ng∆∞·ªùi g·ª≠i
            //             SenderName: user.displayName,     // T√™n ng∆∞·ªùi g·ª≠i
            //             ReceiverID: receiver.id,       // ID ng∆∞·ªùi nh·∫≠n
            //             ReceiverName: receiver.displayName, // T√™n ng∆∞·ªùi nh·∫≠n
            //             Amount: amountCK,              // S·ªë ti·ªÅn chuy·ªÉn
            //             Content: contentCK,             // N·ªôi dung chuy·ªÉn kho·∫£n
            //             Description: 
            //                 `${user.displayName} chuy·ªÉn kho·∫£n cho ${receiver.displayName} v·ªõi s·ªë ti·ªÅn ${amountCK.toLocaleString('vi-VN')} vnd\n` +
            //                 `N·ªôi dung: ${contentCK}\nPh√≠ giao d·ªãch: ${transferFee.toLocaleString('vi-VN')} vnd.`, // Th√™m m√¥ t·∫£ r√µ r√†ng
            //             TransferTime: transferTime
            //         });

            //         const embedCK = new EmbedBuilder()
            //             .setAuthor({ name: `H·ªá th·ªëng kinh t·∫ø ${client.config.DevBy}` })
            //             .setTitle(`Chuy·ªÉn kho·∫£n th√†nh c√¥ng`)
            //             .setThumbnail(client.user.displayAvatarURL())
            //             .setColor(config.embedGreen)
            //             .setDescription(`> B·∫°n ƒë√£ chuy·ªÉn th√†nh c√¥ng **${amountCK.toLocaleString('vi-VN')} vnd** t·ªõi t√†i kho·∫£n c·ªßa ${receiver.username}.\n\n‚Ä¢ D√πng \`/economy view-account\` ƒë·ªÉ xem th√¥ng tin m·ªõi c·ªßa b·∫°n.`)
            //             .setFooter({ text: `Kinh t·∫ø m√°y ch·ªß ${guild.name}`, iconURL: guild.iconURL() })
            //             .setTimestamp();
            
            //         await interaction.reply({ embeds: [embedCK] });

            //         const embedReceiver = new EmbedBuilder()
            //             .setAuthor({ name: `H·ªá th·ªëng kinh t·∫ø ${client.config.DevBy}` })
            //             .setTitle(`B·∫°n ƒë√£ nh·∫≠n ƒë∆∞·ª£c chuy·ªÉn kho·∫£n`)
            //             .setThumbnail(client.user.displayAvatarURL())
            //             .setColor(config.embedGreen)
            //             .setDescription(`> B·∫°n ƒë√£ nh·∫≠n ƒë∆∞·ª£c s·ªë ti·ªÅn l√† **${amountCK.toLocaleString('vi-VN')} vnd** t·ª´ t√†i kho·∫£n ${interaction.user.username}\nN·ªôi dung: ${contentCK}.\n\n‚Ä¢ D√πng \`/economy view-account\` ƒë·ªÉ xem th√¥ng tin m·ªõi c·ªßa b·∫°n.`)
            //             .setFooter({ text: `Kinh t·∫ø m√°y ch·ªß ${guild.name}`, iconURL: guild.iconURL() })
            //             .setTimestamp();

            //             try {
            //                 await receiver.send({ embeds: [embedReceiver] });
            //             } catch (error) {
            //                 console.error("Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn cho ng∆∞·ªùi nh·∫≠n:", error);
            //             }
            //         break;
            
            
            case "ck":
                    const receiver = options.getUser('user');
                    let amountStringCK = options.getString('amount');
                    let amountCK = parseFloat(amountStringCK.replace(/\./g, ''));
                    const contentCK = options.getString('nd');
                    const customGuildId = options.getString('id'); // ID m√°y ch·ªß t√πy ch·ªçn

                    if (isNaN(amountCK) || amountCK <= 0) 
                        return await interaction.reply({ content: "S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá! H√£y d√πng c√°ch vi·∫øt ```1.000```", ephemeral: true });

                    if (receiver.id === user.id) 
                        return await interaction.reply({ content: "B·∫°n kh√¥ng th·ªÉ chuy·ªÉn ti·ªÅn cho ch√≠nh m√¨nh!", ephemeral: true });

                    // Lu√¥n ki·ªÉm tra d·ªØ li·ªáu ng∆∞·ªùi g·ª≠i trong m√°y ch·ªß hi·ªán t·∫°i
                    let senderData = await economySystem.findOne({ Guild: guild.id, User: user.id });
                    if (!senderData) 
                        return await interaction.reply({ content: `B·∫°n ch∆∞a c√≥ t√†i kho·∫£n trong m√°y ch·ªß **${guild.name}**, h√£y t·∫°o m·ªôt t√†i kho·∫£n b·∫±ng c√°ch s·ª≠ d·ª•ng \`/economy great-account\`.`, ephemeral: true });

                    // T√¨m d·ªØ li·ªáu ng∆∞·ªùi nh·∫≠n trong m√°y ch·ªß m·ª•c ti√™u t√πy ch·ªçn (ho·∫∑c m√°y ch·ªß hi·ªán t·∫°i n·∫øu kh√¥ng c√≥ ID t√πy ch·ªçn)
                    const targetGuildId = customGuildId ? customGuildId : guild.id;
                    let receiverData = await economySystem.findOne({ Guild: targetGuildId, User: receiver.id });
                    if (!receiverData) 
                        return await interaction.reply({ content: "Ng∆∞·ªùi nh·∫≠n ch∆∞a c√≥ t√†i kho·∫£n ph·ªï th√¥ng ƒë∆∞·ª£c t·∫°o.", ephemeral: true });

                    const transferFee = Math.ceil(amountCK * 0.1); 
                    const totalAmount = amountCK + transferFee;

                    if (senderData.Bank < totalAmount) 
                        return await interaction.reply({ 
                            content: 
                                `B·∫°n kh√¥ng ƒë·ªß ti·ªÅn ƒë·ªÉ th·ª±c hi·ªán giao d·ªãch.\n` +
                                `S·ªë d∆∞ hi·ªán t·∫°i c·ªßa b·∫°n: **${senderData.Bank.toLocaleString('vi-VN')} <a:xu:1320563128848744548>**\n` +
                                `C·∫ßn c√≥: **${totalAmount.toLocaleString('vi-VN')} <a:xu:1320563128848744548>** (bao g·ªìm ph√≠ chuy·ªÉn kho·∫£n 10%).`, 
                            ephemeral: true 
                        });

                    // Th·ª±c hi·ªán giao d·ªãch
                    senderData.Bank -= totalAmount;
                    receiverData.Bank += amountCK;
                    await senderData.save();
                    await receiverData.save();

                    const transferTime = moment().tz("Asia/Ho_Chi_Minh").format('HH:mm:ss DD/MM/YYYY');

                    await economyCK.create({
                        Guild: targetGuildId,
                        GuildName: guild.name,
                        SenderID: user.id,
                        SenderName: user.displayName,
                        ReceiverID: receiver.id,
                        ReceiverName: receiver.displayName,
                        Amount: amountCK,
                        Content: contentCK,
                        Description: 
                            `${user.displayName} chuy·ªÉn kho·∫£n cho ${receiver.displayName} v·ªõi s·ªë ti·ªÅn ${amountCK.toLocaleString('vi-VN')} <a:xu:1320563128848744548>\n` +
                            `N·ªôi dung: ${contentCK}\n` +
                            `Ph√≠ giao d·ªãch: ${transferFee.toLocaleString('vi-VN')} <a:xu:1320563128848744548>.`,
                        TransferTime: transferTime
                    });

                    const embedCK = new EmbedBuilder()
                        .setAuthor({ name: `H·ªá th·ªëng kinh t·∫ø ${client.config.DevBy}` })
                        .setTitle(`Chuy·ªÉn kho·∫£n th√†nh c√¥ng`)
                        .setThumbnail(client.user.displayAvatarURL())
                        .setColor(config.embedGreen)
                        .setDescription(
                            `> B·∫°n ƒë√£ chuy·ªÉn th√†nh c√¥ng **${amountCK.toLocaleString('vi-VN')} <a:xu:1320563128848744548>** t·ªõi t√†i kho·∫£n c·ªßa ${receiver.displayName}.\n\n` +
                            `> Ph√≠ ck: 10% \n\n` +
                            `‚Ä¢ D√πng \`/economy view-account\` ƒë·ªÉ xem th√¥ng tin m·ªõi c·ªßa b·∫°n.`
                        )
                        .setFooter({ text: `Kinh t·∫ø m√°y ch·ªß ${guild.name}`, iconURL: guild.iconURL() })
                        .setTimestamp();

                    await interaction.reply({ embeds: [embedCK] });

                    const embedReceiver = new EmbedBuilder()
                        .setAuthor({ name: `H·ªá th·ªëng kinh t·∫ø ${client.config.DevBy}` })
                        .setTitle(`B·∫°n ƒë√£ nh·∫≠n ƒë∆∞·ª£c chuy·ªÉn kho·∫£n`)
                        .setThumbnail(client.user.displayAvatarURL())
                        .setColor(config.embedGreen)
                        .setDescription(
                            `> T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ nh·∫≠n ƒë∆∞·ª£c **${amountCK.toLocaleString('vi-VN')} <a:xu:1320563128848744548>** t·ª´ ${user.displayName}.\n\n` +
                            `‚Ä¢ N·ªôi dung: \`${contentCK}\`\n‚Ä¢ D√πng \`/economy view-account\` ƒë·ªÉ xem th√¥ng tin m·ªõi c·ªßa b·∫°n.`
                        )
                        .setFooter({ text: `Kinh t·∫ø m√°y ch·ªß ${guild.name}`, iconURL: guild.iconURL() })
                        .setTimestamp();
                    
                    await receiver.send({ embeds: [embedReceiver] });

                    break;


            case "transaction-history":
                    // L·∫•y th·ªùi gian hi·ªán t·∫°i
                    const now = moment().tz("Asia/Ho_Chi_Minh");

                    // T√¨m giao d·ªãch chuy·ªÉn kho·∫£n c·ªßa ng∆∞·ªùi d√πng trong 30 ng√†y g·∫ßn nh·∫•t
                    const recentTransactions = await economyCK.find({
                        Guild: guild.id,
                        SenderID: user.id,
                    })

                    if (recentTransactions.length === 0) {
                        return await interaction.reply({ content: "Kh√¥ng c√≥ l·ªãch s·ª≠ giao d·ªãch n√†o trong 30 ng√†y g·∫ßn nh·∫•t.", ephemeral: true });
                    }

                    // T·∫°o Embed ƒë·ªÉ hi·ªÉn th·ªã l·ªãch s·ª≠ giao d·ªãch
                    const embed = new EmbedBuilder()
                        .setAuthor({ name: `L·ªãch s·ª≠ giao d·ªãch - ${client.config.DevBy}` })
                        .setTitle(`L·ªãch s·ª≠ giao d·ªãch c·ªßa b·∫°n trong 30 ng√†y qua`)
                        .setThumbnail(client.user.displayAvatarURL())
                        .setColor(config.embedCyan)
                        .setFooter({ text: `Kinh t·∫ø m√°y ch·ªß ${guild.name}`, iconURL: guild.iconURL() })
                        .setTimestamp();

                    // Duy·ªát qua t·ª´ng giao d·ªãch v√† th√™m v√†o embed
                    recentTransactions.forEach(transaction => {
                        embed.addFields({
                            name: `Giao d·ªãch v·ªõi ${transaction.ReceiverName}`,
                            value: `S·ªë ti·ªÅn: ${transaction.Amount.toLocaleString('vi-VN')} <a:xu:1320563128848744548>\nN·ªôi dung: ${transaction.Content}\nTh·ªùi gian: ${transaction.TransferTime}`,
                            inline: false
                        });
                    });

                    // G·ª≠i th√¥ng tin l·ªãch s·ª≠ giao d·ªãch
                    await interaction.reply({ embeds: [embed] });
                    break;


            case "delete":

                    // quy·ªÅn ch·ªß s·ªü h·ªØu m·ªõi ƒë∆∞·ª£c d√πng l·ªánh delete
                    const hasPermission = await checkOwner(interaction);
                    if (!hasPermission) return;
                    
                    // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng mu·ªën x√≥a t√†i kho·∫£n
                    const targetUser = options.getUser('account');
                    const targetData = await economySystem.findOne({ Guild: guild.id, User: targetUser.id });

                    if (!targetData) {
                        return await interaction.reply({ content: `T√†i kho·∫£n c·ªßa ng∆∞·ªùi d√πng n√†y kh√¥ng t·ªìn t·∫°i.`, ephemeral: true });
                    }

                    // X√≥a d·ªØ li·ªáu t√†i kho·∫£n ng∆∞·ªùi d√πng
                    await economySystem.deleteOne({ Guild: guild.id, User: targetUser.id });

                    const deleted = new EmbedBuilder()
                        .setAuthor({ name: `H·ªá th·ªëng kinh t·∫ø ${client.config.DevBy}` })
                        .setTitle(`H·ªá th·ªëng kinh t·∫ø c·ªßa ${client.user.displayName} ${client.config.arrowDownEmoji}`)
                        .setThumbnail(client.user.displayAvatarURL())
                        .setFooter({ text: `Kinh t·∫ø m√°y ch·ªß ${guild.name}`, iconURL: guild.iconURL() })
                        .setTimestamp()
                        .setColor(config.embedRed)
                        .setDescription(`> T√†i kho·∫£n c·ªßa ng∆∞·ªùi d√πng **${targetUser.displayName}** ƒë√£ b·ªã **x√≥a**.`);

                    await interaction.reply({ embeds: [deleted] });

                    break;

            case "view-account":
                    if (!data) return await interaction.reply({ content: "Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n ph·ªï th√¥ng, h√£y t·∫°o m·ªôt t√†i kho·∫£n b·∫±ng c√°ch s·ª≠ d·ª•ng \`/economy great-account \`", ephemeral: true });

                    else {
                        const formattedBank = data.Bank.toLocaleString('vi-VN');
                        const formattedWallet = data.Wallet.toLocaleString('vi-VN');
                        const totalAmount = (data.Wallet + data.Bank).toLocaleString('vi-VN');
                        
                        const embed = new EmbedBuilder()
                        .setAuthor({ name: `H·ªá th·ªëng kinh t·∫ø ${client.config.DevBy}` })
                        .setTitle(`H·ªá th·ªëng kinh t·∫ø c·ªßa ${client.user.displayName} ${client.config.arrowDownEmoji}`)
                        .setDescription(`> ƒê√¢y l√† th√¥ng tin t√†i kho·∫£n c·ªßa b·∫°n:`)
                        .setThumbnail(client.user.displayAvatarURL())
                        .setColor(config.embedGreen)
                        .addFields(
                            { name: "T√†i kho·∫£n v√£ng lai", value: [
                                `‚Ä¢ üè¶ **${formattedBank} <a:xu:1320563128848744548>** Trong ng√¢n h√†ng`, 
                                `‚Ä¢ üíµ **${formattedWallet} <a:xu:1320563128848744548>** B·∫±ng ti·ªÅn m·∫∑t`, 
                                `‚Ä¢ üí∞ **${totalAmount} <a:xu:1320563128848744548>** T·ªïng th·ªÉ`
                            ].join("\n"), inline: false },
                            { name: "Khu v·ª±c c√° nh√¢n", value: [
                                `‚Ä¢ üßë‚Äçüíª **${data.CommandsRan}** {/} l·∫ßn g·ª≠i v√† r√∫t ti·ªÅn`, 
                                `‚Ä¢ üõ†Ô∏è **${data.Moderated}** l·∫ßn (ki·ªÉm duy·ªát)`, 
                                `‚Ä¢ üôè **${data.Begged}** l·∫ßn xin ti·ªÅn`, 
                                `‚Ä¢ üë∑ **${data.Worked}** l·∫ßn l√†m vi·ªác (${data.HoursWorked} h)`, 
                                `‚Ä¢ üé∞ **${data.Gambled}** l·∫ßn ƒë√°nh b·∫°c`
                            ].join("\n"), inline: false }
                        )
                        .setFooter({ text: `Kinh t·∫ø m√°y ch·ªß ${guild.name}`, iconURL: guild.iconURL() })
                        .setTimestamp();

                        await interaction.reply({ embeds: [embed] });
                    }
                    break;


            case "deposit-account": 
                    if (!data) return await interaction.reply({ content: "B·∫°n ch∆∞a c√≥ t√†i kho·∫£n, h√£y t·∫°o m·ªôt t√†i kho·∫£n b·∫±ng c√°ch s·ª≠ d·ª•ng `/economy great-account`", ephemeral: true });

                    // Nh·∫≠n gi√° tr·ªã t·ª´ tham s·ªë v√† chuy·ªÉn ƒë·ªïi th√†nh s·ªë
                    let amountString = options.getString('amount'); // Nh·∫≠n gi√° tr·ªã d∆∞·ªõi d·∫°ng chu·ªói
                    let amount = parseFloat(amountString.replace('.', '')); // Thay th·∫ø d·∫•u ch·∫•m ƒë·ªÉ chuy·ªÉn ƒë·ªïi th√†nh s·ªë

                    // Ki·ªÉm tra n·∫øu s·ªë ti·ªÅn l√† m·ªôt s·ªë h·ª£p l·ªá
                    if (isNaN(amount) || amount <= 0) {
                        return await interaction.reply({ content: "S·ªë ti·ªÅn g·ª≠i kh√¥ng h·ª£p l·ªá!", ephemeral: true });
                    }

                    if (data.Wallet < amount) {
                        return await interaction.reply({ 
                            content:
                                `B·∫°n ƒëang c·ªë g·∫Øng g·ª≠i ti·ªÅn ${amountString} <a:xu:1320563128848744548> ` +
                                `trong khi b·∫°n ch·ªâ c√≥ ${data.Wallet.toLocaleString('vi-VN')} <a:xu:1320563128848744548> c√≥ s·∫µn ƒë·ªÉ g·ª≠i...`, 
                            ephemeral: true 
                        });
                    }

                    // C·∫≠p nh·∫≠t s·ªë d∆∞
                    data.Wallet -= amount; // S·ª≠ d·ª•ng amount ƒë√£ t√≠nh to√°n
                    data.Bank += amount; // C·∫≠p nh·∫≠t s·ªë ti·ªÅn v√†o ng√¢n h√†ng
                    data.CommandsRan += 1;
                    await data.save();

                    // T·∫°o Embed ƒë·ªÉ tr·∫£ l·ªùi
                    const embedDeposit = new EmbedBuilder()
                        .setAuthor({ name: `H·ªá th·ªëng kinh t·∫ø ${client.config.DevBy}` })
                        .setTitle(`H·ªá th·ªëng kinh t·∫ø c·ªßa ${client.user.displayName} ${client.config.arrowDownEmoji}`)
                        .setThumbnail(client.user.displayAvatarURL())
                        .setColor(client.config.embedGreen)
                        .setDescription(
                            `> B·∫°n ƒë√£ g·ª≠i ti·ªÅn th√†nh c√¥ng **${amountString} <a:xu:1320563128848744548>** v√†o v√≠ c·ªßa b·∫°n \n\n` +
                            `‚Ä¢ d√πng \`/economy view-account\` ƒë·ªÉ xem th√¥ng tin m·ªõi c·ªßa b·∫°n.`
                        )
                        .setFooter({ text: `Kinh t·∫ø m√°y ch·ªß ${guild.name}`, iconURL: guild.iconURL() })
                        .setTimestamp();

                    // Tr·∫£ l·ªùi v·ªõi Embed ƒë√£ ƒë·ªãnh d·∫°ng
                    await interaction.reply({ embeds: [embedDeposit] });
                    break;


            case "daily-account":
                    if (timeout.includes(interaction.user.id)) return await interaction.reply({ content: "H√¥m nay b·∫°n ƒë√£ s·ª≠ d·ª•ng \`/daily\` r·ªìi. H√£y quay l·∫°i sau **24 h**", ephemeral: true });

                    if (!data) return await interaction.reply({ content: "B·∫°n ch∆∞a c√≥ t√†i kho·∫£n, h√£y t·∫°o m·ªôt t√†i kho·∫£n b·∫±ng c√°ch s·ª≠ d·ª•ng \`/economy great-account \`", ephemeral: true });
                    else {
                        const randAmount = Math.round((Math.random() * 900) + 10);

                        data.Bank += randAmount;
                        data.CommandsRan += 1;
                        data.save();

                        const embed = new EmbedBuilder()
                            .setAuthor({ name: `H·ªá th·ªëng kinh t·∫ø ${client.config.DevBy}` })
                            .setTitle(`H·ªá th·ªëng kinh t·∫ø c·ªßa ${client.user.displayName} ${client.config.arrowDownEmoji}`)
                            .setThumbnail(client.user.displayAvatarURL())
                            .setColor(client.config.embedGreen)
                            .setDescription(`> B·∫°n ƒë√£ nh·∫≠n ƒë∆∞·ª£c s·ªë ti·ªÅn h·ªó tr·ª£ h√†ng ng√†y c·ªßa m√¨nh!\n\n‚Ä¢ S·ªë l∆∞·ª£ng: **$${randAmount}**\n‚Ä¢ Th·ªùi gian nh·∫≠n ti·∫øp sau: **24 h**`)
                            .setFooter({ text: `Kinh t·∫ø m√°y ch·ªß ${guild.name}`, iconURL: guild.iconURL() })
                            .setTimestamp();

                        await interaction.reply({ embeds: [embed] });

                        timeout.push(interaction.user.id);
                        setTimeout(() => {
                            timeout.shift();
                        }, 86400000);
                    }
                    break;


            case "ask-money":
                         // Ki·ªÉm tra ng∆∞·ªùi d√πng c√≥ t√†i kho·∫£n hay ch∆∞a
                        if (!data) {
                            return await interaction.reply({ content: "B·∫°n ch∆∞a c√≥ t√†i kho·∫£n, h√£y t·∫°o m·ªôt t√†i kho·∫£n b·∫±ng c√°ch s·ª≠ d·ª•ng `/economy great-account`", ephemeral: true });
                        }

                        // Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng ƒë√£ xin ti·ªÅn g·∫ßn ƒë√¢y (timeout)
                        if (timeout.includes(user.id)) {
                            return await interaction.reply({ content: "H√£y quay l·∫°i sau **2 ti·∫øng** ƒë·ªÉ xin ti·ªÅn!", ephemeral: true });
                        }

                        // Random s·ªë ti·ªÅn xin
                        const randAmount = Math.round((Math.random() * 1000) + 100); // Random t·ª´ 100 ƒë·∫øn 1100 vnd
                        const success = Math.random() > 0.5; // 50% th√†nh c√¥ng ho·∫∑c th·∫•t b·∫°i

                        if (success) {
                            // Th√™m ti·ªÅn v√†o ng√¢n h√†ng
                            data.Bank += randAmount;
                            data.CommandsRan += 1;
                            await data.save();

                            const embed = new EmbedBuilder()
                                .setAuthor({ name: `H·ªá th·ªëng kinh t·∫ø ${client.config.DevBy}` })
                                .setTitle(`H·ªá th·ªëng kinh t·∫ø c·ªßa ${client.user.displayName} ${client.config.arrowDownEmoji}`)
                                .setDescription(
                                    `> B·∫°n v·ª´a xin ti·ªÅn v√† ƒë√£ **th√†nh c√¥ng**:\n\n` +
                                    `‚Üí S·ªë ti·ªÅn ƒë√£ xin: **${randAmount} <a:xu:1320563128848744548>**\n` +
                                    `‚Ä¢ Th·ªùi gian xin ti·∫øp theo: **10 gi·ªù**`
                                )
                                .setFooter({ text: `1 ph√∫t n·ªØa quay l·∫°i v√† d√πng \`/economy ask-money\`` })
                                .setColor(client.config.embedGreen)
                                .setTimestamp()
                                .setThumbnail(client.user.displayAvatarURL());

                            await interaction.reply({ embeds: [embed] });
                        } else {
                            data.CommandsRan += 1;
                            await data.save();
                            const embed1 = new EmbedBuilder()
                                .setAuthor({ name: `H·ªá th·ªëng kinh t·∫ø ${client.config.DevBy}` })
                                .setTitle(`H·ªá th·ªëng kinh t·∫ø c·ªßa ${client.user.displayName} ${client.config.arrowDownEmoji}`)
                                .setDescription(
                                    `> B·∫°n v·ª´a xin ti·ªÅn nh∆∞ng kh√¥ng **th√†nh c√¥ng**, b·∫°n s·∫Ω kh√¥ng nh·∫≠n ƒë∆∞·ª£c b·∫•t k√¨ ƒë·ªìng ti·ªÅn n√†o:\n\n` +
                                    `‚Üí S·ªë ti·ªÅn ƒë√£ xin: **0 <a:xu:1320563128848744548>**\n` +
                                    `‚Ä¢ Th·ªùi gian xin ti·∫øp theo: **10 gi·ªù**`)
                                .setFooter({ text: `1 ph√∫t n·ªØa quay l·∫°i v√† d√πng \`/economy ask-money\`` })
                                .setColor(client.config.embedGreen)
                                .setTimestamp()
                                .setThumbnail(client.user.displayAvatarURL());

                            await interaction.reply({ embeds: [embed1] });
                        }

                            // Th√™m ng∆∞·ªùi d√πng v√†o timeout
                            timeout.push(user.id);
                            setTimeout(() => {
                                // X√≥a ng∆∞·ªùi d√πng kh·ªèi timeout sau 10 ti·∫øng
                                timeout = timeout.filter(id => id !== user.id);
                            }, 7200000); // 2 ti·∫øng
                            
                        break;
                    
                        case "gamble":
                            if (timeout.includes(interaction.user.id)) {
                                return await interaction.reply({ content: "H√£y quay l·∫°i sau **5 ph√∫t** ƒë·ªÉ ƒë√°nh b·∫°c nhi·ªÅu h∆°n!", ephemeral: true });
                            }

                            // Nh·∫≠n gi√° tr·ªã t·ª´ tham s·ªë v√† chuy·ªÉn ƒë·ªïi th√†nh s·ªë
                            let amountString1 = options.getString('amount') || '500'; // Nh·∫≠n gi√° tr·ªã d∆∞·ªõi d·∫°ng chu·ªói
                            let amount1 = parseFloat(amountString1.replace('.', '')); // Thay th·∫ø d·∫•u ch·∫•m ƒë·ªÉ chuy·ªÉn ƒë·ªïi th√†nh s·ªë

                            // Ki·ªÉm tra n·∫øu s·ªë ti·ªÅn l√† m·ªôt s·ªë h·ª£p l·ªá
                            if (isNaN(amount1) || amount1 <= 0) {
                                return await interaction.reply({ content: "S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá! h√£y d√πng c√°ch vi·∫øt ```1.000```", ephemeral: true });
                            }

                            if (!data) {
                                return await interaction.reply({ content: "B·∫°n ch∆∞a c√≥ t√†i kho·∫£n, h√£y t·∫°o m·ªôt t√†i kho·∫£n b·∫±ng c√°ch s·ª≠ d·ª•ng `/economy great-account`", ephemeral: true });
                            } else {
                                if (data.Wallet < amount1) {
                                    return await interaction.reply({ 
                                        content: 
                                            `B·∫°n ch·ªâ c√≥ **${data.Wallet.toLocaleString('vi-VN')} <a:xu:1320563128848744548>** trong v√≠ c·ªßa b·∫°n, ` +
                                            `h√£y l√†m vi·ªác chƒÉm ch·ªâ ƒë·ªÉ ki·∫øm th√™m ti·ªÅn :))...`, 
                                        ephemeral: true 
                                    });
                                }

                                // const acca = [
                            //     0.4, 0.8, 0.9, 0.5, 0.2, 0.3, 0.1, 0.6, 0.7, 0.3, // C√°c gi√° tr·ªã thua (10 ph·∫ßn t·ª≠)
                            //     1, 1, 1,                                           // Kh√¥ng th·∫Øng kh√¥ng thua (3 ph·∫ßn t·ª≠)
                            //     2, 2.5, 3, 5, 10                                   // C√°c gi√° tr·ªã th·∫Øng (4 ph·∫ßn t·ª≠)
                            // ];
                    
                            // const acca = [0.4, 0.8, 0.9, 0.5, 0.2, 0.3, 0.1, 0.6, 0.7, 0.3, 0.4, 0.8, 1, 5, 2.1, 1.6, 10, 2, 0.9, 1.1, 0, 0, 1, 2, 3, 0.2, 0.3, 0.4, 1.2, 0.3, 0.35, 0, 8, 0.2, 0.5, 0, 0.1, 2.5, 1.8, 0.4, 0.8, 1, 5, 2.1, 1.6, 10, 2, 0.9, 1.1, 0, 0, 1, 2, 3, 0.1, 2.5, 1.8, 100];



                                const acca = [0.4, 0.8, 0.9, 0.5, 0.2, 0.3, 0.1, 0.6, 0.4, 1, 1, 2, 3, 5, 0.8, 0.9, 0.5, 0.2, 0.3, 0.1, 0.6, 0.4, 0.8, 0.9, 0.5, 0.2, 0.3, 0.1, 0.6, 0.7, 0.3, 1, 1, 2, 3, 5];

                                const jobPick = acca[Math.floor(Math.random() * acca.length)];

                                let choice;
                                let winorlose;

                                if (jobPick === 1) {
                                    return await interaction.reply({ content: "B·∫°n kh√¥ng *th·∫Øng* hay *thua*" });
                                }

                                if (jobPick < 1) {
                                    choice = "Thua";
                                    winorlose = amount1

                                    if (winorlose > amount1 * 4) {
                                        winorlose = amount1 * 4;
                                    }

                                    data.Wallet -= winorlose; // Tr·ª´ s·ªë ti·ªÅn b·ªã m·∫•t kh·ªèi v√≠
                                } else {
                                    choice = "Th·∫Øng";
                                    winorlose = amount1 * jobPick;
                                    data.Wallet += (winorlose - amount1); // Th√™m s·ªë ti·ªÅn th·∫Øng v√†o v√≠
                                }

                                data.Gambled += 1;
                                data.CommandsRan += 1;
                                await data.save();

                                const embed = new EmbedBuilder()
                                    .setAuthor({ name: `H·ªá th·ªëng kinh t·∫ø ${client.config.DevBy}` })
                                    .setTitle(`H·ªá th·ªëng kinh t·∫ø c·ªßa ${client.user.displayName} ${client.config.arrowDownEmoji}`)
                                    .setThumbnail(client.user.displayAvatarURL())
                                    .setDescription(
                                        `B·∫°n v·ª´a ƒë√°nh b·∫°c **${amountString1} <a:xu:1320563128848744548>** v√† **${choice}**\n\n` +
                                        `üíµ S·ªë ti·ªÅn ƒë√°nh b·∫°c: **${amountString1} <a:xu:1320563128848744548>**\n` +
                                        `üé∞ T√≠ch l≈©y: **${jobPick}**\n\n` +
                                        `${choice === "Th·∫Øng" 
                                            ? `üéâ T·ªïng c·ªông Th·∫Øng: ${winorlose.toLocaleString('vi-VN')} <a:xu:1320563128848744548>` 
                                            : `üí∏ B·∫°n ƒë√£ m·∫•t: ${winorlose.toLocaleString('vi-VN')} <a:xu:1320563128848744548>`}`
                                        )
                                    .setFooter({ text: `Quay l·∫°i sau 5 ph√∫t v√† d√πng \`/economy gamble\`` })
                                    .setColor(config.embedGold)
                                    .setTimestamp();

                                await interaction.reply({ embeds: [embed] });

                                // ƒê·∫∑t th·ªùi gian ch·ªù cho l·ªánh gamble
                                timeout.push(interaction.user.id);
                                setTimeout(() => {
                                    timeout.shift();
                                }, 6000); // 5 ph√∫t 300000
                            }
                            break;
                
            case "work":
                    if (timeout.includes(interaction.user.id)) return await interaction.reply({ content: "h√£y quay l·∫°i sau **5 ph√∫t** ƒë·ªÉ l√†m vi·ªác l·∫°i!", ephemeral: true });

                    if (!data) return await interaction.reply({ content: "B·∫°n ch∆∞a c√≥ t√†i kho·∫£n, h√£y t·∫°o m·ªôt t√†i kho·∫£n b·∫±ng c√°ch s·ª≠ d·ª•ng \`/economy great-account\`", ephemeral: true });
                    else {
                        const jobs = [
                            "Valheim",
                            "LMHT",
                            "X√¢y d·ª±ng nh√† Valheim",
                            "X√¢y d·ª±ng map",
                            "Game th·ªß",
                            "Ng∆∞·ªùi s√°ng t·∫°o",
                            "Streamer",
                            "Quan h·ªá c√¥ng ch√∫ng",
                            "Qu·∫£n l√Ω",
                            "C√¢u 10 c√° vip",
                            "C√¢u 25 c√° condo"
                        ];

                        const jobPick = jobs[Math.floor(Math.random() * jobs.length)];

                        const amount = Math.round((Math.random() * 10000) + 10);

                        const hours = Math.round((Math.random() * 15) + 8);

                        const pph = Math.round(amount / hours);

                        data.Bank += amount;
                        data.Worked += 1;
                        data.HoursWorked += hours;
                        data.CommandsRan += 1;
                        data.save();

                        // ƒê·ªãnh d·∫°ng l·∫°i amount v√† pph theo ki·ªÉu VND
                        const formattedAmount = amount.toLocaleString('vi-VN');
                        const formattedPPH = pph.toLocaleString('vi-VN');

                        const embed = new EmbedBuilder()
                        .setAuthor({ name: `H·ªá th·ªëng kinh t·∫ø ${client.config.DevBy}` })
                        .setTitle(`H·ªá th·ªëng kinh t·∫ø c·ªßa ${client.user.displayName} ${client.config.arrowDownEmoji}`)
                        .setThumbnail(client.user.displayAvatarURL())
                        .setDescription(
                            `B·∫°n ƒë√£ l√†m vi·ªác v·ªõi t∆∞ c√°ch **${jobPick}**\n\n` +
                            `‚Üí S·ªë gi·ªù ƒë√£ l√†m vi·ªác: **${hours}** gi·ªù\n` +
                            `^ Tr·∫£ l∆∞∆°ng trong ng√†y: **${formattedAmount} <a:xu:1320563128848744548>**\n` +
                            `‚Üí Tr·∫£ l∆∞∆°ng m·ªói gi·ªù: **${formattedPPH} <a:xu:1320563128848744548>**`)
                        .setFooter({ text: `H√£y quay l·∫°i sau 5 ph√∫t v√† d√πng \`/economy work\`` })
                        .setColor(config.embedGold)
                        .setTimestamp()

                        await interaction.reply({ embeds: [embed] });

                        timeout.push(interaction.user.id);
                        setTimeout(() => {
                            timeout.shift();
                        }, 300000);
                    }
                    break;


                case "withdraw-money":
                            // Nh·∫≠n gi√° tr·ªã t·ª´ tham s·ªë v√† chuy·ªÉn ƒë·ªïi th√†nh s·ªë
                            let amountString2 = options.getString('amount');
                            let amount2 = parseFloat(amountString2.replace(/\./g, '')); // Thay th·∫ø d·∫•u ch·∫•m ƒë·ªÉ chuy·ªÉn ƒë·ªïi th√†nh s·ªë
                            
                            // Ki·ªÉm tra n·∫øu s·ªë ti·ªÅn l√† m·ªôt s·ªë h·ª£p l·ªá
                            if (isNaN(amount2) || amount2 <= 0) {
                                return await interaction.reply({ content: "S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá! H√£y d√πng c√°ch vi·∫øt ```1.000```", ephemeral: true });
                            }
                        
                            if (!data) {
                                return await interaction.reply({ content: "B·∫°n ch∆∞a c√≥ t√†i kho·∫£n, h√£y t·∫°o m·ªôt t√†i kho·∫£n b·∫±ng c√°ch s·ª≠ d·ª•ng \`/economy great-account\`", ephemeral: true });
                            } else {
                                if (data.Bank < amount2) {
                                    return await interaction.reply({ 
                                        content: 
                                            `B·∫°n ƒëang c·ªë g·∫Øng r√∫t **${amount2.toLocaleString('vi-VN')} <a:xu:1320563128848744548>** ` +
                                            `trong khi b·∫°n ch·ªâ c√≥ s·∫µn **${data.Bank.toLocaleString('vi-VN')} <a:xu:1320563128848744548>** ƒë·ªÉ th·ª±c hi·ªán vi·ªác ƒë√≥...`, 
                                        ephemeral: true 
                                    });
                                }
                        
                                data.Bank -= amount2;
                                data.Wallet += amount2;
                                data.CommandsRan += 1;
                                await data.save();
                        
                                const embed = new EmbedBuilder()
                                    .setAuthor({ name: `H·ªá th·ªëng kinh t·∫ø ${client.config.DevBy}` })
                                    .setTitle(`H·ªá th·ªëng kinh t·∫ø c·ªßa ${client.user.displayName} ${client.config.arrowDownEmoji}`)
                                    .setThumbnail(client.user.displayAvatarURL())
                                    .setColor(client.config.embedGreen)
                                    .setFooter({ text: `Kinh t·∫ø m√°y ch·ªß ${guild.name}`, iconURL: guild.iconURL() })
                                    .setDescription(
                                        `B·∫°n ƒë√£ r√∫t th√†nh c√¥ng **${amount2.toLocaleString('vi-VN')} <a:xu:1320563128848744548>** v·ªÅ v√≠ c·ªßa m√¨nh \n\n` +
                                        `Ch·∫°y \`/economy view-account\` ƒë·ªÉ xem th√¥ng tin m·ªõi c·ªßa b·∫°n.`
                                    )
                                    .setTimestamp();
                        
                                await interaction.reply({ embeds: [embed] });
                            }
                            break;

                    
            case "rob":
                        if (timeout.includes(interaction.user.id)) 
                            return await interaction.reply({ content: 'B·∫°n c·∫ßn ƒë·ª£i **1 ph√∫t** ƒë·ªÉ c∆∞·ªõp l·∫°i ng∆∞·ªùi d√πng kh√°c', ephemeral: true });

                        const userStealing = options.getUser('user');

                        let Data = await economySystem.findOne({ Guild: guild.id, User: user.id });
                        let DataUser = await economySystem.findOne({ Guild: guild.id, User: userStealing.id });

                        if (!Data) 
                            return await interaction.reply({ content: "B·∫°n ch∆∞a c√≥ t√†i kho·∫£n, h√£y t·∫°o m·ªôt t√†i kho·∫£n b·∫±ng c√°ch s·ª≠ d·ª•ng `/economy great-account`", ephemeral: true });
                        if (userStealing == interaction.user) 
                            return await interaction.reply({ content: 'B·∫°n **kh√¥ng th·ªÉ** c∆∞·ªõp ch√≠nh m√¨nh!', ephemeral: true });
                        if (!DataUser) 
                            return await interaction.reply({ content: 'Ng∆∞·ªùi d√πng ƒë√≥ **kh√¥ng** c√≥ t√†i kho·∫£n ph·ªï th√¥ng ƒë∆∞·ª£c t·∫°o, kh√¥ng c√≥ g√¨ ƒë·ªÉ c∆∞·ªõp', ephemeral: true });
                        if (DataUser.Wallet <= 0) 
                            return await interaction.reply({ content: 'Ng∆∞·ªùi d√πng ƒë√≥ **kh√¥ng** c√≥ ti·ªÅn trong v√≠ c·ªßa h·ªç, kh√¥ng c√≥ g√¨ ƒë·ªÉ c∆∞·ªõp', ephemeral: true });

                        let negative = Math.round((Math.random() * -150) - 10);
                        let positive = Math.round((Math.random() * 300) - 10);

                        const posN = [negative, positive];

                        const amount3 = Math.round(Math.random() * posN.length);
                        const value = posN[amount3];

                        if (Data.Wallet <= 0) 
                            return await interaction.reply({ content: 'B·∫°n **kh√¥ng th·ªÉ** c∆∞·ªõp c·ªßa ng∆∞·ªùi n√†y v√¨ v√≠ c·ªßa b·∫°n c√≥ **0 <a:xu:1320563128848744548>** trong ƒë√≥', ephemeral: true });

                        if (value > 0) {
                            // tr·ªôm th√†nh c√¥ng
                            const positiveChoices = [
                                "B·∫°n ƒë√£ ƒÉn tr·ªôm",
                                "Ng∆∞·ªùi ch·ªß ƒë√£ nh√¨n th·∫•y b·∫°n v√† gi√∫p b·∫°n c∆∞·ªõp",
                                "B·∫°n ƒë√£ c∆∞·ªõp",
                                "B·∫°n ƒë√£ l·∫•y",
                                "B·∫°n ƒë√£ c∆∞·ªõp th√†nh c√¥ng",
                                "B·∫°n ƒë√°nh ng∆∞·ªùi ƒë√≥ v√† l·∫•y",
                                "B·∫°n c∆∞·ªõp ng∆∞·ªùi r·ªìi b·ªè tr·ªën c√πng",
                                "B·∫°n ƒë√£ ƒë·ªôt nh·∫≠p v√†o t√†i kho·∫£n ng√¢n h√†ng c·ªßa ng∆∞·ªùi ƒë√≥ v√† l·∫•y",
                            ];

                            const posName = Math.floor(Math.random() * positiveChoices.length);

                            const begEmbed = new EmbedBuilder()
                                .setColor(client.config.embedGreen)
                                .setAuthor({ name: `H·ªá th·ªëng kinh t·∫ø ${client.config.DevBy}`})
                                .setTitle(`H·ªá th·ªëng kinh t·∫ø c·ªßa ${client.user.displayName} ${client.config.arrowDownEmoji}`)
                                .addFields({ name: '> B·∫°n ƒë√£ c∆∞·ªõp v√†', value: `‚Ä¢ ${positiveChoices[posName]} ${value.toLocaleString('vi-VN')} <a:xu:1320563128848744548>`})  // Thay ƒë·ªïi s·ªë ti·ªÅn sang ƒë·ªãnh d·∫°ng vnd
                                .setFooter({ text: `Kinh t·∫ø m√°y ch·ªß ${guild.name}`, iconURL: guild.iconURL() })
                                .setThumbnail(client.user.avatarURL())
                                .setTimestamp();

                            await interaction.reply({ embeds: [begEmbed] });

                            Data.Wallet += value;
                            await Data.save();

                            DataUser.Wallet -= value;
                            await DataUser.save();
                        } else if (value < 0) {
                            // tr·ªôm th·∫•t b·∫°i
                            const negativeChoices = [
                                "B·∫°n b·ªã c·∫£nh s√°t b·∫Øt v√† b·ªã l·∫°c",
                                "B·∫°n ƒë·ªÉ l·∫°i gi·∫•y t·ªù t√πy th√¢n v√† b·ªã b·∫Øt, b·∫°n thua cu·ªôc",
                                "Ng∆∞·ªùi ƒë√≥ ƒë√°nh b·∫°n b·∫•t t·ªânh v√† l·∫•y ƒëi",
                                "Ng∆∞·ªùi ƒë√≥ nh√¨n th·∫•y b·∫°n v√† l·∫•y",
                                "Ng∆∞·ªùi ƒë√≥ b·∫Øt ƒë∆∞·ª£c b·∫°n v√† l·∫•y ƒëi",
                                "Ng∆∞·ªùi ƒë√≥ ƒë√£ ƒë√°nh b·∫°n v√† l·∫•y ƒëi",
                                "Ng∆∞·ªùi ƒë√≥ ƒë√£ g·ªçi c·∫£nh s√°t v√† b·∫°n ƒë√£ thua cu·ªôc",
                            ];

                            const wal = Data.Wallet;
                            if (isNaN(value)) 
                                return await interaction.reply({ content: 'Ng∆∞·ªùi d√πng n√†y ƒë√£ g·ªçi c·∫£nh s√°t ƒë·∫øn b·∫Øt b·∫°n nh∆∞ng b·∫°n ƒë√£ b·ªè ch·∫°y. B·∫°n kh√¥ng m·∫•t hay ƒë·∫°t ƒë∆∞·ª£c g√¨ c·∫£', ephemeral: true });

                            const negName = Math.floor(Math.random() * negativeChoices.length);

                            let nonSymbol;
                            if (value - wal < 0) {
                                const stringV = `${value}`;

                                nonSymbol = await stringV.slice(1);  // X√≥a d·∫•u √¢m t·ª´ gi√° tr·ªã s·ªë

                                // v√≠ √¢m ti·ªÅn
                                const los = new EmbedBuilder()
                                    .setColor(client.config.embedGreen)
                                    .setTitle(`H·ªá th·ªëng kinh t·∫ø c·ªßa ${client.user.displayName} ${client.config.arrowDownEmoji}`)
                                    .setAuthor({ name: `H·ªá th·ªëng kinh t·∫ø ${client.config.DevBy}`})
                                    .addFields({ name: '> B·∫°n ƒë√£ c∆∞·ªõp v√†', value: `‚Ä¢ ${negativeChoices[negName]} ${nonSymbol.toLocaleString('vi-VN')} <a:xu:1320563128848744548>`})  // Thay ƒë·ªïi s·ªë ti·ªÅn sang ƒë·ªãnh d·∫°ng vnd
                                    .setFooter({ text: `Kinh t·∫ø m√°y ch·ªß ${guild.name}`, iconURL: guild.iconURL() })
                                    .setThumbnail(client.user.avatarURL())
                                    .setTimestamp();

                                Data.Bank += value;
                                await Data.save();

                                DataUser.Wallet -= value;
                                await DataUser.save();

                                return interaction.reply({ embeds: [los] });
                            }

                            const begLostEmbed = new EmbedBuilder()
                                .setColor(client.config.embedEconomy)
                                .setTitle(`H·ªá th·ªëng kinh t·∫ø c·ªßa ${client.user.displayName} ${client.config.arrowDownEmoji}`)
                                .setAuthor({ name: `H·ªá th·ªëng kinh t·∫ø ${client.config.DevBy}`})
                                .addFields({ name: '> B·∫°n ƒë√£ c∆∞·ªõp v√†', value: `‚Ä¢ ${negativeChoices[negName]} ${value.toLocaleString('vi-VN')} <a:xu:1320563128848744548>`})  // Thay ƒë·ªïi s·ªë ti·ªÅn sang ƒë·ªãnh d·∫°ng vnd
                                .setFooter({ text: `Kinh t·∫ø m√°y ch·ªß ${guild.name}`, iconURL: guild.iconURL() })
                                .setThumbnail(client.user.avatarURL())
                                .setTimestamp();

                            await interaction.reply({ embeds: [begLostEmbed] });

                            Data.Wallet += value;
                            await Data.save();

                            DataUser.Wallet -= value;
                            await DataUser.save();
                        }

                        timeout.push(interaction.user.id);
                        setTimeout(() => {
                            timeout.shift();
                        }, 60000);
                    break;

            }
        } catch (error) {
            console.error(`ƒê√£ x·∫£y ra l·ªói khi th·ª±c thi l·ªánh ${sub}:`, error);
            await interaction.reply({ content: 'ƒê√£ x·∫£y ra l·ªói! Th·ª≠ l·∫°i sau', ephemeral: true });
        }
    }
}
