const { SlashCommandBuilder, PermissionsBitField, EmbedBuilder } = require("discord.js");
const AutoMod = require('../../schemas/autoModSchema');
const { getPreferredLanguage } = require('../../languageUtils');
const CommandStatus = require('../../schemas/Command_Status');
const { checkAdministrator } = require('../../permissionCheck');

// H√†m ƒë·ªÉ chuy·ªÉn ƒë·ªïi th·ªùi gian t·ª´ ƒë·ªãnh d·∫°ng chu·ªói th√†nh gi√¢y
const parseTime = (timeStr) => {
    const timeFormat = timeStr.toLowerCase();
    const value = parseInt(timeFormat.slice(0, -1));
    const unit = timeFormat.slice(-1);

    if (isNaN(value)) return NaN;

    switch (unit) {
        case 's': return value;
        case 'm': return value * 60;
        case 'h': return value * 60 * 60;
        case 'd': return value * 60 * 60 * 24;
        default: return NaN;
    }
};

module.exports = {
    data: new SlashCommandBuilder()
        .setName("anti_spam")
        .setDescription("üîπ Qu·∫£n l√Ω h·ªá th·ªëng ngƒÉn spam tin nh·∫Øn")
        .addSubcommand(subcommand =>
            subcommand
                .setName("set_channel")
                .setDescription("üîπ C√†i ƒë·∫∑t h·ªá th·ªëng ngƒÉn spam tin nh·∫Øn cho server")
                .addIntegerOption(option =>
                    option.setName("limit")
                        .setDescription("Gi·ªõi h·∫°n tin nh·∫Øn spam")
                        .setRequired(true)
                )
                .addStringOption(option =>
                    option.setName("mute_time")
                        .setDescription("Th·ªùi gian mute (v√≠ d·ª•: 10s, 5m, 1h)")
                        .setRequired(true)
                )
                .addStringOption(option =>
                    option.setName("difference")
                        .setDescription("Kho·∫£ng th·ªùi gian gi·ªØa c√°c tin nh·∫Øn (v√≠ d·ª•: 2s, 1m)")
                        .setRequired(true)
                )
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName("remove")
                .setDescription("üîπ X√≥a d·ªØ li·ªáu h·ªá th·ªëng ch·ªëng spam tin nh·∫Øn v√† k√™nh log-spam-tin-nh·∫Øn")
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName("set_log")
                .setDescription("üîπ Thi·∫øt l·∫≠p k√™nh log spam cho server c·ªßa b·∫°n")
        ),

    async execute(interaction, client) {
        const subcommand = interaction.options.getSubcommand();

        // Ki·ªÉm tra tr·∫°ng th√°i c·ªßa l·ªánh
        const commandStatus = await CommandStatus.findOne({ command: `/anti_spam_mess` });
        if (commandStatus && commandStatus.status === 'off') {
            return interaction.reply('L·ªánh n√†y ƒë√£ b·ªã t·∫Øt, vui l√≤ng th·ª≠ l·∫°i sau.');
        }

        // Ki·ªÉm tra quy·ªÅn Administrator
        const hasPermission = await checkAdministrator(interaction);
        if (!hasPermission) return;

        if (subcommand === "set_log") {
            // Ki·ªÉm tra tr·∫°ng th√°i c·ªßa l·ªánh
            const commandStatus = await CommandStatus.findOne({ command: '/setup_anti_channel' });
            
            // N·∫øu l·ªánh ƒëang t·∫Øt, g·ª≠i th√¥ng b√°o v√† kh√¥ng th·ª±c hi·ªán l·ªánh
            if (commandStatus && commandStatus.status === 'off') {
                return interaction.reply('L·ªánh n√†y ƒë√£ b·ªã t·∫Øt, vui l√≤ng th·ª≠ l·∫°i sau.');
            }
                        
            const start = Date.now(); // L∆∞u l·∫°i th·ªùi ƒëi·ªÉm b·∫Øt ƒë·∫ßu ƒë·ªÉ t√≠nh th·ªùi gian thi·∫øt l·∫≠p
            
            const hasPermission = await checkAdministrator(interaction);
            if (!hasPermission) return;
            
            // G·ª≠i tin nh·∫Øn kh·ªüi t·∫°o thi·∫øt l·∫≠p
            await interaction.reply({ content: 'ƒêang kh·ªüi t·∫°o d·ªØ li·ªáu thi·∫øt l·∫≠p nhanh!', ephemeral: true });
            
            // Ki·ªÉm tra quy·ªÅn c·ªßa bot
            if (!interaction.guild.members.me.permissions.has(PermissionsBitField.Flags.ManageRoles) ||
                !interaction.guild.members.me.permissions.has(PermissionsBitField.Flags.ManageChannels)) {
                return interaction.editReply(':ca_reject: Bot kh√¥ng c√≥ quy·ªÅn c·∫ßn thi·∫øt ƒë·ªÉ ti·∫øp t·ª•c (Qu·∫£n l√Ω Vai tr√≤, Qu·∫£n l√Ω K√™nh).');
            }
            await interaction.followUp({ content: 'ƒêang ki·ªÉm tra quy·ªÅn h·∫°n...', ephemeral: true });
            
            // Ki·ªÉm tra v·ªã tr√≠ vai tr√≤ c·ªßa bot
            const botRole = interaction.guild.members.me.roles.highest;
            if (!botRole) {
                return interaction.editReply({ content: 'Kh√¥ng th·ªÉ t√¨m th·∫•y vai tr√≤ c·ªßa bot ƒë·ªÉ ki·ªÉm tra.', ephemeral: true });
            }
            await interaction.followUp({ content:'ƒêang ki·ªÉm tra v·ªã tr√≠ vai tr√≤...', ephemeral: true });
            
            // T·∫°o mute role n·∫øu ch∆∞a t·ªìn t·∫°i
            let muteRole = interaction.guild.roles.cache.find(role => role.name === 'Muted');
            if (!muteRole) {
                muteRole = await interaction.guild.roles.create({
                    name: 'Muted',
                    color: '#818386',
                    permissions: [],
                    reason: 'T·∫°o role Muted cho h·ªá th·ªëng ngƒÉn spam tin nh·∫Øn',
                });
            
            // C·∫≠p nh·∫≠t c√°c k√™nh ƒë·ªÉ role "Muted" kh√¥ng c√≥ quy·ªÅn g·ª≠i tin nh·∫Øn
            interaction.guild.channels.cache.forEach(async (channel) => {
                await channel.permissionOverwrites.create(muteRole, {
                        SendMessages: false,
                        Speak: false,
                        Connect: false,
                    });
                });
            }
            await interaction.followUp({ content: 'ƒêang t·∫°o mute role...', ephemeral: true });
            
            // T·∫°o k√™nh log n·∫øu ch∆∞a t·ªìn t·∫°i
            let logChannel = interaction.guild.channels.cache.find(ch => ch.name === 'log-spam-tin-nh·∫Øn');
            if (!logChannel) {
                logChannel = await interaction.guild.channels.create({
                    name: 'log-spam-tin-nh·∫Øn',
                    type: 0, // Lo·∫°i l√† text channel
                    reason: 'T·∫°o k√™nh log cho h·ªá th·ªëng ngƒÉn spam tin nh·∫Øn',
                });
            }
            await interaction.followUp({ content: 'ƒêang t·∫°o k√™nh log...', ephemeral: true });
            
            // L∆∞u th√¥ng tin v√†o c∆° s·ªü d·ªØ li·ªáu
            let guildConfig = await AutoMod.findOne({ guildId: interaction.guild.id });
            if (!guildConfig) {
                guildConfig = new AutoMod({
                    guildId: interaction.guild.id,
                    logChannelId: logChannel.id,
                    heatSettings: {
                        limit: 5,
                        muteTime: 300,
                        difference: 10,
                    },
                    antiLinkChannels: [logChannel.id], // Th√™m k√™nh ch·ªëng li√™n k·∫øt
                });
            } else {
                guildConfig.logChannelId = logChannel.id;
            }
            
            await guildConfig.save();
            await interaction.followUp({ content: 'ƒêang l∆∞u c√†i ƒë·∫∑t...', ephemeral: true });
            
            // T√≠nh to√°n th·ªùi gian th·ª±c hi·ªán
            const end = Date.now();
            const timeTaken = end - start;
            
            // Ph·∫£n h·ªìi ho√†n th√†nh thi·∫øt l·∫≠p
            return interaction.followUp(`Setup Th√†nh C√¥ng!\nQu√° tr√¨nh thi·∫øt l·∫≠p k·∫øt th√∫c th√†nh c√¥ng trong ${timeTaken}ms. B√¢y gi·ªù b·∫°n c√≥ th·ªÉ ti·∫øp t·ª•c d√πng l·ªánh \`/anti-spam-mess\` ƒë·ªÉ c√†i ƒë·∫∑t kh√°c theo y√™u c·∫ßu c·ªßa ri√™ng b·∫°n.\nN·∫øu b·∫°n kh√¥ng d√πng l·ªánh \`/anti-spam-mess\` ƒë·ªÉ c√†i ƒë·∫∑t theo y√™u c·∫ßu c·∫£u b·∫°n th√¨ m·∫∑c ƒë·ªãnh s·∫Ω l√† \`\`\`Limit: 5, muteTime: 300, difference: 10\`\`\``);
        }

        if (subcommand === 'set_channel') {
            const language = await getPreferredLanguage(interaction.guild.id, interaction.user.id);

            // L·∫•y tham s·ªë t·ª´ l·ªánh
            const limit = interaction.options.getInteger("limit");
            const muteTimeInput = interaction.options.getString("mute_time");
            const differenceInput = interaction.options.getString("difference");

            const muteTime = parseTime(muteTimeInput);
            const difference = parseTime(differenceInput);

            if (isNaN(limit) || isNaN(muteTime) || isNaN(difference)) {
                return interaction.reply(language === 'en'
                    ? `**${interaction.user.displayName}**, please provide valid parameters.\n\nExample:\n\`limit: 10\`\n\`mute_time: 10s\`\n\`difference: 10s\``
                    : `**${interaction.user.displayName}** vui l√≤ng cung c·∫•p ƒë√∫ng tham s·ªë.\n\nV√≠ d·ª•:\n\`limit: 10\`\n\`mute_time: 10s\`\n\`difference: 10s\``);
            }

            let guildConfig = await AutoMod.findOne({ guildId: interaction.guild.id });
            if (!guildConfig) {
                guildConfig = new AutoMod({ guildId: interaction.guild.id });
            }

            if (!guildConfig.logChannelId) {
                return interaction.reply(language === 'en'
                    ? `**${interaction.user.displayName}** need to choose **\`set_log\`** command before setting up the system.`
                    : `**${interaction.user.displayName}** c·∫ßn l·ª±a ch·ªçn **\`set_log\`** tr∆∞·ªõc khi setup h·ªá th·ªëng.`);
            }

            guildConfig.heatSettings.limit = limit;
            guildConfig.heatSettings.muteTime = muteTime;
            guildConfig.heatSettings.difference = difference;
            await guildConfig.save();

            const successEmbed = new EmbedBuilder()
                .setTitle(language === 'en' ? 'AUTO MESSAGE SPAM SYSTEM SETTINGS UPDATED' : 'C√ÄI ƒê·∫∂T CH·ªêNG SPAM ƒê√É C·∫¨P NH·∫¨T')
                .setDescription(
                    language === 'en'
                        ? `**Maximum messages before mute**: ${limit}\n**Mute duration**: ${muteTimeInput} (${muteTime} seconds)\n**Message interval**: ${differenceInput} (${difference} seconds)`
                        : `**S·ªë tin nh·∫Øn t·ªëi ƒëa b·ªã mute**: ${limit}\n**Th·ªùi gian mute**: ${muteTimeInput} (${muteTime} gi√¢y)\n**Kho·∫£ng c√°ch tin nh·∫Øn**: ${differenceInput} (${difference} gi√¢y)`
                )
                .setColor('Gold');

            return interaction.reply({ embeds: [successEmbed] });
        }

        if (subcommand === 'remove') {
            const guildConfig = await AutoMod.findOne({ guildId: interaction.guild.id });
            if (!guildConfig) {
                return interaction.reply('Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu h·ªá th·ªëng ch·ªëng spam tin nh·∫Øn cho server n√†y.');
            }

            await AutoMod.deleteOne({ guildId: interaction.guild.id });
            await interaction.reply('ƒê√£ x√≥a d·ªØ li·ªáu h·ªá th·ªëng ch·ªëng spam tin nh·∫Øn.');

            const logChannel = interaction.guild.channels.cache.find(ch => ch.name === 'log-spam-tin-nh·∫Øn');
            if (logChannel) {
                await logChannel.delete('X√≥a k√™nh log khi x√≥a h·ªá th·ªëng ch·ªëng spam tin nh·∫Øn.');
            } else {
                await interaction.followUp('Kh√¥ng t√¨m th·∫•y k√™nh log-spam-tin-nh·∫Øn.');
            }
        }
    },
};





// const { SlashCommandBuilder, PermissionsBitField, EmbedBuilder } = require("discord.js");
// const AutoMod = require('../../schemas/autoModSchema');
// const { getPreferredLanguage } = require('../../languageUtils');
// const CommandStatus = require('../../schemas/Command_Status');

// // H√†m ƒë·ªÉ chuy·ªÉn ƒë·ªïi th·ªùi gian t·ª´ ƒë·ªãnh d·∫°ng chu·ªói th√†nh gi√¢y
// const parseTime = (timeStr) => {
//     const timeFormat = timeStr.toLowerCase();
//     const value = parseInt(timeFormat.slice(0, -1));
//     const unit = timeFormat.slice(-1);

//     if (isNaN(value)) return NaN;

//     switch (unit) {
//         case 's': return value;
//         case 'm': return value * 60;
//         case 'h': return value * 60 * 60;
//         case 'd': return value * 60 * 60 * 24;
//         default: return NaN;
//     }
// };

// module.exports = {
//     data: new SlashCommandBuilder()
//         .setName("anti_spam_mess")
//         .setDescription("C√†i ƒë·∫∑t h·ªá th·ªëng ngƒÉn spam tin nh·∫Øn cho server")
//         .setDMPermission(false) // Kh√¥ng cho ph√©p d√πng trong DM
//         .addIntegerOption(option => 
//             option.setName("limit")
//                 .setDescription("Gi·ªõi h·∫°n tin nh·∫Øn spam")
//                 .setRequired(true)
//         )
//         .addStringOption(option => 
//             option.setName("mute_time")
//                 .setDescription("Th·ªùi gian mute (v√≠ d·ª•: 10s, 5m, 1h)")
//                 .setRequired(true)
//         )
//         .addStringOption(option => 
//             option.setName("difference")
//                 .setDescription("Kho·∫£ng th·ªùi gian gi·ªØa c√°c tin nh·∫Øn (v√≠ d·ª•: 2s, 1m)")
//                 .setRequired(true)
//         ),
    
//     async execute(interaction, client) {

//         // Ki·ªÉm tra tr·∫°ng th√°i c·ªßa l·ªánh
//         const commandStatus = await CommandStatus.findOne({ command: '/anti_spam_mess' });

//         // N·∫øu l·ªánh ƒëang t·∫Øt, g·ª≠i th√¥ng b√°o v√† kh√¥ng th·ª±c hi·ªán l·ªánh
//         if (commandStatus && commandStatus.status === 'off') {
//             return interaction.reply('L·ªánh n√†y ƒë√£ b·ªã t·∫Øt, vui l√≤ng th·ª≠ l·∫°i sau.');
//         }

//         if (!interaction.guild) {
//             return;
//         }

//         // L·∫•y ng√¥n ng·ªØ ƒë√£ l∆∞u c·ªßa ng∆∞·ªùi d√πng
//         const language = await getPreferredLanguage(interaction.guild.id, interaction.user.id);

//         // Ki·ªÉm tra quy·ªÅn Administrator
//         if (!interaction.member.permissions.has(PermissionsBitField.Flags.Administrator)) {
//             return interaction.reply(language === 'en' 
//                 ? `**${interaction.user.displayName}** needs **\`Administrator\`** permission to use this command.` 
//                 : `**${interaction.user.displayName}** c·∫ßn quy·ªÅn **\`Administrator\`** ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh.`);
//         }

//         // L·∫•y c√†i ƒë·∫∑t t·ª´ MongoDB
//         let guildConfig = await AutoMod.findOne({ guildId: interaction.guild.id });
//         if (!guildConfig) {
//             guildConfig = new AutoMod({ guildId: interaction.guild.id });
//         }

//         // N·∫øu ch∆∞a thi·∫øt l·∫≠p k√™nh log
//         if (!guildConfig.logChannelId) {
//             return interaction.reply(language === 'en' 
//                 ? `**${interaction.user.displayName}** needs to use the **\`setup-anti-channel\`** command before setting up the **\`Auto Message Spam Detection System\`**.`
//                 : `**${interaction.user.displayName}** c·∫ßn s·ª≠ d·ª•ng l·ªánh **\`setup-anti-channel\`** tr∆∞·ªõc khi setup **\`H·ªá th·ªëng ngƒÉn spam tin nh·∫Øn t·ª± ƒë·ªông\`**.`);
//         }

//         // L·∫•y c√°c tham s·ªë t·ª´ l·ªánh
//         const limit = interaction.options.getInteger("limit");
//         const muteTimeInput = interaction.options.getString("mute_time");
//         const differenceInput = interaction.options.getString("difference");

//         const muteTime = parseTime(muteTimeInput); // Chuy·ªÉn ƒë·ªïi muteTime t·ª´ chu·ªói th√†nh gi√¢y
//         const difference = parseTime(differenceInput); // Chuy·ªÉn ƒë·ªïi difference t·ª´ chu·ªói th√†nh gi√¢y

//         if (isNaN(limit) || isNaN(muteTime) || isNaN(difference)) {
//             return interaction.reply(language === 'en'
//                 ? `**${interaction.user.displayName}**, please provide valid parameters.\n\nExample:\n\`limit: 10\`                  (up to 10 messages before mute)\n\`mute_time: 10s\`      (mute duration is 10 seconds)\n\`mute_time: 10m\`      (mute duration is 10 minutes)\n\`mute_time: 10h\`      (mute duration is 10 hours)\n\`mute_time: 10d\`         (mute duration is 10 days)\n\`difference: 10s\`         (message interval of 10 seconds will be considered spam)\n\`difference: 10m\`      (message interval of 10 minutes will be considered spam).`
//                 : `**${interaction.user.displayName}** vui l√≤ng cung c·∫•p ƒë√∫ng tham s·ªë.\n\nV√≠ d·ª•:\n\`limit: 10\`                  (t·ªëi ƒëa 10 tin nh·∫Øn s·∫Ω b·ªã mute)\n\`mute_time: 10s\`      (t·ª©c l√† th·ªùi gian mute l√† 10 gi√¢y)\n\`mute_time: 10m\`      (t·ª©c l√† th·ªùi gian mute l√† 10 ph√∫t)\n\`mute_time: 10h\`      (t·ª©c l√† th·ªùi gian mute l√† 10 ti·∫øng)\n\`mute_time: 10d\`         (t·ª©c l√† th·ªùi gian mute l√† 10 ng√†y)\n\`difference: 10s\`         (t·ª©c l√† kho·∫£ng c√°ch gi·ªØa c√°c tin nh·∫Øn l√† 10 gi√¢y s·∫Ω coi l√† spam)\n\`difference: 10m\`      (t·ª©c l√† kho·∫£ng c√°ch gi·ªØa c√°c tin nh·∫Øn l√† 10 ph√∫t s·∫Ω coi l√† spam).`);
//         }

//         // C·∫≠p nh·∫≠t c√†i ƒë·∫∑t Heat
//         guildConfig.heatSettings.limit = limit;
//         guildConfig.heatSettings.muteTime = muteTime;
//         guildConfig.heatSettings.difference = difference;
//         await guildConfig.save();

//         // T·∫°o v√† g·ª≠i th√¥ng b√°o th√†nh c√¥ng
//         const successEmbed = new EmbedBuilder()
//             .setTitle(language === 'en' ? 'AUTO MESSAGE SPAM SYSTEM SETTINGS UPDATED' : 'C√ÄI ƒê·∫∂T H·ªÜ TH·ªêNG CH·ªêNG SPAM TIN NH·∫ÆN ƒê√É ƒê∆Ø·ª¢C C·∫¨P NH·∫¨T')
//             .setDescription(
//                 language === 'en'
//                 ? `**Maximum number of messages before mute**: ${limit} actions\n` +
//                   `**Mute duration**: ${muteTimeInput} [${muteTime} seconds]\n` +
//                   `**Message interval considered as spam**: ${differenceInput} [${difference}s/action]\n` +
//                   `**Penalty**: Mute`
//                 : `**S·ªë l∆∞·ª£ng tin nh·∫Øn t·ªëi ƒëa s·∫Ω b·ªã mute**: ${limit} h√†nh ƒë·ªông\n` +
//                   `**Th·ªùi gian mute**: ${muteTimeInput} [${muteTime} gi√¢y]\n` +
//                   `**Kho·∫£ng c√°ch gi·ªØa c√°c tin nh·∫Øn s·∫Ω coi l√† spam**: ${differenceInput} [${difference}s/h√†nh ƒë·ªông]\n` +
//                   `**H√¨nh ph·∫°t**: Mute`
//             )
//             .setColor(`Gold`);

//         return interaction.reply({ embeds: [successEmbed] });
//     }
// };
