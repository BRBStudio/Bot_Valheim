const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const votes = require('../../schemas/Vote_open_valheim');

module.exports = {
    id: 'sever_valheim_membervotes',
    description: 'N√∫t n√†y hi·ªÉn th·ªã danh s√°ch phi·∫øu m·ªü server Valheim.',
    async execute(interaction) {
        const { guild } = interaction;

        // L·∫•y d·ªØ li·ªáu b·ªè phi·∫øu c·ªßa ƒë√∫ng server
        const voteData = await votes.findOne({ Guild: guild.id });
        if (!voteData || voteData.Voters.length === 0) {
            return await interaction.reply({ content: `__**Valheim Roleplay**__\n‚ùå Hi·ªán t·∫°i kh√¥ng c√≥ ai tham gia b·ªè phi·∫øu cho server **${voteData.Server}**!`, ephemeral: true });
        }

        const voters = voteData.Voters;
        const pageSize = 10; // S·ªë ng∆∞·ªùi b·ªè phi·∫øu m·ªói trang
        let currentPage = 0;

        // H√†m t·∫°o Embed
        const generateEmbed = (page) => {
            const start = page * pageSize;
            const end = start + pageSize;
            const list = voters.slice(start, end)
                .map((id, index) => `**${start + index + 1}.** <@${id}>`)
                .join('\n');

            return new EmbedBuilder()
                .setColor('Gold')
                .setAuthor({ name: 'Valheim Roleplay' })
                .setTitle(`üìú Danh s√°ch phi·∫øu b·∫ßu server **${voteData.Server}** (M√£ tham gia: ${voteData.Code})`)
                .setDescription(list || 'Kh√¥ng c√≥ d·ªØ li·ªáu')
                .addFields(
                    { name: '‚è±Ô∏è Th·ªùi gian b·ªè phi·∫øu:', value: `**3 th√°ng**` }
                )
                .setFooter({ 
                    text: 
                    `S·ªë phi·∫øu y√™u c·∫ßu: ${voteData.Vote_request}` +
                    `                                                                                                       ${page + 1} / ${Math.ceil(voters.length / pageSize)}`
                });
        };

        // T·∫°o n√∫t ph√¢n trang
        const createButtons = (page) => {
            return new ActionRowBuilder().addComponents(
                new ButtonBuilder()
                    .setCustomId('prev_valheim')
                    .setLabel('‚¨ÖÔ∏è')
                    .setStyle(ButtonStyle.Primary)
                    .setDisabled(page === 0),

                new ButtonBuilder()
                    .setCustomId('next_valheim')
                    .setLabel('‚û°Ô∏è')
                    .setStyle(ButtonStyle.Primary)
                    .setDisabled((page + 1) * pageSize >= voters.length)
            );
        };

        await interaction.deferReply({ ephemeral: true });

        // G·ª≠i tin nh·∫Øn v·ªõi trang ƒë·∫ßu ti√™n
        const message = await interaction.editReply({ embeds: [generateEmbed(0)], components: [createButtons(0)] });

        // T·∫°o b·ªô thu th·∫≠p t∆∞∆°ng t√°c ƒë·ªÉ x·ª≠ l√Ω n√∫t b·∫•m
        const collector = message.createMessageComponentCollector(); // { time: 60000 }

        collector.on('collect', async (btnInteraction) => {
            if (btnInteraction.user.id !== interaction.user.id) {
                return btnInteraction.reply({ content: `‚ö†Ô∏è B·∫°n kh√¥ng th·ªÉ ƒëi·ªÅu khi·ªÉn danh s√°ch server **${voteData.Server}** n√†y!`, ephemeral: true });
            }

            if (btnInteraction.customId === 'prev_valheim') currentPage--;
            if (btnInteraction.customId === 'next_valheim') currentPage++;

            await btnInteraction.update({ embeds: [generateEmbed(currentPage)], components: [createButtons(currentPage)] });
        });

        // collector.on('end', async () => {
        //     try {
        //         await interaction.editReply({ components: [] });
        //     } catch (err) {
        //         console.error('L·ªói khi x√≥a n√∫t sau khi h·∫øt th·ªùi gian:', err);
        //     }
        // });
    }
};
