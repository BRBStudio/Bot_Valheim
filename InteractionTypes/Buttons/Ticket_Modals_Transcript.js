/*
    Ch·ª©c nƒÉng: ƒê·ªãnh nghƒ©a m·ªôt n√∫t b·∫•m v√† h√†nh ƒë·ªông khi n√∫t n√†y ƒë∆∞·ª£c nh·∫•n.
    l·∫•y n√∫t t·∫°i ActionRowBuilder.js d√πng cho l·ªánh:
    - hi
*/
const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require(`discord.js`)
const config = require(`../../config`)
const interactionError = require('../../Events/WebhookError/interactionError');
const sourcebin = require("sourcebin");

module.exports = {
    id: 'Ticket_Modals_Transcript',
    description: `N√∫t nh·∫≠t k√Ω tr√≤ truy·ªán c·ªßa v√©, ƒë∆∞·ª£c chuy·ªÉn sang \`https://sourceb.in/\`.`,
    async execute(interaction, client) {
    try {

            const channelTopic = interaction.channel.topic;
            const ticketOwnerId = channelTopic?.match(/Ng∆∞·ªùi S·ª≠ d·ª•ng v√©: (\d+)/)?.[1];

            if (!ticketOwnerId || interaction.user.id !== ticketOwnerId) {
                return await interaction.reply({ content: `üö´ B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng n√∫t n√†y trong k√™nh v√© n√†y.`, ephemeral: true });
            }

            await interaction.deferReply({ ephemeral: true });

            // T·∫°o transcript cho v√©
            const messages = await interaction.channel.messages.fetch({ limit: 100 });
            let content = "";
            messages.reverse().forEach(msg => {
                content += `${msg.author.displayName}: ${msg.content}\n`;
            });

            const bin = await sourcebin.create({
                title: `NH·∫¨T K√ù TR√í CHUY·ªÜN CHO K√äNH ${interaction.channel.name}`,
                description: `Nh·∫≠t k√Ω tr√≤ chuy·ªán ƒë∆∞·ª£c s·ª≠ d·ª•ng trong m√°y ch·ªß ‚û• ${interaction.guild.name}`,
                files: [
                    {
                        name: 'Nh·∫≠t k√Ω tr√≤ chuy·ªán', // ƒê·∫∑t t√™n file
                        content: content, // N·ªôi dung c·ªßa file
                        language: 'SQL' // ƒê·ªãnh d·∫°ng ch·ªØ n·ªôi dung, 'text' l√† vƒÉn b·∫£n th√¥ng th∆∞·ªùng
                    }
                ]
            });

            await interaction.editReply({ content: `üìú **ƒê√¢y l√† nh·∫≠t k√Ω tr√≤ chuy·ªán c·ªßa b·∫°n: [B·∫•m v√†o ƒë√¢y ƒë·ªÉ xem](${bin.url})**`, ephemeral: true });

        } catch (error) {
            interactionError.execute(interaction, error, client);
        }
    },
};




// const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require(`discord.js`)
// const config = require(`../../config`)
// const interactionError = require('../../Events/WebhookError/interactionError');
// const sourcebin = require("sourcebin_js");

// module.exports = {
//     id: 'ticketTranscript',
//     async execute(interaction, client) {
//     try {

//             // T·∫°o transcript cho v√©
//             const messages = await interaction.channel.messages.fetch({ limit: 100 });
//             let content = "";
//             messages.reverse().forEach(msg => {
//                 content += `${msg.author.username}: ${msg.content}\n`;
//             });

//             const bin = await sourcebin.create([
//                 {
//                     name: 'Nh·∫≠t k√Ω tr√≤ chuy·ªán',
//                     content: content,
//                     language: 'SQL'
//                 }
//             ], {
//                 title: `NH·∫¨T K√ù TR√í CHUY·ªÜN CHO K√äNH ${interaction.channel.name}`,
//                 description: `Nh·∫≠t k√Ω tr√≤ chuy·ªán ƒë∆∞·ª£c s·ª≠ d·ª•ng trong m√°y ch·ªß ‚û• ${interaction.guild.name}`
//             });

//             await interaction.reply({ content: `üìú **ƒê√¢y l√† nh·∫≠t k√Ω tr√≤ chuy·ªán c·ªßa b·∫°n: [B·∫•m v√†o ƒë√¢y ƒë·ªÉ xem](${bin.url})**`, ephemeral: true });

//         } catch (error) {
//             interactionError.execute(interaction, error, client);
//         }
//     },
// };
