const { Client, WebhookClient, EmbedBuilder, GatewayIntentBits, Partials, ActivityType, Collection } = require('discord.js');
require("dotenv").config();
const fs = require('fs');
const path = require('path');
const ascii = require('ascii-table');
const colors = require('colors'); // d√πng ƒë·ªÉ ƒë·ªïi m√†u ch·ªØ cho terminal

// https://discord.com/api/webhooks/1263441356236525633/PpSigokbBjqJBxbf9yV-c4iy2TDxFXfP8ontBx54L05MsI3ip9yJA4uXaEFp0BDZjnCk
// const webhookURL = 'https://discord.com/api/webhooks/1343502953356722309/SA8jzNELSvad3-QPrq-GPUniIjXGrnBj9djnyiJhW2Dk3n6qaihS2ZbDruTc8AtJ8yMF';
const webhookURL = process.env.WEBHOOK_URL;
const webhookClient = new WebhookClient({ url: webhookURL });

const { User, Message, GuildMember } = Partials

const { loadEvents } = require('./Handlers/EventHandler');
const { loadCommands } = require('./Handlers/CommandsHandler');
const { loadButtons } = require('./Handlers/ButtonHandler');
const { loadPrefix } = require('./Handlers/PrefixHandler')
const { loadModals } = require ('./Handlers/ModalsHandler')
const { loadContextMenus } = require('./Handlers/ContextMenuHandler');
const { loadSelectMenus } = require('./Handlers/SelectMenusHandler');

const client = new Client({
    intents:
        [
            GatewayIntentBits.Guilds,
            GatewayIntentBits.GuildMembers, // theo d√µi c√°c th√†nh vi√™n
            GatewayIntentBits.GuildModeration,
            GatewayIntentBits.GuildEmojisAndStickers,
            GatewayIntentBits.GuildIntegrations,
            GatewayIntentBits.GuildWebhooks,
            GatewayIntentBits.GuildInvites,
            GatewayIntentBits.GuildVoiceStates,
            GatewayIntentBits.GuildMessages,
            GatewayIntentBits.GuildMessageReactions,
            GatewayIntentBits.GuildMessageTyping,
            GatewayIntentBits.DirectMessages,
            GatewayIntentBits.DirectMessageReactions,
            GatewayIntentBits.DirectMessageTyping,
            GatewayIntentBits.MessageContent,
            GatewayIntentBits.GuildPresences, // theo d√µi tr·∫°ng th√°i
            GatewayIntentBits.GuildScheduledEvents,
            GatewayIntentBits.AutoModerationConfiguration,
            GatewayIntentBits.AutoModerationExecution
        ],
    partials: [User, Message, GuildMember],
});

const config = require('./config');
client.config = config;

// // G·ª≠i log v·ªÅ shard manager
// const logToManager = (message) => {
//     if (process.send) process.send(message);
// };

// // Khi shard k·∫øt n·ªëi th√†nh c√¥ng
// client.once('ready', () => {
//     const shardId = client.shard && client.shard.ids.length > 0 ? client.shard.ids[0] : 0;
//     console.log(colors.green(`‚úÖ Shard ${shardId} ƒë√£ k·∫øt n·ªëi th√†nh c√¥ng v·ªõi Discord!`));
//     logToManager(`‚úÖ Shard ${shardId} ƒë√£ k·∫øt n·ªëi th√†nh c√¥ng v·ªõi Discord!`);
// });

// // Ki·ªÉm tra n·∫øu bot b·ªã gi·ªõi h·∫°n t·ªëc ƒë·ªô (rate limit)
// client.on('rateLimit', (info) => {
//     console.warn(`‚ö†Ô∏è Bot b·ªã gi·ªõi h·∫°n t·ªëc ƒë·ªô!`, info);
// });

// // // L·∫Øng nghe s·ª± ki·ªán debug, d√πng ƒë·ªÉ hi·ªÉn th·ªã th√¥ng tin g·ª° l·ªói chi ti·∫øt
// // client.on('debug', (info) => {
// //     console.log(`üîç Th√¥ng tin g·ª° l·ªói:`, info);
// // });

// // S·ª± ki·ªán x·∫£y ra khi m·ªôt shard b·ªã m·∫•t k·∫øt n·ªëi v·ªõi Discord
// client.on('shardDisconnect', (event, id) => { 
//     console.warn(`‚ö†Ô∏è Shard ${id} b·ªã m·∫•t k·∫øt n·ªëi! L√Ω do:`, event);
// });

// // Khi shard b·∫Øt ƒë·∫ßu qu√° tr√¨nh k·∫øt n·ªëi l·∫°i sau khi m·∫•t k·∫øt n·ªëi
// client.on('shardReconnecting', (id) => {
//     console.log(`üîÑ Shard ${id} ƒëang k·∫øt n·ªëi l·∫°i...`);
// });

// // Khi shard k·∫øt n·ªëi l·∫°i th√†nh c√¥ng, c√≥ th·ªÉ k√®m theo s·ªë s·ª± ki·ªán ƒë√£ ph√°t l·∫°i
// client.on('shardResume', (id, replayedEvents) => {
//     console.log(`‚úÖ Shard ${id} ƒë√£ k·∫øt n·ªëi l·∫°i! ƒê√£ ph√°t l·∫°i ${replayedEvents} s·ª± ki·ªán.`);
// });

// Ki·ªÉm so√°t phi√™n b·∫£n //
const currentVersion = `${config.botVersion}`;
const { checkVersion, getLatestVersion } = require('./lib/version');

client.commands = new Collection();
client.prefixCommands = new Collection(); // Th√™m d√≤ng n√†y
client.prefixCommandsDescriptions = {}; // Th√™m d√≤ng n√†y
client.buttons = new Collection(); // Th√™m d√≤ng n√†y
client.contextMenus = new Collection(); // Th√™m d√≤ng n√†y
client.modals = new Collection(); // Th√™m d√≤ng n√†y
client.selectMenus = new Collection(); // Th√™m d√≤ng n√†y
client.roleSelectMenus = new Collection();

/////////////////////////////////// t·∫°m th·ªùi t·∫Øt
// N·∫°p c√°c l·ªánh button
const buttonPath = path.join(__dirname, 'InteractionTypes/buttons');
const buttonFiles = fs.readdirSync(buttonPath).filter(file => file.endsWith('.js'));

for (const file of buttonFiles) {
    const button = require(path.join(buttonPath, file));
    // client.buttons.set(button.customId, button);
    client.buttons.set(button.id, button); // ƒê·∫∑t ID n√∫t ƒë·ªÉ x·ª≠ l√Ω sau n√†y
}

// g·ªôp Events, Commands... v√†o 1 h√†ng trong terminal
client.login(process.env.token).then( async () => {


    const eventData = await loadEvents(client);
    const { commandData, totalGlobal, totalGuild } = await loadCommands(client);
    const buttonData = await loadButtons(client);
    const prefixData = await loadPrefix(client);
    const contextMenuData = await loadContextMenus(client); // Th√™m d√≤ng n√†y
    const modalData = await loadModals(client); // Th√™m d√≤ng n√†y
    const selectMenuData = await loadSelectMenus(client); // Th√™m d√≤ng n√†y

    // ƒê·∫øm s·ªë l∆∞·ª£ng
    const eventCount = eventData.length; // S·ªë l∆∞·ª£ng events
    const commandCount = commandData.length; // S·ªë l∆∞·ª£ng l·ªánh slash
    const totalCommands = totalGlobal + totalGuild; // t·ªïng l·ªánh s'l√°h
    const buttonCount = buttonData.length; // S·ªë l∆∞·ª£ng n√∫t
    const prefixCount = prefixData.length; // S·ªë l∆∞·ª£ng l·ªánh prefix
    const contextMenuCount = contextMenuData.length; // S·ªë l∆∞·ª£ng contextMenu
    const modalCount = modalData.length; // S·ªë l∆∞·ª£ng modal
    const selectMenuCount = selectMenuData.length; // S·ªë l∆∞·ª£ng l·ª±a ch·ªçn menu

    // T·∫°o b·∫£ng ASCII kh√¥ng m√†u ƒë·ªÉ ƒë·ªãnh d·∫°ng d·ªØ li·ªáu
    const combinedTable = new ascii().setHeading(
        `Events (${eventCount})`.padEnd(25), // C·∫≠p nh·∫≠t ti√™u ƒë·ªÅ c·ªôt Events  'Events'.padEnd(3),
        'Events Status'.padEnd(3),
        // `Commands (${commandCount})`.padEnd(25), // 'Commands'.padEnd(3),
        `Commands (${totalCommands}) - ${totalGlobal}/${totalGuild}`.padEnd(25),
        'Commands Status'.padEnd(3),
        `Buttons (${buttonCount})`.padEnd(25), // 'Buttons'.padEnd(3),
        'Buttons Status'.padEnd(3),
        `Prefix Commands (${prefixCount})`.padEnd(25), // 'Prefix Commands'.padEnd(3),
        'Prefix Commands Status'.padEnd(3)// m·ªõi s·ª≠a
    );

    const combinedTable1 = new ascii().setHeading(
        `contextMenu (${contextMenuCount})`.padEnd(25), // 'contextMenu'.padEnd(3),
        'contextMenu Status'.padEnd(3),
        `modal (${modalCount})`.padEnd(25), // 'modal'.padEnd(3),
        'modal Status'.padEnd(3),
        `selectMenu (${selectMenuCount})`.padEnd(25), // 'selectMenu'.padEnd(3),
        'selectMenu Status'.padEnd(3),
    );

    // T√¨m s·ªë l∆∞·ª£ng b·∫£n ghi l·ªõn nh·∫•t
    const maxLength = Math.max(
        eventData.length,
        commandData.length,
        buttonData.length,
        prefixData.length,
        contextMenuData.length, // Th√™m d√≤ng n√†y
        modalData.length, // Th√™m d√≤ng n√†y
        selectMenuData.length, // Th√™m d√≤ng n√†y
    );

    // ƒêi·ªÅn d·ªØ li·ªáu v√†o b·∫£ng t·ªïng h·ª£p
    for (let i = 0; i < maxLength; i++) {
        const event = eventData[i] || { name: '', status: '' };
        const command = commandData[i] || { name: '', status: '' };
        const button = buttonData[i] || { name: '', status: '' };
        const prefix = prefixData[i] || { name: '', status: '' };
        const contextMenu = contextMenuData[i] || { name: '', status: '' }; // Th√™m d√≤ng n√†y
        const modal = modalData[i] || { name: '', status: '' }; // Th√™m d√≤ng n√†y
        const selectMenu = selectMenuData[i] || { name: '', status: '' }; // Th√™m d√≤ng n√†y

        combinedTable.addRow(
            event.name.padEnd(3),
            event.status.padEnd(3),
            command.name.padEnd(3),
            command.status.padEnd(3),
            button.name.padEnd(3),
            button.status.padEnd(3),
            prefix.name.padEnd(3),
            prefix.status.padEnd(3)
        );

        combinedTable1.addRow(
            contextMenu.name.padEnd(3),
            contextMenu.status.padEnd(3),
            modal.name.padEnd(3),
            modal.status.padEnd(3),
            selectMenu.name.padEnd(3),
            selectMenu.status.padEnd(3),
        );

    }

    // // Thay ƒë·ªïi m√†u cho c√°c gi√° tr·ªã trong b·∫£ng
    const applyColor = (line) => {

        // Ki·ªÉm tra status c·ª• th·ªÉ trong t·ª´ng d√≤ng v√† √°p d·ª•ng m√†u t∆∞∆°ng ·ª©ng
        if (line.includes('t·ªáp tin r·ªóng')) {
            return line.replace('t·ªáp tin r·ªóng', colors.bgRed('t·ªáp tin r·ªóng'));
        } else if (line.includes('thi·∫øu t√™n')) {
            return line.replace('thi·∫øu t√™n', colors.bgRed('thi·∫øu t√™n'));
        } else if (line.includes('thi·∫øu description')) {
            return line.replace('thi·∫øu description', colors.bgRed('thi·∫øu description'));
        } else if (line.includes('l·ªói c√∫ ph√°p')) {
            return line.replace('l·ªói c√∫ ph√°p', colors.bgRed('l·ªói c√∫ ph√°p'));
        } else if (line.includes('thi·∫øu id')) {
            return line.replace('thi·∫øu id', colors.bgRed('thi·∫øu id'));
        } else if (line.includes('thi·∫øu type')) {
            return line.replace('thi·∫øu type', colors.bgRed('thi·∫øu type'));
        } else if (line.includes('b·ªã b√¥i ƒëen')) {
            return line.replace('b·ªã b√¥i ƒëen', colors.bgRed('b·ªã b√¥i ƒëen'));
        } else if (line.includes('L·ªói')) {
            return line.replace('L·ªói', colors.red('L·ªói'));
        }


// M√†u xanh cho 'Events'
line = line.replace(/Events \(\d+\)/g, match => colors.green(match));
// M√†u xanh cho 'Events Status'
line = line.replace(/Events Status/g, match => colors.green(match));

// M√†u cyan cho 'Commands' - Ch·ªâ thay ph·∫ßn "Commands" kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn "Prefix Commands"
line = line.replace(/(?<!Prefix )Commands \(\d+\) - \d+\/\d+/g, match => colors.green(match));  // S·ª≠ d·ª•ng lookbehind ƒë·ªÉ tr√°nh thay th·∫ø trong "Prefix Commands" // \(\d+\)/g

// M√†u cyan cho 'Commands Status'
// line = line.replace(/Commands Status/g, match => colors.green(match));
line = line.replace(/(?<!Prefix )Commands Status(?! Status)/g, match => colors.green(match));

// M√†u t√≠m cho 'Buttons'
line = line.replace(/Buttons \(\d+\)/g, match => colors.green(match));
// M√†u t√≠m cho 'Buttons Status'
line = line.replace(/Buttons Status/g, match => colors.green(match));

// M√†u v√†ng cho 'Prefix Commands' (c·∫£ c·ª•m "Prefix Commands")
line = line.replace(/Prefix Commands \(\d+\)/g, match => colors.green(match));
// M√†u v√†ng cho 'Prefix Commands Status' (c·∫£ c·ª•m "Prefix Commands Status")
line = line.replace(/Prefix Commands Status/g, match => colors.green(match));

// M√†u xanh cho 'contextMenu'
line = line.replace(/(?<!Status )contextMenu \(\d+\)/g, match => colors.green(match));  // S·ª≠ d·ª•ng lookbehind ƒë·ªÉ tr√°nh thay th·∫ø trong "Prefix Commands"
// M√†u xanh cho 'contextMenu Status'
line = line.replace(/contextMenu Status/g, match => colors.green(match));

// M√†u xanh cho 'modal'
line = line.replace(/(?<!Status )modal \(\d+\)/g, match => colors.green(match));  // S·ª≠ d·ª•ng lookbehind ƒë·ªÉ tr√°nh thay th·∫ø trong "Prefix Commands"
// M√†u xanh cho 'modal Status'
line = line.replace(/modal Status/g, match => colors.green(match));

// M√†u t√≠m cho 'selectMenu'
line = line.replace(/selectMenu \(\d+\)/g, match => colors.green(match));
// M√†u t√≠m cho 'selectMenu Status'
line = line.replace(/selectMenu Status/g, match => colors.green(match));


// C√°c d√≤ng c√≤n l·∫°i gi·ªØ nguy√™n m√†u tr·∫Øng
return colors.white(line);
    };

    // √Åp d·ª•ng m√†u cho c√°c ti√™u ƒë·ªÅ trong b·∫£ng
const colorTable = combinedTable.toString().split('\n').map(line => {
    // √Åp d·ª•ng m√†u cho c√°c d√≤ng c√≥ ch·ª©a '|' (khung b·∫£ng)
    return line.includes('|') ? applyColor(line) : colors.white(line);
}).join('\n');

const colorTable1 = combinedTable1.toString().split('\n').map(line => {
    // √Åp d·ª•ng m√†u cho c√°c d√≤ng c√≥ ch·ª©a '|' (khung b·∫£ng)
    return line.includes('|') ? applyColor(line) : colors.white(line);
}).join('\n');

    console.log(colorTable);    
    console.log(colorTable1);
    await checkVersion(currentVersion,client);

    // ho·∫∑c d√πng Th√™m ƒë·ªô tr·ªÖ 2 gi√¢y tr∆∞·ªõc khi hi·ªÉn th·ªã Ki·ªÉm tra phi√™n b·∫£n m·ªõi nh·∫•t
    setTimeout(async () => {
        // Ki·ªÉm tra phi√™n b·∫£n m·ªõi nh·∫•t tr∆∞·ªõc khi in th√¥ng b√°o kh·ªüi ƒë·ªông
        const latestVersion = await getLatestVersion();
        console.log(` ŸÄÔÆ©Ÿ®ŸÄ Phi√™n b·∫£n m·ªõi nh·∫•t Github l√†: ${latestVersion}`);

    }, 2000);  // ƒê·ª£i 2 gi√¢y tr∆∞·ªõc khi hi·ªÉn th·ªã Ki·ªÉm tra phi√™n b·∫£n m·ªõi nh·∫•t

});

// X·ª≠ l√Ω l·ªói ch∆∞a ƒë∆∞·ª£c x·ª≠ l√Ω (kh√¥ng c√≥ try-catch).
process.on('uncaughtException', async (error) => {
    // console.error('L·ªói ch∆∞a ƒë∆∞·ª£c x·ª≠ l√Ω:', error);

    // X·ª≠ l√Ω l·ªói c·ª• th·ªÉ
    let color = "Red";
    let title = "L·ªói ch∆∞a ƒë∆∞·ª£c x·ª≠ l√Ω";
    let description = `**L·ªói Code:** \`${error.name || 'Kh√¥ng x√°c ƒë·ªãnh'}\`\n**L·ªói tin nh·∫Øn:** \`${error.message || 'Kh√¥ng x√°c ƒë·ªãnh'}\`\n**Hi·ªÉn th·ªã l·ªói:** \`\`\`yml\n${error.stack || 'Kh√¥ng c√≥ th√¥ng tin l·ªói'}\`\`\`\n${error}`;

    // X·ª≠ l√Ω c√°c l·ªói c·ª• th·ªÉ
    if (error.code === 10062) {
        color = "Purple";
        title = "L·ªói t∆∞∆°ng t√°c kh√¥ng x√°c ƒë·ªãnh (Unknown Interaction)";
        description = `**M√£ l·ªói:** \`${error.code}\`\n**Tin nh·∫Øn l·ªói:** \`${error.message}\`\n**Chi ti·∫øt l·ªói:** \`\`\`yml\n${error.stack || 'Kh√¥ng c√≥ th√¥ng tin l·ªói'}\`\`\`\n${error}`;
    } else if (error.code === 50013) {
        color = "Blue";
        title = "L·ªói thi·∫øu quy·ªÅn (Missing Permissions)";
        description = `**M√£ l·ªói:** \`${error.code}\`\n**Tin nh·∫Øn l·ªói:** \`${error.message}\`\n**Chi ti·∫øt l·ªói:** \`\`\`yml\n${error.stack || 'Kh√¥ng c√≥ th√¥ng tin l·ªói'}\`\`\`\n${error}`;
    } else if (error.code !== 10008) {
        color = "Green";
        title = "L·ªói Kh√¥ng X√°c ƒê·ªãnh";
        description = `**M√£ l·ªói:** \`${error.code}\`\n**Tin nh·∫Øn l·ªói:** \`${error.message}\`\n**Chi ti·∫øt l·ªói:** \`\`\`yml\n${error.stack || 'Kh√¥ng c√≥ th√¥ng tin l·ªói'}\`\`\`\n${error}`;
    } else if (error.code === 10008) {
        color = "Orange";
        title = "L·ªói tin nh·∫Øn kh√¥ng x√°c ƒë·ªãnh (Unknown Message)";
        description = `**M√£ l·ªói:** \`${error.code}\`\n**Tin nh·∫Øn l·ªói:** \`${error.message}\`\n**Chi ti·∫øt l·ªói:** \`\`\`yml\n${error.stack || 'Kh√¥ng c√≥ th√¥ng tin l·ªói'}\`\`\`\n${error}`;
    } else if (error.code === 50007) {
        color = "Pink"; // g·ª≠i m·ªôt tin nh·∫Øn ho·∫∑c th·ª±c hi·ªán m·ªôt h√†nh ƒë·ªông n√†o ƒë√≥ li√™n quan ƒë·∫øn tin nh·∫Øn
        title = "L·ªói s·ª≠ d·ª•ng emoji trong c√°c n√∫t, ho·∫∑c fields kh√¥ng h·ª£p l·ªá (Invalid Form Body)";
        description = `**M√£ l·ªói:** \`${error.code}\`\n**Tin nh·∫Øn l·ªói:** \`${error.message}\`\n**Chi ti·∫øt l·ªói:** \`\`\`yml\n${error.stack || 'Kh√¥ng c√≥ th√¥ng tin l·ªói'}\`\`\`\n${error}`;
    } else if (error.code === 50035) {
        color = "Red"; // g·ª≠i d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá trong c√°c tr∆∞·ªùng c·ª• th·ªÉ, c√°c th√†nh ph·∫ßn t∆∞∆°ng t√°c nh∆∞ n√∫t , menu, ho·∫∑c c√°c th√†nh ph·∫ßn kh√°c.
        title = "L·ªói s·ª≠ d·ª•ng emoji trong c√°c n√∫t, ho·∫∑c fields kh√¥ng h·ª£p l·ªá (Invalid Form Body)";
        description = `**M√£ l·ªói:** \`${error.code}\`\n**Tin nh·∫Øn l·ªói:** \`${error.message}\`\n**Chi ti·∫øt l·ªói:** \`\`\`yml\n${error.stack || 'Kh√¥ng c√≥ th√¥ng tin l·ªói'}\`\`\`\n${error}`;
    }

    try {
        await webhookClient.send({
            embeds: [
                new EmbedBuilder()
                .setColor(color)
                .setTitle(title)
                .setDescription(description)
                .setFooter({ text: `B·ªô nh·ªõ: ${(process.memoryUsage().heapUsed / 1024 / 1024).toFixed(2)} MB | CPU: ${(process.cpuUsage().system / 1024 / 1024).toFixed(2)}%` })
                .setTimestamp()
            ]
        });
    } catch (webhookError) {
        console.error('L·ªói khi g·ª≠i th√¥ng b√°o l·ªói ƒë·∫øn webhook:', webhookError);
    }
});

// ƒê∆∞·ª£c k√≠ch ho·∫°t khi m·ªôt Promise b·ªã t·ª´ ch·ªëi m√† kh√¥ng c√≥ x·ª≠ l√Ω l·ªói
process.on('unhandledRejection', async (reason, promise) => {
    // console.error('L·ªói t·ª´ promise ch∆∞a ƒë∆∞·ª£c x·ª≠ l√Ω:', reason);

    // Ki·ªÉm tra n·∫øu l·ªói ƒë·∫øn t·ª´ file "top.js" trong th∆∞ m·ª•c "Commands/4. TH√ÄNH VI√äN/"
    if (reason.stack && reason.stack.includes('Commands\\4. TH√ÄNH VI√äN\\top.js')) {
        return;
    }

    // X·ª≠ l√Ω l·ªói c·ª• th·ªÉ
    let color = "Orange";
    let title = "L·ªói t·ª´ promise ch∆∞a ƒë∆∞·ª£c x·ª≠ l√Ω";
    let description = `**L·ªói:** \`${reason.message || 'Kh√¥ng x√°c ƒë·ªãnh'}\`\n**Promise:** \`${promise}\`\n**Hi·ªÉn th·ªã l·ªói:** \`\`\`yml\n${reason.stack || 'Kh√¥ng c√≥ th√¥ng tin l·ªói'}\`\`\`\n${reason}`;

    // G·ª≠i l·ªói t·ªõi webhook
    try {
        await webhookClient.send({
            embeds: [
                new EmbedBuilder()
                .setColor(color) 
                .setTitle(title)
                .setDescription(description)
                .setFooter({ text: `B·ªô nh·ªõ: ${(process.memoryUsage().heapUsed / 1024 / 1024).toFixed(2)} MB | CPU: ${(process.cpuUsage().system / 1024 / 1024).toFixed(2)}%` })
                .setTimestamp()
            ]
        });
    } catch (webhookError) {
        console.error('L·ªói khi g·ª≠i th√¥ng b√°o l·ªói ƒë·∫øn webhook:', webhookError);
    }
});

// ƒê∆∞·ª£c k√≠ch ho·∫°t khi m·ªôt Promise b·ªã t·ª´ ch·ªëi v√† sau ƒë√≥ ƒë∆∞·ª£c x·ª≠ l√Ω
process.on('rejectionHandled', (promise) => {
    console.log('Promise b·ªã t·ª´ ch·ªëi sau ƒë√≥ ƒë∆∞·ª£c x·ª≠ l√Ω:', promise);
    // X·ª≠ l√Ω th√™m n·∫øu c·∫ßn
});

// m√£ m√†u ansi d√πng cho c·∫£nh b√°o process.on('warning', (warning)
const colorAnsi = {
    red: '\x1b[31m',
    orange: '\x1b[38;5;202m',
    yellow: '\x1b[33m',
    green: '\x1b[32m',
    blue: '\x1b[34m',
    pink: '\x1b[38;5;213m',
    torquise: '\x1b[38;5;45m', // Xanh ng·ªçc
    reset: '\x1b[0m',          // m√†u m·∫∑c ƒë·ªãnh

    lightRed: '\x1b[38;5;197m',     // ƒê·ªè s√°ng
    lightGreen: '\x1b[38;5;82m',    // Xanh l√° c√¢y s√°ng
    lightYellow: '\x1b[38;5;227m',  // V√†ng s√°ng
    lightBlue: '\x1b[38;5;75m',     // Xanh d∆∞∆°ng s√°ng
    lightPink: '\x1b[38;5;213m',    // H·ªìng s√°ng

    darkRed: '\x1b[38;5;124m',      // ƒê·ªè t·ªëi
    darkGreen: '\x1b[38;5;22m',     // Xanh l√° c√¢y t·ªëi
    darkYellow: '\x1b[38;5;130m',   // V√†ng t·ªëi
    darkBlue: '\x1b[38;5;17m',      // Xanh d∆∞∆°ng t·ªëi
    darkPink: '\x1b[38;5;199m',     // H·ªìng t·ªëi

    cyan: '\x1b[36m',               // Xanh lam nh·∫°t
    magenta: '\x1b[35m',            // T√≠m
    gray: '\x1b[90m',               // X√°m
    lightGray: '\x1b[37m',          // X√°m s√°ng
    darkGray: '\x1b[90m',           // X√°m ƒëen

    lightCyan: '\x1b[96m',          // Xanh lam s√°ng
    lightMagenta: '\x1b[95m',       // T√≠m s√°ng
    darkCyan: '\x1b[36m',           // Xanh lam t·ªëi
    darkMagenta: '\x1b[35m',        // T√≠m t·ªëi
    brown: '\x1b[33m',              // N√¢u

    purple: '\x1b[35m',             // T√≠m
    lightPurple: '\x1b[38;5;171m',  // T√≠m s√°ng
    deepBlue: '\x1b[38;5;17m',      // Xanh d∆∞∆°ng s√¢u
    olive: '\x1b[38;5;64m',         // Xanh √¥ liu
    teal: '\x1b[38;5;37m',          // Xanh lam xanh

    salmon: '\x1b[38;5;209m',       // ƒê·ªè h·ªìng
    peach: '\x1b[38;5;216m',        // ƒê√†o
    lavender: '\x1b[38;5;207m',     // Hoa o·∫£i h∆∞∆°ng
    mint: '\x1b[38;5;119m',         // Xanh b·∫°c h√†
    coral: '\x1b[38;5;202m'         // San h√¥
}


// c·∫£nh b√°o l·ªói th·ªùi
process.on('warning', (warning) => {
    console.warn(`${colorAnsi.red}[ T√äN C·∫¢NH B√ÅO ]:`, warning.name); // T√™n c·∫£nh b√°o
    console.warn(`${colorAnsi.red}[ N·ªòI DUNG C·∫¢NH B√ÅO ]:`, warning.message); // N·ªôi dung c·∫£nh b√°o
    console.warn(`${colorAnsi.red}[ CHI TI·∫æT C·∫¢NH B√ÅO ]:`, warning.stack); // Chi ti·∫øt c·∫£nh b√°o (stack trace)
});
module.exports = client;


/*=============== ƒê∆∞·ª£c Th·ª±c Hi·ªán B·ªüi Valheim Survival ================
||                                                                  ||
||    ____    ____    ____     ____   _               _ _           ||
||   | __ )  |  _ \  | __ )   / ___| | |_   _   _  __| (_)  ___     ||
||   |  _ \  | |_) | |  _ \   \___ \ | __| | | | |/ _` | | / _ \    ||
||   | |_) | |  _ <  | |_) |   ___) || |_  | |_| | (_| | |( (_) |   ||
||   |____/  |_| \_\ |____/   |____/  \__|  \__,_|\__,_|_| \___/    ||
||                                                                  ||
=====================================================================*/
