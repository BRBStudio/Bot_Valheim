const { EmbedBuilder } = require('discord.js');

class EmbedBRB {
    constructor(interaction) {
        this.interaction = interaction;
        this.data = {
            color: null,
            title: null,
            description: null,
            fields: [],
            timestamp: false,
            author: null,
            footer: null,
            image: null,
            thumbnail: null,
            stringOptions: {},
        };

        // ‚úÖ Kh·ªüi t·∫°o bi·∫øn ·∫£o d√πng trong c√∫ ph√°p embed: bot, nd, mc
        global.bot = interaction.client.user;
        global.nd = interaction.user; 
        global.mc = interaction.guild;
        global.ndsv = interaction.member;
        
        // Fallback avatar URL: ∆∞u ti√™n avatar server ri√™ng, n·∫øu kh√¥ng c√≥ th√¨ avatar to√†n c·ª•c
    this.avatarUrl = this.getAvatarUrl();
    // Patch t·ª± ƒë·ªông interaction ngay khi t·∫°o instance
        EmbedBRB.patchInteraction(interaction);
    }

    // L·∫•y avatar ∆∞u ti√™n avatar server ri√™ng, fallback avatar to√†n c·ª•c
    getAvatarUrl() {
        // N·∫øu ndsv (member) c√≥ avatar server ri√™ng, tr·∫£ v·ªÅ URL
        if (global.ndsv && global.ndsv.avatarURL()) {
        return global.ndsv.avatarURL({ dynamic: true, size: 512 });
        }
        // N·∫øu kh√¥ng c√≥ avatar server ri√™ng ho·∫∑c null, d√πng avatar to√†n c·ª•c user
        if (global.nd && global.nd.avatarURL()) {
        return global.nd.avatarURL({ dynamic: true, size: 512 });
        }
        // Tr∆∞·ªùng h·ª£p kh√¥ng c√≥ avatar n√†o th√¨ tr·∫£ v·ªÅ null ho·∫∑c m·ªôt avatar m·∫∑c ƒë·ªãnh n·∫øu c·∫ßn
        return null;
    }

    Mau(color) {
        const colorsMap = {
            xanh: 0x00ff00, green: 0x00ff00,
            ƒë·ªè: 0xff0000, red: 0xff0000,
            v√†ng: 0xffff00, yellow: 0xffff00,
            xanh_d∆∞∆°ng: 0x0000ff, blue: 0x0000ff,
            t√≠m: 0x800080, purple: 0x800080,
            cam: 0xffa500, orange: 0xffa500,
            h·ªìng: 0xff69b4, pink: 0xff69b4,
            ƒëen: 0x000000, black: 0x000000,
            tr·∫Øng: 0xffffff, white: 0xffffff,
            x√°m: 0x808080, grey: 0x808080,
            xanh_ƒë·∫πp: 0x00ffff, cyan: 0x00ffff,
        };

        if (typeof color === 'string') {
            color = color.toLowerCase().trim();
            if (color.startsWith('#')) {
                this.data.color = parseInt(color.slice(1), 16);
            } else if (color.startsWith('0x')) {
                this.data.color = parseInt(color, 16);
            } else if (colorsMap[color]) {
                this.data.color = colorsMap[color];
            } else {
                this.data.color = 0xffffff;
            }
        } else if (typeof color === 'number') {
            this.data.color = color;
        }

        return this;
    }

    Tieude(title) {
        this.data.title = title;
        return this;
    }

    Noidung(description) {
        this.data.description = description;
        return this;
    }

    Truong(...fields) {
        if (fields.length === 1 && Array.isArray(fields[0])) {
            this.data.fields = fields[0];
        } else {
            this.data.fields = fields;
        }
        return this;
    }

    tg_guitn() {
        this.data.timestamp = true;
        return this;
    }

    Tacgia(name, iconURL = null, url = null) {
        this.data.author = { name };

        if (iconURL) {
            this.data.author.iconURL = iconURL;
        }

        if (url) {
            this.data.author.url = url;
        } else {
            // N·∫øu kh√¥ng c√≥ url truy·ªÅn v√†o, t·ª± ƒë·ªông t·∫°o url theo user interaction
            if (this.interaction && this.interaction.user && this.interaction.user.id) {
                this.data.author.url = `https://discord.com/users/${this.interaction.user.id}`;
            }
        }

        return this;
    }

    Chantrang(text, iconURL = null) {
        this.data.footer = { text };
        if (iconURL) this.data.footer.iconURL = iconURL;
        return this;
    }

    Anh(url) {
        this.data.image = url;
        return this;
    }

    Avatar(url) {
        this.data.thumbnail = url;
        return this;
    }

    ThemLuaChon(key, value) {
        if (typeof key === 'string' && typeof value === 'string') {
            this.data.stringOptions[key] = value;
        }
        return this;
    }

    /**
     * T·ª± ƒë·ªông l·∫•y t·∫•t c·∫£ option user v√† convert v·ªÅ string mention + tag
     */
    AutoFromUsers() {
        if (!this.interaction?.options) return this;

        const users = this.interaction.options._hoistedOptions.filter(opt => opt.type === 6); // USER
        for (const userOpt of users) {
            const user = this.interaction.options.getUser(userOpt.name);
            const member = this.interaction.options.getMember ? this.interaction.options.getMember(userOpt.name) : null;

            if (user) {
                if (member && member.displayName) {
                    this.data.stringOptions[userOpt.name] = `<@${user.id}> (${member.displayName})`;
                } else {
                    this.data.stringOptions[userOpt.name] = `<@${user.id}> (${user.tag})`;
                }
            }
        }
        return this;
    }


    /**
     * T·ª± ƒë·ªông l·∫•y m·ªçi lo·∫°i option ph·ªï bi·∫øn, convert theo ki·ªÉu v√† th√™m v√†o stringOptions
     */
    AutoAllOptions() {
        if (!this.interaction?.options) return this;

        const optionTypeMap = {
            3: 'getString',       // STRING
            4: 'getInteger',      // INTEGER
            5: 'getBoolean',      // BOOLEAN
            6: 'getUser',         // USER
            7: 'getChannel',      // CHANNEL
            8: 'getRole',         // ROLE
            9: 'getMentionable',  // MENTIONABLE
            10: 'getNumber'       // NUMBER
        };

        for (const opt of this.interaction.options.data) {
            const getter = optionTypeMap[opt.type];
            if (!getter) continue;

            let value = this.interaction.options[getter](opt.name);

            if (value?.id) {
                if (opt.type === 6) value = `<@${value.id}> (${value.tag})`;            // User
                else if (opt.type === 7) value = `<#${value.id}>`;                      // Channel
                else if (opt.type === 8) value = `<@&${value.id}>`;                     // Role
                else if (opt.type === 9) value = value.user ? `<@${value.id}>` : `<@&${value.id}>`; // Mentionable
            } else if (typeof value === 'boolean') {
                value = value ? '‚úÖ C√≥' : '‚ùå Kh√¥ng';
            }

            this.data.stringOptions[opt.name] = value?.toString() ?? 'Kh√¥ng c√≥';
        }

        return this;
    }

    _formatKeyName(key) {
        if (typeof key !== 'string') return key; // N·∫øu key kh√¥ng ph·∫£i l√† chu·ªói, tr·∫£ v·ªÅ nguy√™n b·∫£n lu√¥n (kh√¥ng thay ƒë·ªïi)
        
        const spaced = key.replace(/_/g, ' '); // Thay t·∫•t c·∫£ d·∫•u g·∫°ch d∆∞·ªõi (_) trong chu·ªói th√†nh d·∫•u c√°ch (space)
        // vi·∫øt hoa ch·ªØ c√°i ƒë·∫ßu
        return spaced.charAt(0).toUpperCase() + spaced.slice(1).toLowerCase(); // Vi·∫øt hoa ch·ªØ c√°i ƒë·∫ßu c·ªßa chu·ªói, r·ªìi n·ªëi ph·∫ßn c√≤n l·∫°i vi·∫øt th∆∞·ªùng
    }



    toDiscordEmbed() {
        const embed = new EmbedBuilder();
        if (this.data.color !== null) embed.setColor(this.data.color);
        if (this.data.title) embed.setTitle(this.data.title);
        if (this.data.description) embed.setDescription(this.data.description);
        // if (this.data.fields.length > 0) embed.addFields(this.data.fields);

        // N·∫øu c√≥ fields th·ªß c√¥ng ƒë√£ set
        const fields = [...this.data.fields];

        // üëâ Th√™m fields t·ª´ stringOptions n·∫øu c√≥
        // for (const [key, value] of Object.entries(this.data.stringOptions)) {
        //     fields.push({ name: key, value: value || '\u200B', inline: false });
        // }

        for (const [key, value] of Object.entries(this.data.stringOptions)) {
    const formattedKey = this._formatKeyName(key);
    fields.push({ name: formattedKey, value: value || '\u200B', inline: false });
}



        if (fields.length > 0) embed.addFields(fields);

        if (this.data.timestamp) embed.setTimestamp();
        if (this.data.author) embed.setAuthor(this.data.author);
        if (this.data.footer) embed.setFooter(this.data.footer);
        if (this.data.image) embed.setImage(this.data.image);
        if (this.data.thumbnail) embed.setThumbnail(this.data.thumbnail);
        return embed;
    }

    /**
     * Patch interaction.reply, editReply, followUp ƒë·ªÉ h·ªó tr·ª£ .tnn (EmbedBRB)
     */
    static patchInteraction(interaction) {
        const patch = (method) => {
            const original = interaction[method].bind(interaction);
            interaction[method] = async (options) => {
                if (options?.tnn) {
                    const mappedEmbeds = options.tnn
                        .map(e => e?.toDiscordEmbed?.())
                        .filter(e => !!e);
                    if (mappedEmbeds.length > 0) {
                        options.embeds = mappedEmbeds;
                    }
                    delete options.tnn;
                }

                if ('emphemeral' in options) {
                    options.ephemeral = options.emphemeral;
                    delete options.emphemeral;
                }

                if ((!options.content || options.content.trim() === '') &&
                    (!options.embeds || options.embeds.length === 0)) {
                    options.content = '\u200B';
                }

                return await original(options);
            };
        };

        patch("reply");
        patch("editReply");
        patch("followUp");
    }
}

// T·∫°o bi·∫øn global ƒë·ªÉ d√πng th·∫≥ng
global.reply = function(interaction) {
    EmbedBRB.patchInteraction(interaction);
};

module.exports = {
    EmbedBRB,
};


/*
     D√πng npm deprecate ƒë·ªÉ c·∫£nh b√°o khi c√†i ƒë·∫∑t c√°c phi√™n b·∫£n c≈©
        Khi b·∫°n ph√°t h√†nh phi√™n b·∫£n m·ªõi, b·∫°n ch·∫°y l·ªánh:

        npm deprecate embed-brb@"<1.0.10" "G√≥i n√†y ƒë√£ l·ªói th·ªùi v√† kh√¥ng c√≤n ƒë∆∞·ª£c duy tr√¨ n·ªØa. Vui l√≤ng s·ª≠ d·ª•ng npm i embed-brb ƒë·ªÉ c·∫≠p nh·∫≠t phi√™n b·∫£n m·ªõi thay th·∫ø"
        Khi ng∆∞·ªùi d√πng c√†i phi√™n b·∫£n th·∫•p h∆°n 1.0.10, npm s·∫Ω b√°o ngay c·∫£nh b√°o deprecate tr√™n terminal.

        ƒê√¢y l√† c√°ch chu·∫©n c·ªßa npm ƒë·ªÉ c·∫£nh b√°o package l·ªói th·ªùi.
        */