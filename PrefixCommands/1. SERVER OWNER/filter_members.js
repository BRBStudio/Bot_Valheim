const { EmbedBuilder, ButtonBuilder, ActionRowBuilder, ButtonStyle, PermissionsBitField } = require('discord.js');
const config = require('../../config');
const UserAgreement = require('../../schemas/userAgreementSchema')

module.exports = {
    name: 'filter_members',
    description: 'üî∏ Thanh l·ªçc th√†nh vi√™n. L·ªánh d√†nh cho \`ch·ªß s·ªü h·ªØu\`', // L·ªÜNH l·ªçc th√†nh vi√™n kh√¥ng ho·∫°t ƒë·ªông ho·∫∑c kh√¥ng c√≥ avatar
    q: `üî∏ D√†nh cho Ch·ªß s·ªü h·ªØu`,
    aliases: ['fm', 'o2'],
    
    async execute(msg, args) {

        if (msg.author.id !== msg.guild.ownerId && !config.specialUsers.includes(msg.author.id)) { 
            return msg.channel.send("B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y! Ch·ªâ ch·ªß s·ªü h·ªØu m√°y ch·ªß m·ªõi c√≥ quy·ªÅn."); 
        }

        if (!msg.guild.members.me.permissions.has(PermissionsBitField.Flags.KickMembers)) {
            return msg.channel.send("Bot kh√¥ng c√≥ quy·ªÅn kick th√†nh vi√™n. Vui l√≤ng c·∫•p quy·ªÅn 'Kick Members' cho bot.");
        }

        // L·∫•y danh s√°ch c√°c th√†nh vi√™n
        const members = await msg.guild.members.fetch();

        const noAvatarMembers = members.filter(member => !member.user.avatar); // Th√†nh vi√™n kh√¥ng c√≥ avatar

        const noRoleMembers = members.filter(member => member.roles.cache.size <= 1); // Th√†nh vi√™n kh√¥ng c√≥ vai tr√≤

        const inactiveMembers = members.filter(member => {
            const lastMessageTime = member.lastMessage?.createdAt;
            return lastMessageTime ? (Date.now() - lastMessageTime.getTime() > 30 * 24 * 60 * 60 * 1000) : true;
        }); // Th√†nh vi√™n kh√¥ng ho·∫°t ƒë·ªông trong 30 ng√†y

        // ** L·ªçc th√†nh vi√™n kh√¥ng c√≥ trong MongoDB **
        const membersNotInDB = [];
        for (const member of members.values()) {
            const userExists = await UserAgreement.findOne({ userId: member.user.id, guildId: msg.guild.id });
            if (!userExists) {
                membersNotInDB.push(member); // Th√™m th√†nh vi√™n kh√¥ng t·ªìn t·∫°i trong DB v√†o danh s√°ch x√≥a
            }
        }

        // T·∫°o Embed hi·ªÉn th·ªã k·∫øt qu·∫£
        const embed = new EmbedBuilder()
            .setTitle("K·∫øt qu·∫£ thanh l·ªçc th√†nh vi√™n")
            .setColor("#e60ad4")
            .addFields(
                { name: "Th√†nh vi√™n kh√¥ng c√≥ avatar", value: noAvatarMembers.size.toString(), inline: true },
                { name: "Th√†nh vi√™n kh√¥ng c√≥ vai tr√≤", value: noRoleMembers.size.toString(), inline: true },
                { name: "Th√†nh vi√™n kh√¥ng ho·∫°t ƒë·ªông (30 ng√†y)", value: inactiveMembers.size.toString(), inline: true },
                { name: "Th√†nh vi√™n kh√¥ng ch·∫•p nh·∫≠n ƒëi·ªÅu kho·∫£n bot", value: membersNotInDB.length.toString(), inline: true }
            )
            .setTimestamp();

        // T·∫°o c√°c n√∫t x√≥a cho t·ª´ng lo·∫°i th√†nh vi√™n
        const deleteNoAvatarButton = new ButtonBuilder()
            .setCustomId("delete_no_avatar")
            .setLabel("X√≥a th√†nh vi√™n kh√¥ng c√≥ avatar")
            .setStyle(ButtonStyle.Danger);

        const deleteNoRoleButton = new ButtonBuilder()
            .setCustomId("delete_no_role")
            .setLabel("X√≥a th√†nh vi√™n kh√¥ng c√≥ vai tr√≤")
            .setStyle(ButtonStyle.Danger);

        const deleteInactiveButton = new ButtonBuilder()
            .setCustomId("delete_inactive")
            .setLabel("X√≥a th√†nh vi√™n kh√¥ng ho·∫°t ƒë·ªông")
            .setStyle(ButtonStyle.Danger);

         const deleteNotInDbButton = new ButtonBuilder()
            .setCustomId("delete_not_in_db")
            .setLabel("X√≥a th√†nh vi√™n kh√¥ng ch·∫•p nh·∫≠n ƒëi·ªÅu kho·∫£n bot")
            .setStyle(ButtonStyle.Danger);

        const actionRow = new ActionRowBuilder()
            .addComponents(deleteNoAvatarButton, deleteNoRoleButton, deleteInactiveButton, deleteNotInDbButton);

        const message = await msg.channel.send({
            embeds: [embed],
            components: [actionRow]
        });

        // X·ª≠ l√Ω khi b·∫•m n√∫t x√≥a
        const collector = message.createMessageComponentCollector({ time: 60000 });

        collector.on('collect', async interaction => {
            await interaction.deferReply();
            const deletedMembers = [];

            switch (interaction.customId) {

                case 'delete_no_avatar':
                    for (const member of noAvatarMembers.values()) {

                        if (member.id === msg.guild.ownerId) {
                            continue;
                        }

                        if (member.roles.highest.position >= msg.guild.members.me.roles.highest.position) {
                            console.error(`Kh√¥ng th·ªÉ x√≥a ${member.displayName} v√¨ c√≥ quy·ªÅn cao h∆°n ho·∫∑c ngang v·ªõi bot.`);
                            continue; // B·ªè qua n·∫øu th√†nh vi√™n c√≥ quy·ªÅn cao h∆°n
                        }

                        try {
                            await member.kick("ƒê√£ x√≥a th√†nh vi√™n kh√¥ng c√≥ avatar.");
                            deletedMembers.push(member.displayName);
                        } catch (error) {
                            console.error(`Kh√¥ng th·ªÉ x√≥a 1 ${member.displayName}:`, error);
                        }
                    }
                    break;

                case 'delete_no_role':
                    for (const member of noRoleMembers.values()) {

                        if (member.id === msg.guild.ownerId) {
                            continue;
                        }

                        if (member.roles.highest.position >= msg.guild.members.me.roles.highest.position) {
                            console.error(`Kh√¥ng th·ªÉ x√≥a ${member.displayName} v√¨ c√≥ quy·ªÅn cao h∆°n ho·∫∑c ngang v·ªõi bot.`);
                            continue; // B·ªè qua n·∫øu th√†nh vi√™n c√≥ quy·ªÅn cao h∆°n
                        }

                        try {
                            await member.kick("ƒê√£ x√≥a th√†nh vi√™n kh√¥ng c√≥ vai tr√≤.");
                            deletedMembers.push(member.displayName);
                        } catch (error) {
                            console.error(`Kh√¥ng th·ªÉ x√≥a 2 ${member.displayName}:`, error);
                        }
                    }
                    break;

                case 'delete_inactive':
                    for (const member of inactiveMembers.values()) {

                        if (member.id === msg.guild.ownerId) {
                            continue;
                        }

                        if (member.roles.highest.position >= msg.guild.members.me.roles.highest.position) {
                            console.error(`Kh√¥ng th·ªÉ x√≥a ${member.displayName} v√¨ c√≥ quy·ªÅn cao h∆°n ho·∫∑c ngang v·ªõi bot.`);
                            continue;
                        }

                        try {
                            await member.kick("ƒê√£ x√≥a th√†nh vi√™n kh√¥ng ho·∫°t ƒë·ªông trong 30 ng√†y.");
                            deletedMembers.push(member.displayName);
                        } catch (error) {
                            console.error(`Kh√¥ng th·ªÉ x√≥a 3 ${member.displayName}:`, error);
                        }
                    }
                    break;

                case 'delete_not_in_db':
                    for (const member of membersNotInDB) {

                        if (member.id === msg.guild.ownerId) {
                            continue; // B·ªè qua n·∫øu th√†nh vi√™n l√† ch·ªß s·ªü h·ªØu m√°y ch·ªß
                        }

                        try {
                            await member.kick("ƒê√£ x√≥a th√†nh vi√™n kh√¥ng ch·∫•p nh·∫≠n ƒëi·ªÅu kho·∫£n bot.");
                            deletedMembers.push(member.displayName);
                        } catch (error) {
                            console.error(`Kh√¥ng th·ªÉ x√≥a 4 ${member.displayName}:`, error);
                        }
                    }
                    break;
            }

            // Ki·ªÉm tra xem c√≥ th√†nh vi√™n n√†o ƒë√£ b·ªã x√≥a hay kh√¥ng
            const resultEmbed = new EmbedBuilder()
                .setTitle("K·∫øt qu·∫£ x√≥a th√†nh vi√™n")
                .setDescription(deletedMembers.length > 0 
                    ? `ƒê√£ x√≥a ${deletedMembers.length} th√†nh vi√™n: ${deletedMembers.join(', ')}.`
                    : "Kh√¥ng c√≥ th√†nh vi√™n n√†o b·ªã x√≥a.")
                .setColor("#e60ad4")
                .setTimestamp();

            // Ch·ªâ ch·ªânh s·ª≠a tin nh·∫Øn n·∫øu tin nh·∫Øn v·∫´n t·ªìn t·∫°i
            if (message) {
                await interaction.editReply({ embeds: [resultEmbed] });
            } else {
                await interaction.followUp({ content: "Kh√¥ng th·ªÉ ch·ªânh s·ª≠a ph·∫£n h·ªìi v√¨ tin nh·∫Øn ƒë√£ b·ªã x√≥a.", ephemeral: true });
            }
        });

        collector.on('end', () => {
            // H·∫øt th·ªùi gian th√¨ x√≥a c√°c n√∫t
            // if (message) {
            //     message.edit({ components: [] });
            // }
            message.delete()
            return;
        });
    },
};
