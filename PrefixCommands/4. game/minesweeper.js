const { ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const CommandStatus = require('../../schemas/Command_Status');
const economySystem = require('../../schemas/economySystem');

module.exports = {
    name: 'minesweeper',
    description: 'üî∏ Ch∆°i tr√≤ D√≤ M√¨n!',
    aliases: ['dm', 'g7'],

    async execute(msg, args) {

        // Ki·ªÉm tra tr·∫°ng th√°i c·ªßa l·ªánh
        const commandStatus = await CommandStatus.findOne({ command: '?minesweeper' });

        // N·∫øu l·ªánh ƒëang t·∫Øt, g·ª≠i th√¥ng b√°o v√† kh√¥ng th·ª±c hi·ªán l·ªánh
        if (commandStatus && commandStatus.status === 'off') {
            return msg.channel.send('L·ªánh n√†y ƒë√£ b·ªã t·∫Øt, vui l√≤ng th·ª≠ l·∫°i sau.');
        }

        try {
            const gridSize = 5; // K√≠ch th∆∞·ªõc b·∫£ng 5x5
            const mineCount = Math.floor(Math.random() * 7) + 3; // S·ªë m√¨n ng·∫´u nhi√™n

            // console.log(`Kh·ªüi t·∫°o tr√≤ ch∆°i v·ªõi k√≠ch th∆∞·ªõc: ${gridSize}x${gridSize} v√† s·ªë m√¨n: ${mineCount}`);

            const grid = Array.from({ length: gridSize }, () => Array(gridSize).fill(0)); // T·∫°o l∆∞·ªõi v·ªõi t·∫•t c·∫£ √¥ l√† 0
            let placedMines = 0; // S·ªë m√¨n ƒë√£ ƒë·∫∑t

            // ƒê·∫∑t m√¨n v√† c·∫≠p nh·∫≠t s·ªë m√¨n xung quanh
            while (placedMines < mineCount) {
                const x = Math.floor(Math.random() * gridSize); // T·ªça ƒë·ªô x ng·∫´u nhi√™n
                const y = Math.floor(Math.random() * gridSize); // T·ªça ƒë·ªô y ng·∫´u nhi√™n
                if (grid[x][y] === -1) continue; // N·∫øu √¥ ƒë√£ c√≥ m√¨n, b·ªè qua

                grid[x][y] = -1; // ƒê·∫∑t m√¨n
                placedMines++;

                // TƒÉng s·ªë ƒë·∫øm ·ªü c√°c √¥ l√¢n c·∫≠n
                for (let dx = -1; dx <= 1; dx++) {
                    for (let dy = -1; dy <= 1; dy++) {
                        const nx = x + dx;
                        const ny = y + dy;
                        if (nx >= 0 && nx < gridSize && ny >= 0 && ny < gridSize && grid[nx][ny] !== -1) {
                            grid[nx][ny]++; // TƒÉng s·ªë m√¨n xung quanh
                        }
                    }
                }
            }

            // console.log('V·ªã tr√≠ c√°c √¥ ch·ª©a m√¨n:');

            for (let i = 0; i < gridSize; i++) {
                for (let j = 0; j < gridSize; j++) {
                    if (grid[i][j] === -1) {
                        // console.log(`M√¨n t·∫°i √¥ (${i}, ${j})`);
                    }
                }
            }

            // T·∫°o b·∫£ng n√∫t ban ƒë·∫ßu
            function createBoard() {
                const buttons = [];
                for (let i = 0; i < gridSize; i++) {
                    const row = new ActionRowBuilder();
                    for (let j = 0; j < gridSize; j++) {
                        row.addComponents(
                            new ButtonBuilder()
                                .setCustomId(`${i}-${j}`) // T·∫°o customId cho t·ª´ng √¥
                                .setLabel('‚ùì') // Nh√£n m·∫∑c ƒë·ªãnh
                                .setStyle(ButtonStyle.Secondary) // Phong c√°ch c·ªßa n√∫t
                        );
                    }
                    buttons.push(row);
                }
                return buttons;
            }

            let boardComponents = createBoard();
            const gameMessage = await msg.channel.send({
                content: `Ch∆°i D√≤ M√¨n!`,
                components: boardComponents
            });

            const filter = interaction => interaction.isButton() && interaction.user.id === msg.author.id;
            const collector = gameMessage.createMessageComponentCollector({ filter, time: 60000 });

            collector.on('collect', async interaction => {
                await interaction.deferUpdate();

                // L·∫•y t·ªça ƒë·ªô t·ª´ customId m√† kh√¥ng d√πng split
                const coordinates = interaction.customId;
                const x = Number(coordinates.charAt(0)); // L·∫•y t·ªça ƒë·ªô x
                const y = Number(coordinates.charAt(2)); // L·∫•y t·ªça ƒë·ªô y

                if (grid[x][y] === -1) { // N·∫øu l√† √¥ ch·ª©a m√¨n
                    // C·∫≠p nh·∫≠t b·∫£ng ƒë·ªÉ hi·ªÉn th·ªã t·∫•t c·∫£ c√°c √¥ m√¨n v√† √¥ an to√†n v·ªõi s·ªë m√¨n xung quanh
                    const updatedBoardComponents = boardComponents.map((row, i) =>
                        new ActionRowBuilder().addComponents(
                            row.components.map((button, j) => {
                                const newButton = ButtonBuilder.from(button); // T·∫°o b·∫£n sao c·ªßa button
                                if (grid[i][j] === -1) {
                                    newButton.setLabel('üí£').setStyle(ButtonStyle.Danger); // Hi·ªán m√¨n
                                } else {
                                    newButton.setLabel(grid[i][j] > 0 ? grid[i][j].toString() : '‚úîÔ∏è').setStyle(ButtonStyle.Primary);
                                }
                                // ƒê√°nh d·∫•u √¥ ƒë√£ ch·ªçn
                                if (i === x && j === y) {
                                    newButton.setStyle(ButtonStyle.Danger).setLabel('üí£'); // N√∫t ƒë√£ ch·ªçn
                                } else if (button.data.label === '‚ùì') {
                                    newButton.setStyle(ButtonStyle.Secondary); // N√∫t ch∆∞a ch·ªçn
                                } else {
                                    newButton.setStyle(ButtonStyle.Primary); // N√∫t an to√†n ƒë√£ m·ªü
                                }
                                return newButton;
                            })
                        )
                    );

                    await gameMessage.edit({
                        content: 'üí£ B·∫°n ƒë√£ d·∫´m ph·∫£i m√¨n! R·∫•t ti·∫øc b·∫°n ƒë√£ thua! H√£y ti·∫øp t·ª•c d√πng ?g5 ƒë·ªÉ ch∆°i l·∫°i.',
                        components: updatedBoardComponents
                    });
                    collector.stop(); // D·ª´ng tr√≤ ch∆°i
                } else { // N·∫øu l√† √¥ an to√†n
                    const label = grid[x][y] > 0 ? grid[x][y].toString() : '‚úîÔ∏è';
                    boardComponents[x].components[y].setLabel(label).setStyle(ButtonStyle.Primary);

                    const openedCells = boardComponents.flatMap(row => row.components).filter(button => button.data.label !== '‚ùì').length;
                    if (openedCells === (gridSize * gridSize) - mineCount) {
                        await gameMessage.edit({
                            content: 'üéâ Ch√∫c m·ª´ng! B·∫°n ƒë√£ m·ªü t·∫•t c·∫£ c√°c √¥ an to√†n!',
                            components: boardComponents
                        });
                        collector.stop(); // D·ª´ng tr√≤ ch∆°i
                    } else {
                        await gameMessage.edit({
                            content: `Ch∆°i D√≤ M√¨n!`,
                            components: boardComponents
                        });
                    }
                }
            });

            collector.on('end', async () => {
                await msg.channel.send('Th·ªùi gian ch∆°i ƒë√£ k·∫øt th√∫c!');
            });
        } catch (error) {
            // console.error('L·ªói trong qu√° tr√¨nh ch·∫°y game:', error);
            await msg.channel.send('ƒê√£ x·∫£y ra l·ªói khi kh·ªüi ƒë·ªông tr√≤ ch∆°i.');
        }
    },
};





































//////////////13 h√†ng n√∫t
// // Nh·∫≠p c√°c th√†nh ph·∫ßn c·∫ßn thi·∫øt t·ª´ th∆∞ vi·ªán discord.js
// const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');

// // Xu·∫•t module v·ªõi c√°c th√¥ng tin v·ªÅ l·ªánh
// module.exports = {
//     name: 'minesweeper',
//     description: 'Ch∆°i tr√≤ D√≤ M√¨n!',
//     aliases: ['ms', 'g5'],
//     async execute(msg, args) {
//         try {
//             // Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng y√™u c·∫ßu tr·ª£ gi√∫p
//             if (args[0] === 'help') {
//                 // T·∫°o m·ªôt embed ƒë·ªÉ h∆∞·ªõng d·∫´n ch∆°i
//                 const helpEmbed = new EmbedBuilder()
//                     .setTitle('H∆∞·ªõng d·∫´n ch∆°i D√≤ M√¨n')
//                     .setDescription('D∆∞·ªõi ƒë√¢y l√† c√°ch ch∆°i tr√≤ D√≤ M√¨n:\n')
//                     .addFields(
//                         { name: 'B∆∞·ªõc 1:', value: 'B·∫£ng s·∫Ω c√≥ k√≠ch th∆∞·ªõc 13x13 v√† ch·ª©a m·ªôt s·ªë √¥.' },
//                         { name: 'B∆∞·ªõc 2:', value: 'C√≥ m·ªôt s·ªë √¥ ch·ª©a m√¨n. Nhi·ªám v·ª• c·ªßa b·∫°n l√† t√¨m √¥ an to√†n m√† kh√¥ng ch·∫°m v√†o m√¨n.' },
//                         { name: 'B∆∞·ªõc 3:', value: 'Nh·∫•n v√†o √¥ m√† b·∫°n mu·ªën m·ªü. N·∫øu b·∫°n ch·ªçn √¥ ch·ª©a m√¨n, b·∫°n s·∫Ω thua.' },
//                         { name: 'B∆∞·ªõc 4:', value: 'N·∫øu b·∫°n m·ªü t·∫•t c·∫£ c√°c √¥ an to√†n m√† kh√¥ng ch·∫°m v√†o m√¨n, b·∫°n s·∫Ω th·∫Øng!' }
//                     )
//                     .setColor('Green')
//                     .setTimestamp();

//                 return msg.channel.send({ embeds: [helpEmbed] }); // G·ª≠i th√¥ng b√°o tr·ª£ gi√∫p
//             }

//             // Kh·ªüi t·∫°o k√≠ch th∆∞·ªõc b·∫£ng v√† s·ªë l∆∞·ª£ng m√¨n
//             const gridSize = 13; // K√≠ch th∆∞·ªõc b·∫£ng 13x13
//             const mineCount = Math.floor(Math.random() * 5) + 5; // S·ªë l∆∞·ª£ng m√¨n t·ª´ 5 ƒë·∫øn 9

//             // T·∫°o b·∫£ng √¥ v√† ƒë·∫∑t m√¨n
//             const grid = Array.from({ length: gridSize }, () => Array(gridSize).fill(0));
//             for (let i = 0; i < mineCount; i++) {
//                 let minePosition;
//                 do {
//                     minePosition = [Math.floor(Math.random() * gridSize), Math.floor(Math.random() * gridSize)];
//                 } while (grid[minePosition[0]][minePosition[1]] === -1); // Ki·ªÉm tra xem v·ªã tr√≠ ƒë√£ c√≥ m√¨n ch∆∞a
//                 grid[minePosition[0]][minePosition[1]] = -1; // ƒê·∫∑t m√¨n

//                 // TƒÉng s·ªë l∆∞·ª£ng m√¨n xung quanh √¥ ch·ª©a m√¨n
//                 for (let x = -1; x <= 1; x++) {
//                     for (let y = -1; y <= 1; y++) {
//                         const newX = minePosition[0] + x;
//                         const newY = minePosition[1] + y;
//                         // Ki·ªÉm tra c√°c √¥ l√¢n c·∫≠n
//                         if (newX >= 0 && newX < gridSize && newY >= 0 && newY < gridSize && grid[newX][newY] !== -1) {
//                             grid[newX][newY]++;
//                         }
//                     }
//                 }
//             }

//             // T·∫°o b·∫£ng th√¥ng tin √¥
//             const buttons = [];
//             for (let i = 0; i < gridSize; i++) {
//                 for (let j = 0; j < gridSize; j++) {
//                     buttons.push(new ButtonBuilder()
//                         .setCustomId(`${i}-${j}`) // ƒê·∫∑t ID cho m·ªói n√∫t t∆∞∆°ng ·ª©ng v·ªõi v·ªã tr√≠ √¥
//                         .setLabel('‚ùì') // G√°n nh√£n cho c√°c n√∫t l√† d·∫•u h·ªèi ban ƒë·∫ßu
//                         .setStyle(ButtonStyle.Secondary));
//                 }
//             }

//             // T·∫°o c√°c h√†ng v·ªõi t·ªëi ƒëa 5 n√∫t m·ªói h√†ng
//             const row1 = new ActionRowBuilder().addComponents(buttons[0], buttons[1], buttons[2], buttons[3], buttons[4]);
//             const row2 = new ActionRowBuilder().addComponents(buttons[5], buttons[6], buttons[7], buttons[8], buttons[9]);
//             const row3 = new ActionRowBuilder().addComponents(buttons[10], buttons[11], buttons[12], buttons[13], buttons[14]);
//             const row4 = new ActionRowBuilder().addComponents(buttons[15], buttons[16], buttons[17], buttons[18], buttons[19]);
//             const row5 = new ActionRowBuilder().addComponents(buttons[20], buttons[21], buttons[22], buttons[23], buttons[24]);
//             const row6 = new ActionRowBuilder().addComponents(buttons[25], buttons[26], buttons[27], buttons[28], buttons[29]);
//             const row7 = new ActionRowBuilder().addComponents(buttons[30], buttons[31], buttons[32], buttons[33], buttons[34]);
//             const row8 = new ActionRowBuilder().addComponents(buttons[35], buttons[36], buttons[37], buttons[38], buttons[39]);
//             const row9 = new ActionRowBuilder().addComponents(buttons[40], buttons[41], buttons[42], buttons[43], buttons[44]);
//             const row10 = new ActionRowBuilder().addComponents(buttons[45], buttons[46], buttons[47], buttons[48], buttons[49]);
//             const row11 = new ActionRowBuilder().addComponents(buttons[50], buttons[51], buttons[52], buttons[53], buttons[54]);
//             const row12 = new ActionRowBuilder().addComponents(buttons[55], buttons[56], buttons[57], buttons[58], buttons[59]);
//             const row13 = new ActionRowBuilder().addComponents(buttons[60], buttons[61], buttons[62], buttons[63], buttons[64]);

//             // G·ª≠i b·∫£ng 1
//             const gameMessage = await msg.channel.send({
//                 content: 'Ch∆°i D√≤ M√¨n! Nh·∫•n v√†o c√°c √¥ ƒë·ªÉ m·ªü.',
//                 components: [row1, row2, row3, row4, row5]
//             });

//             // G·ª≠i b·∫£ng 2
//             const gameMessage1 = await msg.channel.send({
//                 content: 'Ch∆°i D√≤ M√¨n! Nh·∫•n v√†o c√°c √¥ ƒë·ªÉ m·ªü.',
//                 components: [row6, row7, row8, row9, row10]
//             });

//             // G·ª≠i b·∫£ng 3
//             const gameMessage2 = await msg.channel.send({
//                 content: 'Ch∆°i D√≤ M√¨n! Nh·∫•n v√†o c√°c √¥ ƒë·ªÉ m·ªü.',
//                 components: [row11, row12, row13]
//             });

//             // T·∫°o b·ªô l·ªçc ch·ªâ cho ph√©p ng∆∞·ªùi g·ª≠i tin nh·∫Øn t∆∞∆°ng t√°c
//             const filter = interaction => interaction.isButton() && interaction.user.id === msg.author.id;

//             // Ch·ªù ng∆∞·ªùi ch∆°i ch·ªçn trong v√≤ng 10 gi√¢y
//             const collector = gameMessage.createMessageComponentCollector({ filter }); // D√πng gameMessage ƒë·ªÉ b·∫Øt ƒë·∫ßu collector

//             collector.on('collect', async interaction => {
//                 const [x, y] = interaction.customId.split('-').map(Number); // L·∫•y v·ªã tr√≠ t·ª´ ID n√∫t

//                 if (grid[x][y] === -1) { // Ki·ªÉm tra n·∫øu ch·ªçn √¥ ch·ª©a m√¨n
//                     await interaction.reply('üí£ B·∫°n ƒë√£ ch·ªçn √¥ ch·ª©a m√¨n! B·∫°n thua!'); // Th√¥ng b√°o thua
//                     collector.stop(); // K·∫øt th√∫c tr√≤ ch∆°i
//                     return;
//                 } else {
//                     // N·∫øu ch·ªçn √¥ an to√†n, hi·ªÉn th·ªã th√¥ng b√°o
//                     await interaction.reply(`‚úÖ B·∫°n ƒë√£ m·ªü √¥ t·∫°i v·ªã tr√≠ (${x + 1}, ${y + 1}). S·ªë m√¨n xung quanh: ${grid[x][y]}`);
//                     buttons[x * gridSize + y].setLabel(grid[x][y] > 0 ? grid[x][y].toString() : '‚úîÔ∏è'); // C·∫≠p nh·∫≠t n√∫t ƒë·ªÉ hi·ªÉn th·ªã √¥ ƒë√£ m·ªü
//                 }

//                 // Ki·ªÉm tra xem ng∆∞·ªùi ch∆°i ƒë√£ th·∫Øng ch∆∞a
//                 const openedCells = buttons.filter(button => button.data.label !== '‚ùì').length; // ƒê·∫øm s·ªë √¥ ƒë√£ m·ªü
//                 if (openedCells === buttons.length - mineCount) {
//                     await interaction.followUp('üéâ Ch√∫c m·ª´ng! B·∫°n ƒë√£ m·ªü t·∫•t c·∫£ c√°c √¥ an to√†n!');
//                     collector.stop(); // K·∫øt th√∫c tr√≤ ch∆°i
//                 }

//                 // C·∫≠p nh·∫≠t b·∫£ng
//                 await gameMessage.edit({
//                     content: 'Ch∆°i D√≤ M√¨n! Nh·∫•n v√†o c√°c √¥ ƒë·ªÉ m·ªü.',
//                     components: [row1, row2, row3, row4, row5] // C·∫≠p nh·∫≠t b·∫£ng v·ªõi c√°c n√∫t
//                 });
//             });

//             collector.on('end', async collected => {
//                 if (collected.size === 0) {
//                     await msg.channel.send('Th·ªùi gian ƒë√£ h·∫øt! B·∫°n kh√¥ng c√≥ l∆∞·ª£t n√†o.');
//                 }
//             });
//         } catch (error) {
//             console.error('L·ªói trong qu√° tr√¨nh ch·∫°y game:', error);
//             await msg.channel.send('ƒê√£ x·∫£y ra l·ªói khi kh·ªüi ƒë·ªông tr√≤ ch∆°i.');
//         }
//     },
// };