const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const CommandStatus = require('../../schemas/Command_Status');
const ms = require('ms');
const economySystem = require('../../schemas/economySystem');

module.exports = {
    name: 'dkbd',
    description: 
        `üî∏ ƒê·ªÉ ch∆°i D·∫° Kh√∫c B√≥ng ƒê√™m, b·∫°n ph·∫£i c√≥ c√°c √¥ m√†u ƒëen\n` +
        `¬†¬†¬†¬†¬†¬†¬†kh·∫Øp b·∫£ng.\n\n` +
        `üî∏ ƒê·ªÉ xem h∆∞·ªõng d·∫´n d√πng \`\`\`?dkbd h\`\`\``,
    aliases: ['dk', 'g1'],

    async execute(msg, args) {

        // Ki·ªÉm tra tr·∫°ng th√°i c·ªßa l·ªánh
        const commandStatus = await CommandStatus.findOne({ command: '?dkbd' });

        // N·∫øu l·ªánh ƒëang t·∫Øt, g·ª≠i th√¥ng b√°o v√† kh√¥ng th·ª±c hi·ªán l·ªánh
        if (commandStatus && commandStatus.status === 'off') {
            return msg.channel.send('L·ªánh n√†y ƒë√£ b·ªã t·∫Øt, vui l√≤ng th·ª≠ l·∫°i sau.');
        }

        // Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng y√™u c·∫ßu tr·ª£ gi√∫p .toLowerCase() args[0] && args[0].toLowerCase()
        if (args[0] && args[0].toLowerCase() === 'h') {
            const helpEmbed = new EmbedBuilder()
                .setTitle('H∆∞·ªõng d·∫´n ch∆°i D·∫° Kh√∫c B√≥ng ƒê√™m')
                .setDescription(
                    `Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi tr√≤ ch∆°i D·∫° Kh√∫c B√≥ng ƒê√™m! D∆∞·ªõi ƒë√¢y l√† h∆∞·ªõng d·∫´n chi ti·∫øt: ‚§µ\n` +
                        `\n> NGUY√äN T·∫ÆC L·∫¨T √î üîÑ:` +
                        `\n- Khi b·∫°n l·∫≠t m·ªôt √¥ (b·∫±ng c√°ch nh·∫•n v√†o n√∫t "üîÑ"), √¥ b·∫°n ƒëang ƒë·ª©ng v√† c√°c √¥ b√™n tr√™n, d∆∞·ªõi, tr√°i, ph·∫£i c·ªßa √¥ ƒë√≥ c≈©ng s·∫Ω b·ªã l·∫≠t.` +
                        `\n- N·∫øu √¥ n√†o l√† tr·∫Øng, sau khi l·∫≠t n√≥ s·∫Ω tr·ªü th√†nh ƒëen, v√† ng∆∞·ª£c l·∫°i (ƒëen s·∫Ω tr·ªü th√†nh tr·∫Øng).` +
                        `\n‚Ü™ VD: b·∫°n ƒëang ·ªü gi·ªØa b·∫£ng v·ªõi √¥ m√†u tr·∫Øng. Sau khi b·∫°n nh·∫•n l·∫≠t th√¨ √¥ hi·ªán t·∫°i c·ªßa b·∫°n s·∫Ω b·ªã l·∫≠t, t·ª©c l√† n·∫øu √¥ m√†u tr·∫Øng ` +
                        `n√≥ s·∫Ω th√†nh m√†u ƒëen, C√°c √¥ xung quanh s·∫Ω thay ƒë·ªïi tr·∫°ng th√°i (tr·∫Øng th√†nh ƒëen, ƒëen th√†nh tr·∫Øng).\n` +

                    `\n> T√çNH TO√ÅN C√ÅCH DI CHUY·ªÇN ƒê·ªÇ CHI·∫æN TH·∫ÆNG:` +
                        `\n- ƒê·ªÉ gi√†nh chi·∫øn th·∫Øng, b·∫°n c·∫ßn l·∫≠t c√°c √¥ m·ªôt c√°ch c·∫©n th·∫≠n sao cho t·∫•t c·∫£ c√°c √¥ tr√™n b·∫£ng ƒë·ªÅu chuy·ªÉn th√†nh m√†u ƒëen.` +
                        `\n- Do m·ªói l·∫ßn l·∫≠t √¥ s·∫Ω ·∫£nh h∆∞·ªüng ƒë·∫øn c√°c √¥ xung quanh, b·∫°n c·∫ßn t√≠nh to√°n ƒë·ªÉ s·ª≠ d·ª•ng √≠t l∆∞·ª£t nh·∫•t c√≥ th·ªÉ.` +
                        `\n- ƒê√¥i khi b·∫°n c·∫ßn di chuy·ªÉn ƒë·∫øn v·ªã tr√≠ kh√°c tr√™n b·∫£ng ƒë·ªÉ c√≥ th·ªÉ l·∫≠t c√°c √¥ xung quanh m·ªôt c√°ch h·ª£p l√Ω, ` +
                        `v√¨ l·∫≠t ƒëi l·∫≠t l·∫°i s·∫Ω ƒë∆∞a c√°c √¥ v·ªÅ l·∫°i tr·∫°ng th√°i ban ƒë·∫ßu.\n` +

                    `\n> CHI·∫æN L∆Ø·ª¢C C∆† B·∫¢N:\n- C·ªë g·∫Øng l·∫≠t c√°c √¥ theo nh√≥m ƒë·ªÉ nhanh ch√≥ng bi·∫øn ƒë·ªïi nhi·ªÅu √¥ th√†nh m√†u ƒëen h∆°n.` +
                        `\n- B·∫Øt ƒë·∫ßu t·ª´ c√°c g√≥c ho·∫∑c c√°c c·∫°nh c·ªßa b·∫£ng, v√¨ c√°c √¥ ·ªü v·ªã tr√≠ n√†y √≠t b·ªã ·∫£nh h∆∞·ªüng h∆°n so v·ªõi c√°c √¥ ·ªü gi·ªØa b·∫£ng` +
                        `\n- D√πng th·ª≠ t·ª´ng n√∫t l·∫≠t ·ªü c√°c v·ªã tr√≠ kh√°c nhau ƒë·ªÉ th·∫•y ·∫£nh h∆∞·ªüng c·ªßa c√°c l∆∞·ª£t l·∫≠t. Khi quen d·∫ßn, b·∫°n s·∫Ω th·∫•y m·∫´u thay ƒë·ªïi c·ªßa c√°c √¥.` +
                        `\n- Ghi nh·ªõ s·ªë l∆∞·ª£t di chuy·ªÉn v√† l·∫≠t, v√† th·ª≠ m·ªôt c√°ch logic ƒë·ªÉ t·∫•t c·∫£ c√°c √¥ th√†nh m√†u ƒëen.\n` +

                    `\n> C√ÅCH CH∆†I ‚¨ÖÔ∏è‚¨ÜÔ∏è‚¨áÔ∏è‚û°Ô∏è:\n- S·ª≠ d·ª•ng c√°c n√∫t ƒë·ªÉ di chuy·ªÉn l√™n, xu·ªëng, tr√°i, ph·∫£i, v√† l·∫≠t √¥ t·∫°i v·ªã tr√≠ c·ªßa b·∫°n.` +
                        `\n- M·ªói khi b·∫°n di chuy·ªÉn, √¥ ng∆∞·ªùi ch∆°i s·∫Ω ƒë·ªïi m√†u (d·ª±a theo tr·∫°ng th√°i c·ªßa √¥ b·∫°n ƒëang ƒë·ª©ng)`
                )
                .setColor('Blue')
                .setTimestamp();

            return msg.channel.send({ embeds: [helpEmbed] });
        }

        const white = true;
        const black = false;
        const base = [white, black];
        const board = [];
        let Moves = 0;
        let Flips = 0;

        // T·∫°o b·∫£ng 5x5 v·ªõi c√°c gi√° tr·ªã true/false ng·∫´u nhi√™n
        for (let i = 0; i < 5; i++) {
            const row = [];
            for (let j = 0; j < 5; j++) {
                const rn = Math.floor(Math.random() * base.length);
                row.push(base[rn]);
            }
            board.push(row);
        }

        // Kh·ªüi t·∫°o v·ªã tr√≠ c·ªßa ng∆∞·ªùi ch∆°i ·ªü gi·ªØa b·∫£ng
        let playerPos = { x: 2, y: 2 };

        // H√†m ƒë·ªÉ hi·ªÉn th·ªã b·∫£ng v·ªõi ng∆∞·ªùi ch∆°i
        function displayBoard() {
            return board.map((row, rowIndex) =>
                row.map((cell, colIndex) => {
                    if (rowIndex === playerPos.x && colIndex === playerPos.y) {
                        return cell ? 'üáπ' : 'üá©'; // V√≤ng tr√≤n m√†u tr·∫Øng ho·∫∑c ƒëen d√†nh cho ng∆∞·ªùi ch∆°i '<a:trang:1301972985405767721>' : '<a:den:1301972980611551334>'
                    }
                    return cell ? '‚¨ú' : '‚¨õ';
                }).join('')
            ).join('\n');
        }

        let description = `\`\`\`ƒê·ªÉ ch∆°i D·∫° Kh√∫c B√≥ng ƒê√™m, b·∫°n ph·∫£i ƒë·∫°t ƒë∆∞·ª£c\nc√°c √¥ m√†u ƒëen kh·∫Øp b·∫£ng\`\`\``;

        // H√†m l·∫≠t c√°c √¥
        function flipCells(x, y) {
            const positions = [
                { x, y }, // √¥ hi·ªán t·∫°i
                { x: x - 1, y }, // √¥ tr√™n
                { x: x + 1, y }, // √¥ d∆∞·ªõi
                { x, y: y - 1 }, // √¥ b√™n tr√°i
                { x, y: y + 1 } // √¥ b√™n ph·∫£i
            ];

            positions.forEach(pos => {
                if (pos.x >= 0 && pos.x < 5 && pos.y >= 0 && pos.y < 5) {
                    board[pos.x][pos.y] = !board[pos.x][pos.y];
                }
            });
        }

        // H√†m ki·ªÉm tra xem m·ªôt h√†ng c√≥ ph·∫£i l√† t·∫•t c·∫£ black/false kh√¥ng
        function checkRow(row) {
            const set = new Set(row);
            return set.size === 1 && set.has(false);
        }

        // H√†m ki·ªÉm tra xem m·ªôt c·ªôt c√≥ ph·∫£i l√† t·∫•t c·∫£ black/false kh√¥ng
        function checkColumn(columnIndex) {
            return board.map(row => row[columnIndex]).every(cell => !cell);
        }

        // T·∫°o embed cho tr√≤ ch∆°i
        const embed = new EmbedBuilder()
            .setTitle('D·∫° Kh√∫c B√≥ng ƒê√™m!')
            .setAuthor({ iconURL: msg.author.displayAvatarURL(), name: msg.author.username })
            .setColor('Red')
            .setDescription(description)
            .setTimestamp();

        // T·∫°o c√°c n√∫t cho giao di·ªán
        const row1 = new ActionRowBuilder().addComponents(
            new ButtonBuilder().setCustomId('dkbdUp').setEmoji('‚¨ÜÔ∏è').setStyle(ButtonStyle.Primary),
            new ButtonBuilder().setCustomId('dkbdFlip').setEmoji('üîÑ').setStyle(ButtonStyle.Success),
            new ButtonBuilder().setCustomId('dkbdDown').setEmoji('‚¨áÔ∏è').setStyle(ButtonStyle.Primary)
        );

        const row2 = new ActionRowBuilder().addComponents(
            new ButtonBuilder().setCustomId('dkbdLeft').setEmoji('‚¨ÖÔ∏è').setStyle(ButtonStyle.Primary),
            new ButtonBuilder().setCustomId('dkbdEnd').setEmoji('‚úñÔ∏è').setStyle(ButtonStyle.Danger),
            new ButtonBuilder().setCustomId('dkbdRight').setEmoji('‚û°Ô∏è').setStyle(ButtonStyle.Primary)
        );

        const message = await msg.channel.send({ embeds: [embed.setDescription(`${description} ${displayBoard()}\nS·ªë l·∫ßn di chuy·ªÉn: **${Moves}** S·ªë l·∫ßn l·∫≠t: **${Flips}**`)], components: [row1, row2] });

        // Collector cho c√°c n√∫t
        const filter = i => {
            i.deferUpdate();
            return i.user.id === msg.author.id;
        };
        
        const collector = message.createMessageComponentCollector({ filter, time: ms('1m') });

        collector.on('collect', async (i) => {

            // Di chuy·ªÉn ng∆∞·ªùi ch∆°i
            if (i.customId === 'dkbdUp' && playerPos.x > 0) {
                playerPos = { x: playerPos.x - 1, y: playerPos.y };
            }
            if (i.customId === 'dkbdDown' && playerPos.x < 4) {
                playerPos = { x: playerPos.x + 1, y: playerPos.y };
            }
            if (i.customId === 'dkbdLeft' && playerPos.y > 0) {
                playerPos = { x: playerPos.x, y: playerPos.y - 1 };
            }
            if (i.customId === 'dkbdRight' && playerPos.y < 4) {
                playerPos = { x: playerPos.x, y: playerPos.y + 1 };
            }

            Moves += 1;

            // C·∫≠p nh·∫≠t hi·ªÉn th·ªã b·∫£ng
            await message.edit({ embeds: [embed.setDescription(`${description} ${displayBoard()}\nS·ªë l·∫ßn di chuy·ªÉn: **${Moves}** S·ªë l·∫ßn l·∫≠t: **${Flips}**`)] });

            // L·∫≠t √¥
            if (i.customId === 'dkbdFlip') {
                flipCells(playerPos.x, playerPos.y);
                Flips += 1;

                if (checkRow(board[playerPos.x]) && checkColumn(playerPos.y)) {
                    await message.edit({ embeds: [embed.setDescription(`${description} ${displayBoard()}\nS·ªë l·∫ßn di chuy·ªÉn: **${Moves}** S·ªë l·∫ßn l·∫≠t: **${Flips}**\n\nTr√≤ ch∆°i k·∫øt th√∫c! B·∫°n ƒë√£ th·∫Øng!`)] });
                    collector.stop('Chi·∫øn th·∫Øng');
                }
            }

            // N√∫t tho√°t
            if (i.customId === 'dkbdEnd') {
                await message.edit({ embeds: [embed.setDescription(`${description} ${displayBoard()}\nS·ªë l·∫ßn di chuy·ªÉn: **${Moves}** S·ªë l·∫ßn l·∫≠t: **${Flips}**`)] });
                collector.stop('Kh√≥ qu√°');
            }

            collector.resetTimer();
        });

        collector.on('end', async (collected) => {
            try {
                // Th·ª≠ truy c·∫≠p tin nh·∫Øn ƒë·ªÉ ki·ªÉm tra xem n√≥ c√≤n t·ªìn t·∫°i kh√¥ng
                const fetchedMessage = await message.channel.messages.fetch(message.id);
                const reason = `H·∫øt th·ªùi gian` 

                // N·∫øu tin nh·∫Øn t·ªìn t·∫°i, th·ª±c hi·ªán ch·ªânh s·ª≠a
                await fetchedMessage.edit({
                    embeds: [
                        new EmbedBuilder()
                            .setTitle('D·∫° Kh√∫c B√≥ng ƒê√™m')
                            .setDescription(`Tr√≤ ch∆°i ƒë√£ k·∫øt th√∫c.\nL√Ω do: \`${reason}\`\nƒêi·ªÉm s·ªë cu·ªëi c√πng: ‚§µ\nS·ªë l·∫ßn di chuy·ªÉn: **${Moves}** S·ªë l·∫ßn l·∫≠t: **${Flips}**`)
                    ],
                    components: []
                });
            } catch (error) {
                // N·∫øu tin nh·∫Øn kh√¥ng t·ªìn t·∫°i (b·ªã x√≥a), b·ªè qua l·ªói
                if (error.code === 10008) {
                    // console.log('Tin nh·∫Øn ƒë√£ b·ªã x√≥a, b·ªè qua vi·ªác ch·ªânh s·ª≠a.');
                } else {
                    console.error('L·ªói kh√¥ng mong mu·ªën:', error);
                }
            }
        });
        
    }
};
















///////////////////// m·ª©c d·ªÖ

// const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
// const ms = require('ms');

// module.exports = {
//     name: 'danceofdarkness',
//     description: 'ƒê·ªÉ ch∆°i D·∫° Kh√∫c B√≥ng ƒê√™m, b·∫°n ph·∫£i c√≥ c√°c √¥ m√†u ƒëen kh·∫Øp b·∫£ng',
//     aliases: ['dod', 'ds'],
//     async execute(msg, args) {
//         const white = true;
//         const black = false;
//         const base = [white, black];
//         const board = [];
//         let Moves = 0;
//         let Flips = 0;

//         // T·∫°o b·∫£ng 5x5 v·ªõi c√°c gi√° tr·ªã true/false ng·∫´u nhi√™n
//         for (let i = 0; i < 5; i++) {
//             const row = [];
//             for (let j = 0; j < 5; j++) {
//                 const rn = Math.floor(Math.random() * base.length);
//                 row.push(base[rn]);
//             }
//             board.push(row);
//         }

//         // Kh·ªüi t·∫°o v·ªã tr√≠ c·ªßa ng∆∞·ªùi ch∆°i ·ªü gi·ªØa b·∫£ng
//         let playerPos = { x: 2, y: 2 };

//         // H√†m ƒë·ªÉ hi·ªÉn th·ªã b·∫£ng v·ªõi ng∆∞·ªùi ch∆°i
//         function displayBoard() {
//             return board.map((row, rowIndex) =>
//                 row.map((cell, colIndex) => {
//                     if (rowIndex === playerPos.x && colIndex === playerPos.y) {
//                         return cell ? '<a:trang:1301972985405767721>' : '<a:den:1301972980611551334>'; // V√≤ng tr√≤n m√†u tr·∫Øng ho·∫∑c ƒëen d√†nh cho ng∆∞·ªùi ch∆°i
//                     }
//                     return cell ? '‚¨ú' : '‚¨õ';
//                 }).join('')
//             ).join('\n');
//         }

//         let description = `\`\`\`ƒê·ªÉ ch∆°i D·∫° Kh√∫c B√≥ng ƒê√™m, b·∫°n ph·∫£i ƒë·∫°t ƒë∆∞·ª£c\nc√°c √¥ m√†u ƒëen kh·∫Øp b·∫£ng\`\`\``;

//         // H√†m l·∫≠t c√°c √¥
//         function flipCells(x, y) {
//             const positions = [
//                 { x, y }, // √¥ hi·ªán t·∫°i
//                 { x: x - 1, y }, // √¥ tr√™n
//                 { x: x + 1, y }, // √¥ d∆∞·ªõi
//                 { x, y: y - 1 }, // √¥ b√™n tr√°i
//                 { x, y: y + 1 } // √¥ b√™n ph·∫£i
//             ];

//             positions.forEach(pos => {
//                 if (pos.x >= 0 && pos.x < 5 && pos.y >= 0 && pos.y < 5) {
//                     board[pos.x][pos.y] = !board[pos.x][pos.y]; // L·∫≠t √¥
//                 }
//             });
//         }

//         // T·∫°o embed cho tr√≤ ch∆°i
//         const embed = new EmbedBuilder()
//             .setTitle('D·∫° Kh√∫c B√≥ng ƒê√™m!')
//             .setAuthor({ iconURL: msg.author.displayAvatarURL(), name: msg.author.username })
//             .setColor('Red')
//             .setDescription(description)
//             .setTimestamp();

//         // T·∫°o c√°c n√∫t cho giao di·ªán
//         const row1 = new ActionRowBuilder().addComponents(
//             new ButtonBuilder().setCustomId('dkbdUp').setEmoji('‚¨ÜÔ∏è').setStyle(ButtonStyle.Primary),
//             new ButtonBuilder().setCustomId('dkbdFlip').setEmoji('üîÑ').setStyle(ButtonStyle.Success),
//             new ButtonBuilder().setCustomId('dkbdDown').setEmoji('‚¨áÔ∏è').setStyle(ButtonStyle.Primary)
//         );

//         const row2 = new ActionRowBuilder().addComponents(
//             new ButtonBuilder().setCustomId('dkbdLeft').setEmoji('‚¨ÖÔ∏è').setStyle(ButtonStyle.Primary),
//             new ButtonBuilder().setCustomId('dkbdEnd').setEmoji('‚úñÔ∏è').setStyle(ButtonStyle.Danger),
//             new ButtonBuilder().setCustomId('dkbdRight').setEmoji('‚û°Ô∏è').setStyle(ButtonStyle.Primary)
//         );

//         const message = await msg.channel.send({ embeds: [embed.setDescription(`${description} ${displayBoard()}\nS·ªë l·∫ßn di chuy·ªÉn: **${Moves}** S·ªë l·∫ßn l·∫≠t: **${Flips}**`)], components: [row1, row2] });

//         // Collector cho c√°c n√∫t
//         const filter = i => {
//             i.deferUpdate();
//             return i.user.id === msg.author.id;
//         };
        
//         const collector = message.createMessageComponentCollector({ filter, time: ms('5m') });

//         collector.on('collect', async (i) => {
//             // Di chuy·ªÉn ng∆∞·ªùi ch∆°i
//             if (i.customId === 'dkbdUp' && playerPos.x > 0) {
//                 playerPos = { x: playerPos.x - 1, y: playerPos.y };
//             }
//             if (i.customId === 'dkbdDown' && playerPos.x < 4) {
//                 playerPos = { x: playerPos.x + 1, y: playerPos.y };
//             }
//             if (i.customId === 'dkbdLeft' && playerPos.y > 0) {
//                 playerPos = { x: playerPos.x, y: playerPos.y - 1 };
//             }
//             if (i.customId === 'dkbdRight' && playerPos.y < 4) {
//                 playerPos = { x: playerPos.x, y: playerPos.y + 1 };
//             }

//             Moves += 1;

//             // C·∫≠p nh·∫≠t hi·ªÉn th·ªã b·∫£ng
//             await message.edit({ embeds: [embed.setDescription(`${description} ${displayBoard()}\nS·ªë l·∫ßn di chuy·ªÉn: **${Moves}** S·ªë l·∫ßn l·∫≠t: **${Flips}**`)] });

//             // L·∫≠t √¥
//             if (i.customId === 'dkbdFlip') {
//                 flipCells(playerPos.x, playerPos.y);
//                 Flips += 1;

//                 // Kh√¥ng c·∫ßn ki·ªÉm tra ƒëi·ªÅu ki·ªán th·∫Øng ·ªü ƒë√¢y
//             }

//             // N√∫t tho√°t
//             if (i.customId === 'dkbdEnd') {
//                 await message.edit({ embeds: [embed.setDescription(`${description} ${displayBoard()}\nS·ªë l·∫ßn di chuy·ªÉn: **${Moves}** S·ªë l·∫ßn l·∫≠t: **${Flips}**`)] });
//                 collector.stop('Quit');
//             }

//             collector.resetTimer();
//         });

//         // Khi collector k·∫øt th√∫c
//         collector.on('end', async (collected, reason) => {
//             await message.edit({
//                 embeds: [
//                     new EmbedBuilder()
//                         .setTitle('D·∫° Kh√∫c B√≥ng ƒê√™m')
//                         .setDescription(`Tr√≤ ch∆°i ƒë√£ k·∫øt th√∫c.\nL√Ω do: \`${reason}\`\nƒêi·ªÉm s·ªë cu·ªëi c√πng: S·ªë l·∫ßn di chuy·ªÉn: **${Moves}** S·ªë l·∫ßn l·∫≠t: **${Flips}**`)
//                 ],
//                 components: []
//             });
//         });
//     }
// };

