const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const CommandStatus = require('../../schemas/Command_Status');
const economySystem = require('../../schemas/economySystem');

const emojiTextList = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I'];
const emojiTextList1 = ['J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R'];
const emojiTextList2 = ['S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '1'];
const emojiTextList3 = ['BRB', '3', '4', '5', '6', '7', '8', '9', '0'];
const emojiTextList4 = ['brb', 'lol', 'idk', 'omg', 'ttyl', 'btw', 'fyi', 'lmao', 'tmi'];
const emojiTextList5 = ['smh', 'bff', 'fomo', 'lit', 'vibe', 'flex', 'cap', 'slay', 'nope'];

module.exports = {
    name: 'MysSearch', // MysticSearch
    description: 
        `üî∏ SƒÉn K√≠ T·ª± Th·∫ßn B√≠!\n\n` +
        `üî∏ ƒê·ªÉ nh·∫≠n th√™m th√¥ng tin v·ªÅ c√°ch ch∆°i, b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng\n` +
        `¬†¬†¬†¬†¬†¬†¬†l·ªánh d∆∞·ªõi trong tr√≤ ch∆°i ƒë·ªÉ hi·ªÉn th·ªã h∆∞·ªõng d·∫´n chi ti·∫øt: \`\`\`?MysSearch h\`\`\` `,
    aliases: ['skttb', 'g8'],

    async execute(msg, args) {
        const commandStatus = await CommandStatus.findOne({ command: '?findemoji' });

        if (commandStatus && commandStatus.status === 'off') {
            return msg.channel.send('L·ªánh n√†y ƒë√£ b·ªã t·∫Øt, vui l√≤ng th·ª≠ l·∫°i sau.');
        }

        try {
            // .toLowerCase()
            if (args[0] && args[0].toLowerCase() === 'h') {
                const helpEmbed = new EmbedBuilder()
                    .setTitle('H∆∞·ªõng d·∫´n ch∆°i game SƒÉn K√Ω T·ª± Th·∫ßn B√≠')
                    .setDescription('D∆∞·ªõi ƒë√¢y l√† c√°ch ch∆°i game SƒÉn K√Ω T·ª± Th·∫ßn B√≠:\n')
                    .addFields(
                        { 
                            name: 'üìå B∆∞·ªõc 1: Chu·∫©n b·ªã', 
                            value: 'Khi b·∫°n b·∫Øt ƒë·∫ßu tr√≤ ch∆°i, b·∫°n s·∫Ω th·∫•y m·ªôt lo·∫°t c√°c k√Ω t·ª± hi·ªán l√™n tr√™n m√†n h√¨nh trong v√≤ng 5 gi√¢y.' 
                        },

                        { 
                            name: 'üìå B∆∞·ªõc 1: Chu·∫©n b·ªã', 
                            value: 'Khi b·∫°n b·∫Øt ƒë·∫ßu tr√≤ ch∆°i, b·∫°n s·∫Ω th·∫•y m·ªôt lo·∫°t c√°c k√Ω t·ª± hi·ªán l√™n tr√™n m√†n h√¨nh trong v√≤ng 5 gi√¢y.' 
                        },

                        { 
                            name: '‚è≥ B∆∞·ªõc 2: T√¨m ki·∫øm k√Ω t·ª±', 
                            value: 'Sau 5 gi√¢y, c√°c k√Ω t·ª± s·∫Ω bi·∫øn m·∫•t v√† b·∫°n s·∫Ω ƒë∆∞·ª£c y√™u c·∫ßu t√¨m m·ªôt k√Ω t·ª± c·ª• th·ªÉ. H√£y chu·∫©n b·ªã s·∫µn s√†ng!' 
                        },

                        { 
                            name: 'üí° B∆∞·ªõc 3: Ch·ªçn k√Ω t·ª±', 
                            value: 'Trong s·ªë c√°c k√Ω t·ª± ƒë√£ ·∫©n, h√£y nh·∫•n v√†o k√Ω t·ª± m√† b·∫°n nghƒ© l√† ƒë√∫ng. H√£y nh·ªõ r·∫±ng b·∫°n ch·ªâ c√≥ m·ªôt c∆° h·ªôi ƒë·ªÉ ch·ªçn ƒë√∫ng!' 
                        },

                        { 
                            name: 'üéâ B∆∞·ªõc 4: Nh·∫≠n k·∫øt qu·∫£', 
                            value: 'N·∫øu b·∫°n ch·ªçn ƒë√∫ng k√Ω t·ª±, b·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c m·ªôt th√¥ng b√°o ch√∫c m·ª´ng! N·∫øu b·∫°n ch·ªçn sai, b·∫°n s·∫Ω th·∫•y th√¥ng b√°o cho bi·∫øt k√Ω t·ª± b·∫°n ƒë√£ ch·ªçn v√† k√Ω t·ª± ƒë√∫ng.' 
                        },

                        { 
                            name: 'üïí L∆∞u √Ω', 
                            value: 'Th·ªùi gian ƒë·ªÉ ch·ªçn k√Ω t·ª± l√† 10 gi√¢y. N·∫øu b·∫°n kh√¥ng ch·ªçn trong th·ªùi gian n√†y, tr√≤ ch∆°i s·∫Ω t·ª± ƒë·ªông k·∫øt th√∫c v√† th√¥ng b√°o k·∫øt qu·∫£.' 
                        },

                        { 
                            name: 'üöÄ BRB STUDIO!', 
                            value: 'Ch√∫c b·∫°n c√≥ nh·ªØng tr·∫£i nghi·ªám th√∫ v·ªã v·ªõi game n√†y.' 
                        }
                    )
                    .setColor('Blue')
                    .setTimestamp();

                return msg.channel.send({ embeds: [helpEmbed] });
            }

            const allTextLists = [emojiTextList, emojiTextList1, emojiTextList2, emojiTextList3, emojiTextList4, emojiTextList5];
            let texts = ['brb studio', 'brb studio', 'brb studio', 'brb studio', 'brb studio', 'brb studio'];

            while (texts.length < 25) { // ƒê·∫£m b·∫£o l·∫•y ƒë·ªß 25 ch·ªØ
                const randomList = allTextLists[Math.floor(Math.random() * allTextLists.length)];
                const text = randomList[Math.floor(Math.random() * randomList.length)];

                if (!texts.includes(text)) { // Ki·ªÉm tra tr√πng l·∫∑p
                    texts.push(text);
                }
            }

            // Ti·∫øp t·ª•c ph·∫ßn m√£ x·ª≠ l√Ω v√† t·∫°o c√°c n√∫t nh∆∞ trong m√£ g·ªëc...
            // ƒê·∫∑t "brb studio" v√†o v·ªã tr√≠ ng·∫´u nhi√™n trong m·∫£ng texts
            texts = shuffleArray(texts);
            
            // T·∫°o h√†ng cho c√°c n√∫t ch·ªØ (5 h√†ng, m·ªói h√†ng 5 n√∫t)
            const rows = [];
            for (let rowIndex = 0; rowIndex < 5; rowIndex++) {
                const rowTexts = texts.slice(rowIndex * 5, rowIndex * 5 + 5); // L·∫•y 5 ch·ªØ cho m·ªói h√†ng
                const row = new ActionRowBuilder().addComponents(
                    rowTexts.map((text, i) => (
                        new ButtonBuilder()
                            .setCustomId((rowIndex * 5 + i).toString()) // ID cho n√∫t
                            .setLabel(text) // Thay ƒë·ªïi t·ª´ setEmoji sang setLabel
                            .setStyle(ButtonStyle.Primary)
                    ))
                );
                rows.push(row); // Th√™m h√†ng v√†o m·∫£ng h√†ng
            }

            const gameMessage = await msg.channel.send({
                content: 'H√£y ƒë·ª£i 5 gi√¢y ƒë·ªÉ ho√†n th√†nh vi·ªác x√°o tr·ªôn',
                components: rows
            });

            await new Promise(resolve => {
                const checkInteraction = (interaction) => {
                    if (interaction.user.id === msg.author.id) {
                        interaction.reply({ content: 'ƒêang trong qu√° tr√¨nh chu·∫©n b·ªã, h√£y ƒë·ª£i h·∫øt 5s ƒëi n√†o', ephemeral: true });
                    }
                };
                const filter = i => i.user.id === msg.author.id;
                const collector = gameMessage.createMessageComponentCollector({ filter, time: 5000 });

                collector.on('collect', checkInteraction);
                collector.on('end', () => resolve());
            });

            texts = shuffleArray(texts);
            const targetIndex = texts.indexOf('brb studio'); // L·∫•y v·ªã tr√≠ c·ªßa 'brb studio'
            const targetText = texts[targetIndex]; // X√°c ƒë·ªãnh ch·ªØ c·∫ßn t√¨m l√† 'brb studio'

            const hiddenTexts = texts.map(() => "BRB");
            const hiddenRows = [];
            for (let rowIndex = 0; rowIndex < 5; rowIndex++) {
                const rowHiddenTexts = hiddenTexts.slice(rowIndex * 5, rowIndex * 5 + 5); // L·∫•y 5 ch·ªØ ·∫©n cho m·ªói h√†ng
                const row = new ActionRowBuilder().addComponents(
                    rowHiddenTexts.map((text, i) => (
                        new ButtonBuilder()
                            .setCustomId((rowIndex * 5 + i).toString()) // ID cho n√∫t
                            .setLabel(text) // Thay ƒë·ªïi t·ª´ setEmoji sang setLabel
                            .setStyle(ButtonStyle.Primary)
                    ))
                );
                hiddenRows.push(row); // Th√™m h√†ng ·∫©n v√†o m·∫£ng h√†ng
            }

            await gameMessage.edit({
                content: `H√£y t√¨m ch·ªØ th·∫ßn b√≠: ${targetText}`,
                components: hiddenRows
            });

            const filter = interaction => interaction.isButton() && interaction.user.id === msg.author.id;
            let revealRows = []; 

            const collector = gameMessage.createMessageComponentCollector({ filter, time: 10000 });

            collector.on('collect', async interaction => {
                try {
                    revealRows = []; 
                    for (let rowIndex = 0; rowIndex < 5; rowIndex++) {
                        const rowRevealTexts = texts.slice(rowIndex * 5, rowIndex * 5 + 5); // L·∫•y 5 ch·ªØ cho m·ªói h√†ng
                        const row = new ActionRowBuilder().addComponents(
                            rowRevealTexts.map((text, i) => (
                                new ButtonBuilder()
                                    .setCustomId((rowIndex * 5 + i).toString()) // ID cho n√∫t
                                    .setLabel(text) // Thay ƒë·ªïi t·ª´ setEmoji sang setLabel
                                    .setStyle(ButtonStyle.Primary)
                            ))
                        );
                        revealRows.push(row); // Th√™m h√†ng hi·ªán ra v√†o m·∫£ng h√†ng
                    }

                    if (texts[interaction.customId] === targetText) {
                        await interaction.reply({  // followUp
                            content: `Ch√∫c m·ª´ng! B·∫°n ƒë√£ t√¨m ƒë√∫ng ch·ªØ th·∫ßn b√≠ ${texts[interaction.customId]}!`,
                            components: revealRows,
                            ephemeral: true 
                        });
                    } else {
                        await interaction.reply({ // update
                            content: `R·∫•t ti·∫øc b·∫°n ƒë√£ ch·ªçn sai r·ªìi\n` +
                                     `Ch·ªØ th·∫ßn b√≠ c·∫ßn t√¨m l√†: ${targetText}\n` +
                                     `B·∫°n ƒë√£ ch·ªçn ch·ªØ: ${texts[interaction.customId]}`, // ${interaction.customId} - 
                            components: revealRows
                        });
                    }

                    collector.stop();
                } catch (error) {
                    console.error(error);
                }
            });

            collector.on('end', async collected => {
                if (collected.size === 0) {
                    await gameMessage.edit({
                        content: `Th·ªùi gian ƒë√£ h·∫øt! Ch·ªØ th·∫ßn b√≠ c·∫ßn t√¨m l√†: ${targetText}`,
                        components: revealRows
                    });
                }
            });
            
        } catch (error) {
            console.error(error);
            msg.channel.send('ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh th·ª±c hi·ªán l·ªánh.');
        }
    }
};

// H√†m x√°o tr·ªôn m·∫£ng
function shuffleArray(array) {
    for (let i = array.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [array[i], array[j]] = [array[j], array[i]];
    }
    return array;
}