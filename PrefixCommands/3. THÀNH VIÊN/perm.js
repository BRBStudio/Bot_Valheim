const { EmbedBuilder, PermissionFlagsBits } = require('discord.js');
const { permissionMap } = require(`../../permissionMap`);
const interactionError = require('../../Events/WebhookError/interactionError');
const CommandStatus = require('../../schemas/Command_Status');

module.exports = {
    name: 'perm',
    description: `üî∏ Ki·ªÉm tra vai tr√≤ v√† quy·ªÅn c·ªßa ng∆∞·ªùi d√πng trong m√°y ch·ªß!`,
    hd: 'üî∏ ?perm <tag ng∆∞·ªùi d√πng mu·ªën ki·ªÉm tra>',
    aliases: ['q', 'tv8'],

    async execute(message) {

        try {

            // Ki·ªÉm tra tr·∫°ng th√°i c·ªßa l·ªánh
            const commandStatus = await CommandStatus.findOne({ command: '?perm' });

            // N·∫øu l·ªánh ƒëang t·∫Øt, g·ª≠i th√¥ng b√°o v√† kh√¥ng th·ª±c hi·ªán l·ªánh
            if (commandStatus && commandStatus.status === 'off') {
                return msg.channel.send('L·ªánh n√†y ƒë√£ b·ªã t·∫Øt, vui l√≤ng th·ª≠ l·∫°i sau.');
            }

            // Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng c√≥ tag m·ªôt ng∆∞·ªùi kh√°c (@user)
            let target = message.mentions.members.first(); // L·∫•y ng∆∞·ªùi d√πng ƒë∆∞·ª£c tag
            if (!target) {
                return message.channel.send('B·∫°n ph·∫£i tag m·ªôt ng∆∞·ªùi d√πng ƒë·ªÉ ki·ªÉm tra quy·ªÅn!');
            }

            // L·∫•y danh s√°ch c√°c vai tr√≤ c·ªßa ng∆∞·ªùi d√πng
            // const roles = target.roles.cache;

            // L·∫•y danh s√°ch c√°c vai tr√≤ c·ªßa ng∆∞·ªùi d√πng, lo·∫°i b·ªè @everyone
            const roles = target.roles.cache.filter(role => role.name !== '@everyone');

            // N·∫øu ng∆∞·ªùi d√πng kh√¥ng c√≥ vai tr√≤ n√†o, tr·∫£ v·ªÅ th√¥ng b√°o
            if (roles.size === 0) {
                return message.channel.send(`${target.user.displayName} kh√¥ng c√≥ vai tr√≤ n√†o trong m√°y ch·ªß n√†y.`);
            }

            // T·∫°o m·ªôt Embed ƒë·ªÉ hi·ªÉn th·ªã
            const embed = new EmbedBuilder()
                .setTitle(`Vai tr√≤ v√† quy·ªÅn c·ªßa ${target.user.displayName} trong m√°y ch·ªß`)
                .setColor(0x00FF00)
                .setTimestamp();

            // Duy·ªát qua t·ª´ng vai tr√≤ c·ªßa ng∆∞·ªùi d√πng
            roles.forEach(role => {
                if (role.name === '@everyone') return; // B·ªè qua vai tr√≤ m·∫∑c ƒë·ªãnh @everyone

                const permissionsList = [];
                const permissionFlags = Object.keys(PermissionFlagsBits);

                // Ki·ªÉm tra t·ª´ng quy·ªÅn c·ªßa vai tr√≤
                permissionFlags.forEach(flag => {
                    if (role.permissions.has(PermissionFlagsBits[flag])) {
                        // S·ª≠ d·ª•ng permissionMap ƒë·ªÉ d·ªãch quy·ªÅn sang ti·∫øng Vi·ªát n·∫øu c√≥
                        const translatedPermission = permissionMap[flag] || flag;
                        permissionsList.push(`‚Ä¢ ${translatedPermission}`);
                    }
                });

                // T·∫°o m·ªôt chu·ªói quy·ªÅn d·∫°ng danh s√°ch cho t·ª´ng vai tr√≤
                const permissionList = permissionsList.length > 0 ? permissionsList.join('\n') : 'Kh√¥ng c√≥ quy·ªÅn n√†o.';

                // Th√™m v√†o embed vai tr√≤ v√† quy·ªÅn c·ªßa n√≥
                embed.addFields({
                    name: `Vai tr√≤: ${role.name}`,
                    value: permissionList,
                    inline: true
                });
            });

            // G·ª≠i embed ch·ª©a vai tr√≤ v√† quy·ªÅn c·ªßa ng∆∞·ªùi d√πng
            await message.channel.send({ embeds: [embed] });

        } catch (error) {
            // X·ª≠ l√Ω l·ªói v√† g·ª≠i th√¥ng b√°o t·ªõi webhook
            await interactionError.execute(message, error, message.client);
        }
    }
};
