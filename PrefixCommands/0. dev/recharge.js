const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const economySystem = require('../../schemas/economySystem');
const CommandStatus = require('../../schemas/Command_Status');
const lsntSchema = require('../../schemas/lsntSchema'); // Schema l∆∞u l·ªãch s·ª≠
const config = require('../../config');

/*
    ?re list l·ªãch s·ª≠ n·∫°p ti·ªÅn
    ?re dsn danh s√°ch n·ª£
    ?re <id ng∆∞·ªùi d√πng c·∫ßn n·∫°p> <s·ªë ti·ªÅn mu·ªën n·∫°p> <id m√°y ch·ªß c·∫ßn n·∫°p> n·∫°p ti·ªÅn cho ng∆∞·ªùi d√πng
    ?re recall <id ng∆∞·ªùi d√πng c·∫ßn thu h·ªìi s·ªë ti·ªÅn> <s·ªë ti·ªÅn mu·ªën thu h·ªìi> <id m√°y ch·ªß c·∫ßn thu h·ªìi s·ªë ti·ªÅn> thu h·ªìi s·ªë ti·ªÅn c·ªßa ng∆∞·ªùi d√πng
*/

module.exports = {
    name: 'recharge',
    description: '\`üî∏ L·ªÜNH D√ÄNH CHO DEV\`', // N·∫°p ti·ªÅn v√†o t√†i kho·∫£n ng∆∞·ªùi ch∆°i ho·∫∑c xem l·ªãch s·ª≠ n·∫°p ti·ªÅn.
    hd: `\`üî∏ C√°ch d√πng: Kh√¥ng c√≥ th√¥ng tin\``,
    q: `\`üî∏ D√†nh cho DEV\``,
    aliases: ['nt', 'ct'],
    async execute(msg, args) {
        
        // Ki·ªÉm tra tr·∫°ng th√°i l·ªánh
        const commandStatus = await CommandStatus.findOne({ command: '?recharge' });

        if (commandStatus && commandStatus.status === 'off') {
            return msg.channel.send('L·ªánh n√†y ƒë√£ b·ªã t·∫Øt, vui l√≤ng th·ª≠ l·∫°i sau.');
        }

        if (!config.specialUsers.includes(msg.author.id)) { 
            return msg.channel.send("B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y!"); 
        }

        if (args[0].toLowerCase() === 'recall') {

            if (args.length < 4) {
                return msg.channel.send('‚ùå Vui l√≤ng nh·∫≠p ƒë√∫ng c√∫ ph√°p: `?recharge recall <ID ng∆∞·ªùi d√πng> <s·ªë ti·ªÅn> <ID m√°y ch·ªß>`.');
            }

            const userId = args[1];
            const amountString = args[2];
            const guildId = args[3];
            const amount = parseFloat(amountString.replace(/\./g, ''));

            if (isNaN(amount) || amount <= 0) {
                return msg.channel.send('‚ùå S·ªë <a:xu:1320563128848744548> thu h·ªìi kh√¥ng h·ª£p l·ªá! Vui l√≤ng nh·∫≠p s·ªë <a:xu:1320563128848744548> d∆∞∆°ng.');
            }

            try {
                // T√¨m t√†i kho·∫£n ng∆∞·ªùi d√πng m·ª•c ti√™u
                const targetData = await economySystem.findOne({ Guild: guildId, User: userId });

                if (!targetData) {
                    return msg.channel.send(`‚ùå Ng∆∞·ªùi d√πng c√≥ ID **${userId}** trong m√°y ch·ªß **${guildId}** kh√¥ng c√≥ t√†i kho·∫£n economy.`);
                }

                let remainingAmount = amount; // S·ªë ti·ªÅn c·∫ßn thu h·ªìi
                const bankBefore = targetData.Bank; // Ti·ªÅn tr∆∞·ªõc khi thu h·ªìi
                const walletBefore = targetData.Wallet; // Ti·ªÅn v√≠ tr∆∞·ªõc khi thu h·ªìi
                const debtBefore = targetData.Debt; // N·ª£ tr∆∞·ªõc khi thu h·ªìi
                const debtCountBefore = targetData.DebtCount; // S·ªë l·∫ßn n·ª£ tr∆∞·ªõc khi thu h·ªìi

                // Tr·ª´ ti·ªÅn t·ª´ Bank tr∆∞·ªõc
                if (targetData.Bank >= remainingAmount) {
                    targetData.Bank -= remainingAmount;
                    remainingAmount = 0;
                } else {
                    remainingAmount -= targetData.Bank;
                    targetData.Bank = 0;
                }

                // N·∫øu c√≤n d∆∞, tr·ª´ ti·∫øp t·ª´ Wallet
                if (remainingAmount > 0) {
                    if (targetData.Wallet >= remainingAmount) {
                        targetData.Wallet -= remainingAmount;
                        remainingAmount = 0;
                    } else {
                        remainingAmount -= targetData.Wallet;
                        targetData.Wallet = 0;
                    }
                }

                // // N·∫øu kh√¥ng ƒë·ªß, ghi ch√∫ n·ª£
                // if (remainingAmount > 0) {
                //     targetData.Debt += remainingAmount;
                //     targetData.DebtCount += 1;  // TƒÉng s·ªë l·∫ßn n·ª£
                // }

               // ƒêo·∫°n b·ªï sung x·ª≠ l√Ω tr·ª´ n·ª£ trong ph·∫ßn `recall`
                if (remainingAmount > 0) {
                    // Ng∆∞·ªùi d√πng kh√¥ng ƒë·ªß ti·ªÅn => Ghi n·ª£
                    targetData.Debt += remainingAmount;
                    targetData.DebtCount += 1;  // TƒÉng s·ªë l·∫ßn n·ª£ khi ph√°t sinh n·ª£ m·ªõi
                } else {
                    // Tr·ª´ n·ª£ n·∫øu c√≥ d∆∞ n·ª£ tr∆∞·ªõc ƒë√≥
                    if (targetData.Debt > 0) {
                        const originalDebt = targetData.Debt;
                        targetData.Debt -= Math.min(originalDebt, amount); // Tr·ª´ n·ª£ theo s·ªë ti·ªÅn recall

                        // ƒêi·ªÅu ch·ªânh s·ªë l·∫ßn n·ª£ n·∫øu h·∫øt n·ª£
                        if (targetData.Debt === 0 && targetData.DebtCount > 0) {
                            targetData.DebtCount -= 1; // Gi·∫£m s·ªë l·∫ßn n·ª£ khi x√≥a h·∫øt n·ª£
                        }
                    }
                }

                // L∆∞u l·∫°i bi·ªát danh v√† t√™n m√°y ch·ªß v√†o data
                const targetGuild = await msg.client.guilds.fetch(guildId).catch(() => null);
                const targetGuildName = targetGuild ? targetGuild.name : 'Kh√¥ng x√°c ƒë·ªãnh';
                const member = await msg.guild.members.fetch(userId).catch(() => null);
                const displayName = member ? member.displayName : 'Ng∆∞·ªùi d√πng kh√¥ng x√°c ƒë·ªãnh';

                targetData.DisplayName = displayName;
                targetData.GuildName = targetGuildName;

                await targetData.save();

                const channel = `1308473911218016266`

                // T√¨m k√™nh qua ID
                const c = await msg.client.channels.fetch(channel).catch(() => null);

                if (!c || !c.isTextBased()) {
                    return msg.channel.send('‚ùå Kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o v√¨ k√™nh ch·ªâ ƒë·ªãnh kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng ph·∫£i l√† k√™nh vƒÉn b·∫£n.');
                }
                
                // `ƒê√£ thu h·ªìi **${amount.toLocaleString('vi-VN')} vnd** t·ª´ ng∆∞·ªùi d√πng c√≥ ID **${userId}** trong m√°y ch·ªß **${guildId}**.`
                // T·∫°o th√¥ng b√°o H·ªá th·ªëng thu h·ªìi n·ª£
                const embed = new EmbedBuilder()
                    .setColor(remainingAmount > 0 ? config.embedRed : config.embedGreen)
                    .setTitle('<a:the_nh:1308507227992227840> THU H·ªíI <a:xu:1320563128848744548>')
                    .setDescription(
                        `**<a:diamond:1308498026750279760> T√™n M√°y Ch·ªß:**\n` +
                        `${targetGuildName}(${guildId})\n\n` +
                        `**<a:diamond:1308498026750279760> T√™n Ng∆∞·ªùi B·ªã Thu H·ªìi:**\n` +
                        `${displayName}(${userId})\n\n` +
                        `**<a:thuhoi:1308501772758683648> S·ªë <a:xu:1320563128848744548> Thu H·ªìi:**\n` +
                        `${amount.toLocaleString('vi-VN')} <a:xu:1320563128848744548>\n\n` +
                        `<a:loading:1308505719133175911><a:loading:1308505719133175911><a:loading:1308505719133175911>` +
                        `<a:loading:1308505719133175911><a:loading:1308505719133175911><a:loading:1308505719133175911>` +
                        `<a:loading:1308505719133175911><a:loading:1308505719133175911><a:loading:1308505719133175911>` +
                        `<a:loading:1308505719133175911><a:loading:1308505719133175911><a:loading:1308505719133175911>` +
                        `<a:loading:1308505719133175911><a:loading:1308505719133175911><a:loading:1308505719133175911>` +
                        `<a:loading:1308505719133175911><a:loading:1308505719133175911><a:loading:1308505719133175911>` +
                        `<a:loading:1308505719133175911><a:loading:1308505719133175911>`
                        // `‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ`
                    )
                    .addFields(
                        { 
                            name: `<:bank:1308501478838767626> Bank tr∆∞·ªõc`, 
                            value: `${bankBefore.toLocaleString('vi-VN')} <a:xu:1320563128848744548>`, 
                            inline: true 
                        },

                        { 
                            name: `<a:money:1308498915989127208> Wallet tr∆∞·ªõc`, 
                            value: `${walletBefore.toLocaleString('vi-VN')} <a:xu:1320563128848744548>`, 
                            inline: true },

                        { 
                            name: `\u200b`, 
                            value: `\u200b`, 
                            inline: true 
                        },

                        { 
                            name: `<a:muitenxuong:1307784555578789988> Bank hi·ªán t·∫°i`, 
                            value: `${targetData.Bank.toLocaleString('vi-VN')} <a:xu:1320563128848744548>`, 
                            inline: true 
                        },

                        { 
                            name: `<a:muitenxuong:1307784555578789988> Wallet hi·ªán t·∫°i`, 
                            value: `${targetData.Wallet.toLocaleString('vi-VN')} <a:xu:1320563128848744548>`, 
                            inline: true 
                        }
                    )
                    .setFooter({ text: `H·ªá th·ªëng thu h·ªìi n·ª£` });

                if (remainingAmount > 0) {
                    embed.addFields({ name: '‚ö†Ô∏è Ghi ch√∫ n·ª£', value: `Ng∆∞·ªùi d√πng n√†y c√≤n n·ª£ **${remainingAmount.toLocaleString('vi-VN')} <a:xu:1320563128848744548>**.` });
                }

                return c.send({ embeds: [embed] });
            } catch (error) {
                console.error(error);
                return msg.channel.send('‚ùå ƒê√£ x·∫£y ra l·ªói khi thu h·ªìi <a:xu:1320563128848744548>.');
            }
        }

        if (args[0].toLowerCase() === 'dsn') {
            try {
                const debts = await economySystem.find({ Debt: { $gt: 0 } });

                if (!debts.length) {
                    return msg.channel.send('‚úÖ Kh√¥ng c√≥ ng∆∞·ªùi d√πng n√†o c√≤n n·ª£.');
                }

                const embed = new EmbedBuilder()
                    .setColor(config.embedBlue)
                    .setTitle('üìú Danh s√°ch n·ª£')
                    .setDescription(debts.map(debt => 
                        `üî∏ **T√™n ng∆∞·ªùi d√πng:** ${debt.DisplayName || 'Ch∆∞a c√≥ bi·ªát danh'}\n` +
                        `üî∏ **ID ng∆∞·ªùi d√πng:** ${debt.User}\n` +
                        `üî∏ **T√™n M√°y ch·ªß:** ${debt.GuildName || 'Kh√¥ng x√°c ƒë·ªãnh'}\n` +
                        `üî∏ **ID m√°y ch·ªß:** ${debt.Guild}\n` +
                        `**N·ª£ tr∆∞·ªõc ƒë√≥:** ${(debt.PreviousDebt || debt.Debt).toLocaleString('vi-VN')} <a:xu:1320563128848744548>\n` +
                        `**N·ª£ ƒë√£ b·ªã tr·ª´:** ${((debt.PreviousDebt || debt.Debt) - debt.Debt).toLocaleString('vi-VN')} <a:xu:1320563128848744548>\n` +
                        `**C√≤n n·ª£:** ${debt.Debt.toLocaleString('vi-VN')} <a:xu:1320563128848744548>\n` +
                        `**S·ªë l·∫ßn n·ª£:** ${debt.DebtCount}`
                    ).join('\n'))
                    .setFooter({ text: `Ng∆∞·ªùi y√™u c·∫ßu: ${msg.author.displayName}`, iconURL: msg.author.displayAvatarURL() })
                    .setTimestamp();

                


                return msg.channel.send({ embeds: [embed] });
            } catch (error) {
                console.error(error);
                return msg.channel.send('‚ùå ƒê√£ x·∫£y ra l·ªói khi ki·ªÉm tra danh s√°ch n·ª£.');
            }
        }

        // Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng mu·ªën xem l·ªãch s·ª≠
        if (args[0].toLowerCase() === 'list') {
            try {
                // L·∫•y danh s√°ch l·ªãch s·ª≠ trong 30 ng√†y g·∫ßn nh·∫•t
                const thirtyDaysAgo = new Date();
                thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);

                const history = await lsntSchema.find({ date: { $gte: thirtyDaysAgo } }).sort({ date: -1 });

                if (!history.length) {
                    return msg.channel.send('‚ùå Kh√¥ng c√≥ l·ªãch s·ª≠ n·∫°p <a:xu:1320563128848744548> n√†o trong 30 ng√†y qua.');
                }

                // Chia danh s√°ch th√†nh c√°c trang (m·ªói trang t·ªëi ƒëa 15 m·ª•c)
                const itemsPerPage = 15;
                const totalPages = Math.ceil(history.length / itemsPerPage);

                let currentPage = 0;

                const generateEmbed = (page) => {
                    const embed = new EmbedBuilder()
                        .setColor(config.embedBlue)
                        .setTitle('üìú L·ªãch s·ª≠ n·∫°p <a:xu:1320563128848744548> (30 ng√†y g·∫ßn nh·∫•t)')
                        .setFooter({ 
                            text: `Ng∆∞·ªùi y√™u c·∫ßu: ${msg.author.displayName}                                                            ` +
                            `                                                       Trang ${page + 1}/${totalPages}`, 
                            iconURL: msg.author.displayAvatarURL() 
                        })
                        .setTimestamp();

                    const start = page * itemsPerPage;
                    const end = start + itemsPerPage;
                    const pageItems = history.slice(start, end);

                    pageItems.forEach(entry => {
                        embed.addFields({
                            name: `üî∏ ${entry.displayName} (ID: ${entry.UserId})`,
                            value: 
                                `**S·ªë <a:xu:1320563128848744548>:** ${entry.amount.toLocaleString('vi-VN')} <a:xu:1320563128848744548>\n` +
                                `**M√°y ch·ªß:** ${entry.GuildName} (ID: ${entry.GuildId})\n` +
                                `**Th·ªùi gian:** ${new Date(entry.date).toLocaleString('vi-VN')}`,
                            inline: false
                        });
                    });

                    return embed;
                };

                const row = new ActionRowBuilder()
                    .addComponents(
                        new ButtonBuilder()
                            .setCustomId('prev')
                            .setLabel('‚óÄÔ∏è')
                            .setStyle(ButtonStyle.Primary)
                            .setDisabled(true), // Trang ƒë·∫ßu ti√™n, n√∫t "Tr∆∞·ªõc" b·ªã v√¥ hi·ªáu h√≥a
                        new ButtonBuilder()
                            .setCustomId('next')
                            .setLabel('‚ñ∂Ô∏è')
                            .setStyle(ButtonStyle.Primary)
                            .setDisabled(totalPages === 1) // N·∫øu ch·ªâ c√≥ 1 trang, n√∫t "Sau" b·ªã v√¥ hi·ªáu h√≥a
                    );

                const message = await msg.channel.send({ embeds: [generateEmbed(currentPage)], components: [row] });

                const filter = (interaction) => {
                    return ['prev', 'next'].includes(interaction.customId) && interaction.user.id === msg.author.id;
                };

                const collector = message.createMessageComponentCollector({ filter, time: 60000 });

                collector.on('collect', async (interaction) => {
                    if (interaction.customId === 'prev') {
                        currentPage--;
                    } else if (interaction.customId === 'next') {
                        currentPage++;
                    }

                    // C·∫≠p nh·∫≠t tr·∫°ng th√°i c·ªßa c√°c n√∫t
                    row.components[0].setDisabled(currentPage === 0);
                    row.components[1].setDisabled(currentPage === totalPages - 1);

                    await interaction.update({ embeds: [generateEmbed(currentPage)], components: [row] });
                });

                collector.on('end', () => {
                    row.components.forEach(button => button.setDisabled(true));
                    message.edit({ components: [row] }).catch(() => {});
                });

                return;

            } catch (error) {
                console.error(error);
                return msg.channel.send('‚ùå ƒê√£ x·∫£y ra l·ªói khi l·∫•y l·ªãch s·ª≠.');
            }
        }

        // N·∫øu kh√¥ng ph·∫£i "list", "dsn", "recall" x·ª≠ l√Ω n·∫°p ti·ªÅn
        if (args.length < 3) {
            return msg.channel.send('‚ùå Vui l√≤ng nh·∫≠p ƒë√∫ng c√∫ ph√°p: `?recharge <ID ng∆∞·ªùi d√πng> <s·ªë ti·ªÅn> <ID m√°y ch·ªß>`.');
        }

        const userId = args[0];
        const amountString = args[1];
        const guildId = args[2];
        const amount = parseFloat(amountString.replace(/\./g, ''));

        if (isNaN(amount) || amount <= 0) {
            return msg.channel.send('‚ùå S·ªë <a:xu:1320563128848744548> n·∫°p kh√¥ng h·ª£p l·ªá! Vui l√≤ng nh·∫≠p s·ªë <a:xu:1320563128848744548> d∆∞∆°ng.');
        }

        try {
            // T√¨m t√†i kho·∫£n c·ªßa ng∆∞·ªùi d√πng m·ª•c ti√™u
            const targetData = await economySystem.findOne({ Guild: guildId, User: userId });
        
            if (!targetData) {
                return msg.channel.send(`‚ùå Ng∆∞·ªùi d√πng c√≥ ID **${userId}** trong m√°y ch·ªß **${guildId}** kh√¥ng c√≥ t√†i kho·∫£n economy.`);
            }
        
            // L·∫•y th√¥ng tin chi ti·∫øt c·ªßa m√°y ch·ªß t·ª´ d·ªØ li·ªáu c·ªßa t√†i kho·∫£n m·ª•c ti√™u
            const targetGuild = await msg.client.guilds.fetch(guildId).catch(() => null);
            const targetGuildName = targetGuild ? targetGuild.name : 'M√°y ch·ªß kh√¥ng x√°c ƒë·ªãnh';
        
            // C·ªông ti·ªÅn v√†o Bank
            targetData.Bank += amount;
            await targetData.save();
        
            // L∆∞u l·ªãch s·ª≠ v√†o MongoDB
            await lsntSchema.create({
                UserId: userId,
                GuildId: guildId,
                GuildName: targetGuildName, // T√™n m√°y ch·ªß ch√≠nh x√°c t·ª´ GuildId
                displayName: msg.guild.members.cache.get(userId)?.displayName || 'Unknown User',
                amount: amount,
                date: new Date()
            });
        
            // G·ª≠i th√¥ng b√°o th√†nh c√¥ng
            const embed = new EmbedBuilder()
                .setColor(config.embedGreen)
                .setTitle('üí≥ N·∫°p <a:xu:1320563128848744548> th√†nh c√¥ng')
                .setDescription(
                    `B·∫°n ƒë√£ n·∫°p **${amount.toLocaleString('vi-VN')} <a:xu:1320563128848744548>** ` +
                    `v√†o t√†i kho·∫£n c·ªßa ng∆∞·ªùi d√πng c√≥ ID **${userId}** trong m√°y ch·ªß **${targetGuildName}**.`
                )
                .setFooter({ text: `Ng∆∞·ªùi th·ª±c hi·ªán: ${msg.author.tag}`, iconURL: msg.author.displayAvatarURL() })
                .setTimestamp();
        
            return msg.channel.send({ embeds: [embed] });
        } catch (error) {
            console.error(error);
            return msg.channel.send('‚ùå ƒê√£ x·∫£y ra l·ªói khi th·ª±c hi·ªán l·ªánh.');
        }
    },
};























// const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
// const economySystem = require('../../schemas/economySystem');
// const CommandStatus = require('../../schemas/Command_Status');
// const lsntSchema = require('../../schemas/lsntSchema'); // Schema l∆∞u l·ªãch s·ª≠
// const config = require('../../config');

// module.exports = {
//     name: 'recharge',
//     description: 'N·∫°p ti·ªÅn v√†o t√†i kho·∫£n ng∆∞·ªùi ch∆°i ho·∫∑c xem l·ªãch s·ª≠ n·∫°p ti·ªÅn.',
//     aliases: ['re', 'dev66'],
//     async execute(msg, args) {
//         // Ki·ªÉm tra tr·∫°ng th√°i l·ªánh
//         const commandStatus = await CommandStatus.findOne({ command: '?recharge' });
//         if (commandStatus && commandStatus.status === 'off') {
//             return msg.channel.send('L·ªánh n√†y ƒë√£ b·ªã t·∫Øt, vui l√≤ng th·ª≠ l·∫°i sau.');
//         }

//         if (args[0] === 'recall') {
//             if (args.length < 4) {
//                 return msg.channel.send('‚ùå Vui l√≤ng nh·∫≠p ƒë√∫ng c√∫ ph√°p: `?recharge recall <ID ng∆∞·ªùi d√πng> <s·ªë ti·ªÅn> <ID m√°y ch·ªß>`.');
//             }

//             const userId = args[1];
//             const amountString = args[2];
//             const guildId = args[3];
//             const amount = parseFloat(amountString.replace(/\./g, ''));

//             if (isNaN(amount) || amount <= 0) {
//                 return msg.channel.send('‚ùå S·ªë ti·ªÅn thu h·ªìi kh√¥ng h·ª£p l·ªá! Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn d∆∞∆°ng.');
//             }

//             try {
//                 // T√¨m t√†i kho·∫£n ng∆∞·ªùi d√πng m·ª•c ti√™u
//                 const targetData = await economySystem.findOne({ Guild: guildId, User: userId });

//                 if (!targetData) {
//                     return msg.channel.send(`‚ùå Ng∆∞·ªùi d√πng c√≥ ID **${userId}** trong m√°y ch·ªß **${guildId}** kh√¥ng c√≥ t√†i kho·∫£n economy.`);
//                 }

//                 let remainingAmount = amount; // S·ªë ti·ªÅn c·∫ßn thu h·ªìi
//                 const bankBefore = targetData.Bank; // Ti·ªÅn tr∆∞·ªõc khi thu h·ªìi
//                 const walletBefore = targetData.Wallet; // Ti·ªÅn v√≠ tr∆∞·ªõc khi thu h·ªìi

//                 // Tr·ª´ ti·ªÅn t·ª´ Bank tr∆∞·ªõc
//                 if (targetData.Bank >= remainingAmount) {
//                     targetData.Bank -= remainingAmount;
//                     remainingAmount = 0;
//                 } else {
//                     remainingAmount -= targetData.Bank;
//                     targetData.Bank = 0;
//                 }

//                 // N·∫øu c√≤n d∆∞, tr·ª´ ti·∫øp t·ª´ Wallet
//                 if (remainingAmount > 0) {
//                     if (targetData.Wallet >= remainingAmount) {
//                         targetData.Wallet -= remainingAmount;
//                         remainingAmount = 0;
//                     } else {
//                         remainingAmount -= targetData.Wallet;
//                         targetData.Wallet = 0;
//                     }
//                 }

//                 // N·∫øu kh√¥ng ƒë·ªß, ghi ch√∫ n·ª£
//                 if (remainingAmount > 0) {
//                     targetData.Debt += remainingAmount;
//                 }

//                 await targetData.save();

//                 // T·∫°o th√¥ng b√°o
//                 const embed = new EmbedBuilder()
//                     .setColor(remainingAmount > 0 ? config.embedRed : config.embedGreen)
//                     .setTitle('üí≥ Thu h·ªìi ti·ªÅn')
//                     .setDescription(`ƒê√£ thu h·ªìi **${amount.toLocaleString('vi-VN')} vnd** t·ª´ ng∆∞·ªùi d√πng c√≥ ID **${userId}** trong m√°y ch·ªß **${guildId}**.`)
//                     .addFields(
//                         { name: 'üí∞ Bank tr∆∞·ªõc', value: `${bankBefore.toLocaleString('vi-VN')} vnd`, inline: true },
//                         { name: 'üíµ Wallet tr∆∞·ªõc', value: `${walletBefore.toLocaleString('vi-VN')} vnd`, inline: true },
//                         { name: 'üîª Bank hi·ªán t·∫°i', value: `${targetData.Bank.toLocaleString('vi-VN')} vnd`, inline: true },
//                         { name: 'üîª Wallet hi·ªán t·∫°i', value: `${targetData.Wallet.toLocaleString('vi-VN')} vnd`, inline: true }
//                     );

//                 if (remainingAmount > 0) {
//                     embed.addFields({ name: '‚ö†Ô∏è Ghi ch√∫ n·ª£', value: `Ng∆∞·ªùi d√πng n√†y c√≤n n·ª£ **${remainingAmount.toLocaleString('vi-VN')} vnd**.` });
//                 }

//                 return msg.channel.send({ embeds: [embed] });
//             } catch (error) {
//                 console.error(error);
//                 return msg.channel.send('‚ùå ƒê√£ x·∫£y ra l·ªói khi thu h·ªìi ti·ªÅn.');
//             }
//         }

//         if (args[0] === 'baddebt') {
//             try {
//                 const debts = await economySystem.find({ Debt: { $gt: 0 } });

//                 if (!debts.length) {
//                     return msg.channel.send('‚úÖ Kh√¥ng c√≥ ng∆∞·ªùi d√πng n√†o c√≤n n·ª£.');
//                 }

//                 const embed = new EmbedBuilder()
//                     .setColor(config.embedBlue)
//                     .setTitle('üìú Danh s√°ch n·ª£')
//                     .setDescription(debts.map(debt => 
//                         `üî∏ **ID ng∆∞·ªùi d√πng:** ${debt.User}\n**M√°y ch·ªß:** ${debt.Guild}\n**C√≤n n·ª£:** ${debt.Debt.toLocaleString('vi-VN')} vnd\n`
//                     ).join('\n'))
//                     .setFooter({ text: `Ng∆∞·ªùi y√™u c·∫ßu: ${msg.author.tag}`, iconURL: msg.author.displayAvatarURL() })
//                     .setTimestamp();

//                 return msg.channel.send({ embeds: [embed] });
//             } catch (error) {
//                 console.error(error);
//                 return msg.channel.send('‚ùå ƒê√£ x·∫£y ra l·ªói khi ki·ªÉm tra danh s√°ch n·ª£.');
//             }
//         }

//         // Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng mu·ªën xem l·ªãch s·ª≠
//         if (args[0] === 'list') {
//             try {
//                 // L·∫•y danh s√°ch l·ªãch s·ª≠ trong 30 ng√†y g·∫ßn nh·∫•t
//                 const thirtyDaysAgo = new Date();
//                 thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);

//                 const history = await lsntSchema.find({ date: { $gte: thirtyDaysAgo } }).sort({ date: -1 });

//                 if (!history.length) {
//                     return msg.channel.send('‚ùå Kh√¥ng c√≥ l·ªãch s·ª≠ n·∫°p ti·ªÅn n√†o trong 30 ng√†y qua.');
//                 }

//                 // Chia danh s√°ch th√†nh c√°c trang (m·ªói trang t·ªëi ƒëa 15 m·ª•c)
//                 const itemsPerPage = 15;
//                 const totalPages = Math.ceil(history.length / itemsPerPage);

//                 let currentPage = 0;

//                 const generateEmbed = (page) => {
//                     const embed = new EmbedBuilder()
//                         .setColor(config.embedBlue)
//                         .setTitle('üìú L·ªãch s·ª≠ n·∫°p ti·ªÅn (30 ng√†y g·∫ßn nh·∫•t)')
//                         .setFooter({ text: `Trang ${page + 1}/${totalPages} | Ng∆∞·ªùi y√™u c·∫ßu: ${msg.author.tag}`, iconURL: msg.author.displayAvatarURL() })
//                         .setTimestamp();

//                     const start = page * itemsPerPage;
//                     const end = start + itemsPerPage;
//                     const pageItems = history.slice(start, end);

//                     pageItems.forEach(entry => {
//                         embed.addFields({
//                             name: `üî∏ ${entry.displayName} (ID: ${entry.UserId})`,
//                             value: `**S·ªë ti·ªÅn:** ${entry.amount.toLocaleString('vi-VN')} vnd\n**M√°y ch·ªß:** ${entry.GuildName} (ID: ${entry.GuildId})\n**Th·ªùi gian:** ${new Date(entry.date).toLocaleString('vi-VN')}`,
//                             inline: false
//                         });
//                     });

//                     return embed;
//                 };

//                 const row = new ActionRowBuilder()
//                     .addComponents(
//                         new ButtonBuilder()
//                             .setCustomId('prev')
//                             .setLabel('‚óÄÔ∏è')
//                             .setStyle(ButtonStyle.Primary)
//                             .setDisabled(true), // Trang ƒë·∫ßu ti√™n, n√∫t "Tr∆∞·ªõc" b·ªã v√¥ hi·ªáu h√≥a
//                         new ButtonBuilder()
//                             .setCustomId('next')
//                             .setLabel('‚ñ∂Ô∏è')
//                             .setStyle(ButtonStyle.Primary)
//                             .setDisabled(totalPages === 1) // N·∫øu ch·ªâ c√≥ 1 trang, n√∫t "Sau" b·ªã v√¥ hi·ªáu h√≥a
//                     );

//                 const message = await msg.channel.send({ embeds: [generateEmbed(currentPage)], components: [row] });

//                 const filter = (interaction) => {
//                     return ['prev', 'next'].includes(interaction.customId) && interaction.user.id === msg.author.id;
//                 };

//                 const collector = message.createMessageComponentCollector({ filter, time: 60000 });

//                 collector.on('collect', async (interaction) => {
//                     if (interaction.customId === 'prev') {
//                         currentPage--;
//                     } else if (interaction.customId === 'next') {
//                         currentPage++;
//                     }

//                     // C·∫≠p nh·∫≠t tr·∫°ng th√°i c·ªßa c√°c n√∫t
//                     row.components[0].setDisabled(currentPage === 0);
//                     row.components[1].setDisabled(currentPage === totalPages - 1);

//                     await interaction.update({ embeds: [generateEmbed(currentPage)], components: [row] });
//                 });

//                 collector.on('end', () => {
//                     row.components.forEach(button => button.setDisabled(true));
//                     message.edit({ components: [row] }).catch(() => {});
//                 });

//                 return;

//             } catch (error) {
//                 console.error(error);
//                 return msg.channel.send('‚ùå ƒê√£ x·∫£y ra l·ªói khi l·∫•y l·ªãch s·ª≠.');
//             }
//         }

//         // N·∫øu kh√¥ng ph·∫£i "list", x·ª≠ l√Ω n·∫°p ti·ªÅn
//         if (args.length < 3) {
//             return msg.channel.send('‚ùå Vui l√≤ng nh·∫≠p ƒë√∫ng c√∫ ph√°p: `?recharge <ID ng∆∞·ªùi d√πng> <s·ªë ti·ªÅn> <ID m√°y ch·ªß>`.');
//         }

//         const userId = args[0];
//         const amountString = args[1];
//         const guildId = args[2];
//         const amount = parseFloat(amountString.replace(/\./g, ''));

//         if (isNaN(amount) || amount <= 0) {
//             return msg.channel.send('‚ùå S·ªë ti·ªÅn n·∫°p kh√¥ng h·ª£p l·ªá! Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn d∆∞∆°ng.');
//         }

//         try {
//             // T√¨m t√†i kho·∫£n c·ªßa ng∆∞·ªùi d√πng m·ª•c ti√™u
//             const targetData = await economySystem.findOne({ Guild: guildId, User: userId });
        
//             if (!targetData) {
//                 return msg.channel.send(`‚ùå Ng∆∞·ªùi d√πng c√≥ ID **${userId}** trong m√°y ch·ªß **${guildId}** kh√¥ng c√≥ t√†i kho·∫£n economy.`);
//             }
        
//             // L·∫•y th√¥ng tin chi ti·∫øt c·ªßa m√°y ch·ªß t·ª´ d·ªØ li·ªáu c·ªßa t√†i kho·∫£n m·ª•c ti√™u
//             const targetGuild = await msg.client.guilds.fetch(guildId).catch(() => null);
//             const targetGuildName = targetGuild ? targetGuild.name : 'M√°y ch·ªß kh√¥ng x√°c ƒë·ªãnh';
        
//             // C·ªông ti·ªÅn v√†o Bank
//             targetData.Bank += amount;
//             await targetData.save();
        
//             // L∆∞u l·ªãch s·ª≠ v√†o MongoDB
//             await lsntSchema.create({
//                 UserId: userId,
//                 GuildId: guildId,
//                 GuildName: targetGuildName, // T√™n m√°y ch·ªß ch√≠nh x√°c t·ª´ GuildId
//                 displayName: msg.guild.members.cache.get(userId)?.displayName || 'Unknown User',
//                 amount: amount,
//                 date: new Date()
//             });
        
//             // G·ª≠i th√¥ng b√°o th√†nh c√¥ng
//             const embed = new EmbedBuilder()
//                 .setColor(config.embedGreen)
//                 .setTitle('üí≥ N·∫°p ti·ªÅn th√†nh c√¥ng')
//                 .setDescription(`B·∫°n ƒë√£ n·∫°p **${amount.toLocaleString('vi-VN')} vnd** v√†o t√†i kho·∫£n c·ªßa ng∆∞·ªùi d√πng c√≥ ID **${userId}** trong m√°y ch·ªß **${targetGuildName}**.`)
//                 .setFooter({ text: `Ng∆∞·ªùi th·ª±c hi·ªán: ${msg.author.tag}`, iconURL: msg.author.displayAvatarURL() })
//                 .setTimestamp();
        
//             return msg.channel.send({ embeds: [embed] });
//         } catch (error) {
//             console.error(error);
//             return msg.channel.send('‚ùå ƒê√£ x·∫£y ra l·ªói khi th·ª±c hi·ªán l·ªánh.');
//         }
//     },
// };
