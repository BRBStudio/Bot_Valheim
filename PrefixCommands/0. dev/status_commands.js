const { EmbedBuilder } = require('discord.js');
const CommandStatus = require('../../schemas/Command_Status');
const EventStatus = require('../../schemas/Event_Status');
const config = require('../../config');

module.exports = {
    name: 'status_management',
    description: '\`üî∏ L·ªÜNH D√ÄNH CHO DEV\`', // - Qu·∫£n l√Ω b·∫≠t/t·∫Øt l·ªánh v√† s·ª± ki·ªán
    hd: `\`üî∏ C√°ch d√πng: Kh√¥ng c√≥ th√¥ng tin\``,
    q: `\`üî∏ D√†nh cho DEV\``,
    aliases: ['cm', 'ev', 'on', 'off', 'dev5'], 

/*
?on commands <t√™n_l·ªánh> <on|off>
?on events <t√™n_s·ª±_ki·ªán> <on|off>
*/    

    async execute(msg, args) {
        if (!config.specialUsers.includes(msg.author.id)) { 
            return msg.channel.send("L·ªánh n√†y d√†nh cho DEV. B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y!"); 
        }

        const type = args[0]; // "commands" ho·∫∑c "events"
        const target = args[1]; // t√™n l·ªánh ho·∫∑c t√™n s·ª± ki·ªán, ho·∫∑c "all"
        const action = args[2]; // "on" ho·∫∑c "off"

        if (type === 'h') {
                
            const helpEmbed = new EmbedBuilder()
                .setColor('Green')
                .setTitle('H∆∞·ªõng D·∫´n S·ª≠ D·ª•ng L·ªánh Qu·∫£n L√Ω Tr·∫°ng Th√°i')
                .setDescription('D∆∞·ªõi ƒë√¢y l√† h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng c√°c l·ªánh qu·∫£n l√Ω tr·∫°ng th√°i:')
                .addFields(
                    { name: 'B·∫≠t ho·∫∑c t·∫Øt m·ªôt l·ªánh c·ª• th·ªÉ.', value: '\`\`\`?status_management commands <t√™n_l·ªánh> <on|off>\`\`\`' },
                    { name: 'B·∫≠t t·∫•t c·∫£ c√°c l·ªánh ƒëang t·∫Øt.', value: '\`\`\`?cm commands all <on|off>\`\`\`' },
                    { name: 'Xem h∆∞·ªõng d·∫´n & ƒë·ªãnh d·∫°ng.', value: '\`\`\`?cm h\`\`\`' },
                    { name: 'B·∫≠t ho·∫∑c t·∫Øt m·ªôt s·ª± ki·ªán c·ª• th·ªÉ.', value: '\`\`\`?on events <t√™n_s·ª±_ki·ªán> <on|off>\`\`\`' },
                )
                .setFooter({ text: 'L·ªánh n√†y ch·ªâ d√†nh cho DEV.' });

            return msg.channel.send({ embeds: [helpEmbed] });

        }

        if (!type || !target || (action && action !== 'on' && action !== 'off')) {
            return msg.channel.send(
                'Vui l√≤ng s·ª≠ d·ª•ng ƒë·ªãnh d·∫°ng: ?status_management <commands|events> <t√™n_l·ªánh|t√™n_s·ª±_ki·ªán|all> <on|off>'
            );
        }

        // Qu·∫£n l√Ω tr·∫°ng th√°i l·ªánh
        if (type === 'commands') {
            // N·∫øu mu·ªën b·∫≠t l·∫°i t·∫•t c·∫£ c√°c l·ªánh ƒëang t·∫Øt
            if (target === 'all' && action === 'on') {
                const disabledCommands = await CommandStatus.find({ status: 'off' });
                
                if (disabledCommands.length === 0) {
                    return msg.channel.send("Kh√¥ng c√≥ l·ªánh n√†o ƒëang t·∫Øt.");
                }

                for (const cmd of disabledCommands) {
                    cmd.status = 'on';
                    await cmd.save();
                }

                return msg.channel.send("T·∫•t c·∫£ c√°c l·ªánh ƒëang t·∫Øt ƒë√£ ƒë∆∞·ª£c b·∫≠t l·∫°i.");
            }

            // Qu·∫£n l√Ω tr·∫°ng th√°i l·ªánh theo t√™n l·ªánh c·ª• th·ªÉ
            const existingCommandStatus = await CommandStatus.findOne({ command: target });

            if (action === 'on') {
                if (existingCommandStatus) {
                    existingCommandStatus.status = 'on';
                    await existingCommandStatus.save();
                    return msg.channel.send(`L·ªánh ${target} ƒë√£ ƒë∆∞·ª£c b·∫≠t.`);
                } else {
                    await CommandStatus.create({ command: target, status: 'on' });
                    return msg.channel.send(`L·ªánh ${target} ƒë√£ ƒë∆∞·ª£c t·∫°o v√† b·∫≠t.`);
                }
            } else if (action === 'off') {
                if (existingCommandStatus) {
                    existingCommandStatus.status = 'off';
                    await existingCommandStatus.save();
                    return msg.channel.send(`L·ªánh ${target} ƒë√£ ƒë∆∞·ª£c t·∫Øt.`);
                } else {
                    await CommandStatus.create({ command: target, status: 'off' });
                    return msg.channel.send(`L·ªánh ${target} ƒë√£ ƒë∆∞·ª£c t·∫°o v√† t·∫Øt.`);
                }
            }
        }

        // Qu·∫£n l√Ω tr·∫°ng th√°i s·ª± ki·ªán
        if (type === 'events') {
            const existingEventStatus = await EventStatus.findOne({ event: target });

            if (action === 'on') {
                if (existingEventStatus) {
                    existingEventStatus.status = 'on';
                    await existingEventStatus.save();
                    return msg.channel.send(`S·ª± ki·ªán ${target} ƒë√£ ƒë∆∞·ª£c b·∫≠t.`);
                } else {
                    await EventStatus.create({ event: target, status: 'on' });
                    return msg.channel.send(`S·ª± ki·ªán ${target} ƒë√£ ƒë∆∞·ª£c t·∫°o v√† b·∫≠t.`);
                }
            } else if (action === 'off') {
                if (existingEventStatus) {
                    existingEventStatus.status = 'off';
                    await existingEventStatus.save();
                    return msg.channel.send(`S·ª± ki·ªán ${target} ƒë√£ ƒë∆∞·ª£c t·∫Øt.`);
                } else {
                    await EventStatus.create({ event: target, status: 'off' });
                    return msg.channel.send(`S·ª± ki·ªán ${target} ƒë√£ ƒë∆∞·ª£c t·∫°o v√† t·∫Øt.`);
                }
            }
        }
    },
};
