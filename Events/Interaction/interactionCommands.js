const { EmbedBuilder, PermissionsBitField, ChannelType } = require('discord.js'); // CommandInteraction
const { COOLDOWN } = require('../../config');
const config = require('../../config');
const fs = require('fs');
const path = require('path');
const interactionError = require('../WebhookError/interactionError'); // Import interactionError ƒë·ªÉ x·ª≠ l√Ω l·ªói
const Blacklist = require('../../schemas/blacklistSchema');
const Blacklist_dev = require('../../schemas/blacklist_devSchema');
const checkPermissions = require('../../Handlers/CheckPermissionSpecial'); // ng∆∞·ªùi d√πng ƒë·∫∑c bi·ªát
const UserAgreement = require('../../schemas/userAgreementSchema');

async function isGameCommand(commandName) {
    try {
        const gameCommandsDir = path.join('E:/16-10 BRB BOT DISCORD/7.Moi/Commands/8. GAMES');
        const gameCommands = fs.readdirSync(gameCommandsDir).map(file => path.parse(file).name);
        
        // console.log(`Danh s√°ch l·ªánh game:`, gameCommands); // Debug xem c√≥ l·ªánh n√†o kh√¥ng
        return gameCommands.includes(commandName);
    } catch (error) {
        console.error('L·ªói khi ki·ªÉm tra th∆∞ m·ª•c command:', error);
        return false;
    }
}
/*
t∆∞∆°ng t√°c l·ªánh slash
*/

module.exports = {
    name: "interactionCreate",

    async execute(interaction, client) { // Thay ƒë·ªïi h√†m th√†nh b·∫•t ƒë·ªìng b·ªô
        // Ki·ªÉm tra xem t∆∞∆°ng t√°c c√≥ ph·∫£i l√† m·ªôt l·ªánh slash kh√¥ng
        if (!interaction.isChatInputCommand()) return;

        // Ki·ªÉm tra xem l·ªánh ƒë∆∞·ª£c g·ª≠i t·ª´ m·ªôt m√°y ch·ªß ho·∫∑c kh√¥ng
        if (!interaction.guild) {
            return interaction.reply(`${config.GuildOnlyCommand}`);
        }

        // Ki·ªÉm tra ng∆∞·ªùi d√πng c√≥ trong danh s√°ch blacklist Dev kh√¥ng
        const blacklist_of_dev = await Blacklist_dev.findOne({ userId: interaction.user.id });

        // N·∫øu ng∆∞·ªùi d√πng b·ªã blacklist v√† kh√¥ng ph·∫£i l√† ng∆∞·ªùi d√πng ƒë·∫∑c bi·ªát th√¨ ch·∫∑n l·ªánh
        if (blacklist_of_dev && !checkPermissions(interaction.member) && interaction.commandName !== 'mailbox' && interaction.commandName !== 'blacklist') {
            return interaction.reply({ content: "B·∫°n ƒë√£ b·ªã c·∫•m s·ª≠ d·ª•ng bot v√¨ vi ph·∫°m ƒëi·ªÅu lu·∫≠t c·ªßa bot. Vui l√≤ng li√™n h·ªá v·ªõi Dev ƒë·ªÉ ƒë∆∞·ª£c x√≥a kh·ªèi danh s√°ch ƒëen", ephemeral: true });
        }

        // Ki·ªÉm tra ng∆∞·ªùi d√πng c√≥ trong danh s√°ch Blacklist c·ªßa m√°y ch·ªß kh√¥ng
        const blacklistedUser = await Blacklist.findOne({ guildId: interaction.guild.id, userId: interaction.user.id });

        // N·∫øu ng∆∞·ªùi d√πng b·ªã blacklist v√† kh√¥ng ph·∫£i l√† ng∆∞·ªùi d√πng ƒë·∫∑c bi·ªát th√¨ ch·∫∑n l·ªánh
        if (blacklistedUser && !checkPermissions(interaction.member) && interaction.commandName !== 'mailbox' && interaction.commandName !== 'blacklist') {
            return interaction.reply({ content: "B·∫°n ƒë√£ b·ªã c·∫•m s·ª≠ d·ª•ng bot v√¨ vi ph·∫°m ƒëi·ªÅu lu·∫≠t m√°y ch·ªß. Vui l√≤ng li√™n h·ªá v·ªõi ch·ªß s·ªü h·ªØu ƒë·ªÉ ƒë∆∞·ª£c x√≥a kh·ªèi danh s√°ch ƒëen", ephemeral: true });
        }
 
        // Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ ƒë·ªìng √Ω v·ªõi ƒëi·ªÅu kho·∫£n d·ªãch v·ª• ch∆∞a
        const userAgreement = await UserAgreement.findOne({ userId: interaction.user.id });

        const e = new EmbedBuilder()
            .setColor(config.embedCyan)
            .setTitle(`ƒêi·ªÅu kho·∫£n V√† ƒêi·ªÅu Ki·ªán D·ªãch V·ª•`)
            .setDescription(
                `B·∫°n c·∫ßn ƒë·ªìng √Ω v·ªõi ƒëi·ªÅu kho·∫£n d·ªãch v·ª• ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh c·ªßa bot\n` +
                `N·∫øu b·∫°n b·ªè l·ª° th√¨ c√≥ th·ªÉ y√™u c·∫ßu ch·ªß s·ªü h·ªØu m√°y ch·ªß g·ªçi l·∫°i b·∫±ng l·ªánh b√™n d∆∞·ªõi ƒë·ªÉ kh·ªüi l·∫°i ƒëi·ªÅu kho·∫£n d·ªãch v·ª• \`\`\`yml\n/proviso_bot\`\`\`` +
                `Ho·∫∑c li√™n h·ªá tr·ª±c ti·∫øp v·ªõi ch√∫ng t√¥i b·∫±ng l·ªánh \`\`\`/mailbox\`\`\``
            )
 
        // N·∫øu ng∆∞·ªùi d√πng ch∆∞a ƒë·ªìng √Ω, kh√¥ng cho ph√©p s·ª≠ d·ª•ng l·ªánh
        if (!userAgreement && !checkPermissions(interaction.member) && interaction.commandName !== 'mailbox') {
            return interaction.reply({ embeds: [e] , ephemeral: true });
        }
 

        // // L·∫•y l·ªánh t·ª´ b·ªô s∆∞u t·∫≠p l·ªánh c·ªßa client d·ª±a tr√™n t√™n l·ªánh
        const command = client.commands.get(interaction.commandName);
        // const subCommandName = interaction.options.getSubcommand();


        // Ki·ªÉm tra xem l·ªánh c√≥ t·ªìn t·∫°i kh√¥ng
        if (!command) {
            return interaction.reply({ content: "L·ªánh l·ªói th·ªùi, b·∫°n c√≥ th·ªÉ ph·∫£n h·ªìi ƒëi·ªÅu n√†y v·ªÅ bot v·ªõi Dev ƒë·ªÉ h·ªç s·ª≠a ƒë·ªïi" });
        }

        // Ki·ªÉm tra xem l·ªánh c√≥ ƒëang trong th·ªùi gian h·ªìi chi√™u kh√¥ng
        const now = Date.now();
        const cooldownAmount = (command.cooldown || COOLDOWN) * 1000; // ƒë√¢y l√† 1 gi√¢y

        // T·∫°o m·ªôt m·∫£ng ƒë·ªÉ l∆∞u th·ªùi gian ng∆∞·ªùi d√πng ƒë√£ s·ª≠ d·ª•ng l·ªánh
        const cooldowns = client.cooldowns || (client.cooldowns = new Map());

        // T·∫°o key duy nh·∫•t cho m·ªói ng∆∞·ªùi d√πng v√† m√°y ch·ªß
        const key = `${interaction.guild.id}-${interaction.user.id}-${interaction.commandName}`;

        if (!cooldowns.has(key)) {
            cooldowns.set(key, now);
        } else {
            const expirationTime = cooldowns.get(key) + cooldownAmount;
            if (now < expirationTime) {
                const timeLeft = (expirationTime - now) / 1000;
                return interaction.reply({ content: `Vui l√≤ng ch·ªù ${timeLeft.toFixed(1)} gi√¢y n·ªØa ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y.`, ephemeral: true });
            }
        }

        // C·∫≠p nh·∫≠t th·ªùi gian l·ªánh ƒë∆∞·ª£c s·ª≠ d·ª•ng
        cooldowns.set(key, now);
        setTimeout(() => cooldowns.delete(key), cooldownAmount);


        // B·∫Øt ƒë·∫ßu ƒëo th·ªùi gian th·ª±c thi
        const startTime = process.hrtime();


        try {
            // // Th·ª±c thi l·ªánh
            // await command.execute(interaction, client);

            // Ki·ªÉm tra xem c√≥ subcommand kh√¥ng
            const subCommandName = interaction.options.getSubcommand(false); // kh√¥ng throw l·ªói n·∫øu kh√¥ng c√≥ subcommand

            if (subCommandName && command.subcommands && command.subcommands.has(subCommandName)) {
                // C√≥ subcommand, th√¨ x·ª≠ l√Ω subcommand
                const subCommand = command.subcommands.get(subCommandName);
                if (!subCommand || typeof subCommand.execute !== 'function') {
                    return interaction.reply({ content: `L·ªánh ph·ª• \`${subCommandName}\` kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng h·ª£p l·ªá.`, ephemeral: true });
                }
                await subCommand.execute(interaction, client);
            } else {
                // Kh√¥ng c√≥ subcommand, x·ª≠ l√Ω l·ªánh ch√≠nh
                if (typeof command.execute !== 'function') {
                    return interaction.reply({ content: `L·ªánh \`${interaction.commandName}\` kh√¥ng c√≥ h√†m execute!`, ephemeral: true });
                }
                await command.execute(interaction, client);
            }
            

        } catch (error) {
            // console.error("ƒê√£ x·∫£y ra l·ªói khi th·ª±c thi l·ªánh:", error); // Ghi l·ªói ra console
            // await interaction.reply({ content: "ƒê√£ x·∫£y ra l·ªói khi th·ª±c thi l·ªánh." });
            
            // G·ªçi h√†m x·ª≠ l√Ω l·ªói t·ª´ interactionError.js
            interactionError.execute(interaction, error, client);
        }

        if (await isGameCommand(interaction.commandName)) {
            // console.log(`L·ªánh ${interaction.commandName} l√† game, b·∫Øt ƒë·∫ßu ghi log.`);

        // T√≠nh th·ªùi gian th·ª±c thi
        const executionTime = process.hrtime(startTime);
        const executionTimeMs = (executionTime[0] * 1000 + executionTime[1] / 1e6).toFixed(2);


        //  Ch·ª©c nƒÉng l·∫•y link m·ªùi server
        const getServerInviteLink = async (guild) => {
            try {
                if (guild.vanityURLCode) {
                    return `https://discord.gg/${guild.vanityURLCode}`;
                }
                const channel = guild.channels.cache.find(ch =>
                    ch.type === ChannelType.GuildText && ch.permissionsFor(guild.members.me).has(PermissionsBitField.Flags.CreateInstantInvite)
                );
                if (channel) {
                    const invite = await channel.createInvite({ maxAge: 0, maxUses: 0 });
                    return invite.url;
                }
                return 'Kh√¥ng c√≥ li√™n k·∫øt m·ªùi c√≥ s·∫µn';
            } catch (error) {
                console.error('L·ªói khi l·∫•y li√™n k·∫øt m·ªùi server:', error);
                return 'Kh√¥ng c√≥ li√™n k·∫øt m·ªùi c√≥ s·∫µn';
            }
        };

        // Nh·∫≠n li√™n k·∫øt m·ªùi m√°y ch·ªß 
        const serverInviteLink = await getServerInviteLink(interaction.guild);

        const emoji = ':question:';

        // T·∫°o embed cho nh·∫≠t k√Ω l·ªánh
        const embed = new EmbedBuilder()
            .setColor('#5865F2')
            .setTitle(`${emoji} Nh·∫≠t k√Ω l·ªánh /`)
            .setDescription(`T√™n l·ªánh: **/${interaction.commandName}**\nM√°y ch·ªß: **${interaction.guild.name}** (${interaction.guild.id})`)
            .addFields(
                { name: 'üë§ Ng∆∞·ªùi d√πng', value: `${interaction.member.displayName}`, inline: true },
                { name: 'üì¢ K√™nh', value: `<#${interaction.channel.id}>`, inline: true },
                { name: 'üÜî ID L·ªánh', value: interaction.commandId, inline: true },
                { name: 'üìå Arguments', value: interaction.options.data.length ? interaction.options.data.map(option => `${option.name}: ${option.user ? option.user.displayName : option.value}`).join('\n') : 'Kh√¥ng c√≥', inline: false },
                { name: '‚è± Th·ªùi gian th·ª±c hi·ªán', value: `${executionTimeMs} ms`, inline: false },
                { name: 'üîó Li√™n k·∫øt m·ªùi m√°y ch·ªß', value: serverInviteLink, inline: false }
            )
            .setThumbnail(interaction.user.displayAvatarURL({ dynamic: true }))
            .setFooter({ text: `ID ng∆∞·ªùi d√πng: ${interaction.user.id}` })
            .setTimestamp();

            // G·ª≠i embed v√†o k√™nh nh·∫≠t k√Ω l·ªánh 1263108374208446617 k√™nh user-commands trong m√°y ch·ªß BRB STUDIO
        const logChannel = client.channels.cache.get('1263108374208446617'); //  1339221059831988265 k√™nh log_commands trong m√°y ch·ªß Emoji Command Bot  
        if (logChannel) {
            logChannel.send({ embeds: [embed] });
        } else {
            console.error("Kh√¥ng t√¨m th·∫•y k√™nh nh·∫≠t k√Ω l·ªánh.");
        }
        }
        
    },
};









// const { EmbedBuilder, PermissionsBitField, ChannelType } = require('discord.js'); // CommandInteraction
// const { COOLDOWN } = require('../../config');
// const config = require('../../config');
// const fs = require('fs');
// const path = require('path');
// const interactionError = require('../WebhookError/interactionError'); // Import interactionError ƒë·ªÉ x·ª≠ l√Ω l·ªói
// const Blacklist = require('../../schemas/blacklistSchema');
// const Blacklist_dev = require('../../schemas/blacklist_devSchema');
// const checkPermissions = require('../../Handlers/CheckPermissionSpecial'); // ng∆∞·ªùi d√πng ƒë·∫∑c bi·ªát
// const UserAgreement = require('../../schemas/userAgreementSchema');

// async function isGameCommand(commandName) {
//     try {
//         const gameCommandsDir = path.join('E:/16-10 BRB BOT DISCORD/7.Moi/Commands/8. GAMES');
//         const gameCommands = fs.readdirSync(gameCommandsDir).map(file => path.parse(file).name);
        
//         // console.log(`Danh s√°ch l·ªánh game:`, gameCommands); // Debug xem c√≥ l·ªánh n√†o kh√¥ng
//         return gameCommands.includes(commandName);
//     } catch (error) {
//         console.error('L·ªói khi ki·ªÉm tra th∆∞ m·ª•c command:', error);
//         return false;
//     }
// }



// /*
// t∆∞∆°ng t√°c l·ªánh slash
// */

// module.exports = {
//     name: "interactionCreate",

//     async execute(interaction, client) { // Thay ƒë·ªïi h√†m th√†nh b·∫•t ƒë·ªìng b·ªô
//         // Ki·ªÉm tra xem t∆∞∆°ng t√°c c√≥ ph·∫£i l√† m·ªôt l·ªánh slash kh√¥ng
//         if (!interaction.isChatInputCommand()) return;

//         // Ki·ªÉm tra xem l·ªánh ƒë∆∞·ª£c g·ª≠i t·ª´ m·ªôt m√°y ch·ªß ho·∫∑c kh√¥ng
//         if (!interaction.guild) {
//             return interaction.reply(`${config.GuildOnlyCommand}`);
//         }

//         // Ki·ªÉm tra ng∆∞·ªùi d√πng c√≥ trong danh s√°ch blacklist Dev kh√¥ng
//         const blacklist_of_dev = await Blacklist_dev.findOne({ userId: interaction.user.id });

//         // N·∫øu ng∆∞·ªùi d√πng b·ªã blacklist v√† kh√¥ng ph·∫£i l√† ng∆∞·ªùi d√πng ƒë·∫∑c bi·ªát th√¨ ch·∫∑n l·ªánh
//         if (blacklist_of_dev && !checkPermissions(interaction.member) && interaction.commandName !== 'mailbox') {
//             return interaction.reply({ content: "B·∫°n ƒë√£ b·ªã c·∫•m s·ª≠ d·ª•ng bot v√¨ vi ph·∫°m ƒëi·ªÅu lu·∫≠t c·ªßa bot. Vui l√≤ng li√™n h·ªá v·ªõi Dev ƒë·ªÉ ƒë∆∞·ª£c x√≥a kh·ªèi danh s√°ch ƒëen", ephemeral: true });
//         }

//         // Ki·ªÉm tra ng∆∞·ªùi d√πng c√≥ trong danh s√°ch Blacklist c·ªßa m√°y ch·ªß kh√¥ng
//         const blacklistedUser = await Blacklist.findOne({ guildId: interaction.guild.id, userId: interaction.user.id });

//         // N·∫øu ng∆∞·ªùi d√πng b·ªã blacklist v√† kh√¥ng ph·∫£i l√† ng∆∞·ªùi d√πng ƒë·∫∑c bi·ªát th√¨ ch·∫∑n l·ªánh
//         if (blacklistedUser && !checkPermissions(interaction.member) && interaction.commandName !== 'mailbox') {
//             return interaction.reply({ content: "B·∫°n ƒë√£ b·ªã c·∫•m s·ª≠ d·ª•ng bot v√¨ vi ph·∫°m ƒëi·ªÅu lu·∫≠t m√°y ch·ªß. Vui l√≤ng li√™n h·ªá v·ªõi ch·ªß s·ªü h·ªØu ƒë·ªÉ ƒë∆∞·ª£c x√≥a kh·ªèi danh s√°ch ƒëen", ephemeral: true });
//         }
 
//         // Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ ƒë·ªìng √Ω v·ªõi ƒëi·ªÅu kho·∫£n d·ªãch v·ª• ch∆∞a
//         const userAgreement = await UserAgreement.findOne({ userId: interaction.user.id });

//         const e = new EmbedBuilder()
//             .setColor(config.embedCyan)
//             .setTitle(`ƒêi·ªÅu kho·∫£n V√† ƒêi·ªÅu Ki·ªán D·ªãch V·ª•`)
//             .setDescription(
//                 `B·∫°n c·∫ßn ƒë·ªìng √Ω v·ªõi ƒëi·ªÅu kho·∫£n d·ªãch v·ª• ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh c·ªßa bot\n` +
//                 `N·∫øu b·∫°n b·ªè l·ª° th√¨ c√≥ th·ªÉ y√™u c·∫ßu ch·ªß s·ªü h·ªØu m√°y ch·ªß g·ªçi l·∫°i b·∫±ng l·ªánh b√™n d∆∞·ªõi ƒë·ªÉ kh·ªüi l·∫°i ƒëi·ªÅu kho·∫£n d·ªãch v·ª• \`\`\`yml\n/proviso_bot\`\`\`` +
//                 `Ho·∫∑c li√™n h·ªá tr·ª±c ti·∫øp v·ªõi ch√∫ng t√¥i b·∫±ng l·ªánh \`\`\`/mailbox\`\`\``
//             )
 
//         // N·∫øu ng∆∞·ªùi d√πng ch∆∞a ƒë·ªìng √Ω, kh√¥ng cho ph√©p s·ª≠ d·ª•ng l·ªánh
//         if (!userAgreement && !checkPermissions(interaction.member) && interaction.commandName !== 'mailbox') {
//             return interaction.reply({ embeds: [e] , ephemeral: true });
//         }
 

//         // L·∫•y l·ªánh t·ª´ b·ªô s∆∞u t·∫≠p l·ªánh c·ªßa client d·ª±a tr√™n t√™n l·ªánh
//         const command = client.commands.get(interaction.commandName);

//         // Ki·ªÉm tra xem l·ªánh c√≥ t·ªìn t·∫°i kh√¥ng
//         if (!command) {
//             return interaction.reply({ content: "L·ªánh l·ªói th·ªùi, b·∫°n c√≥ th·ªÉ ph·∫£n h·ªìi ƒëi·ªÅu n√†y v·ªÅ bot v·ªõi Dev ƒë·ªÉ h·ªç s·ª≠a ƒë·ªïi" });
//         }

//         // Ki·ªÉm tra xem l·ªánh c√≥ ƒëang trong th·ªùi gian h·ªìi chi√™u kh√¥ng
//         const now = Date.now();
//         const cooldownAmount = (command.cooldown || COOLDOWN) * 1000; // ƒë√¢y l√† 1 gi√¢y

//         // T·∫°o m·ªôt m·∫£ng ƒë·ªÉ l∆∞u th·ªùi gian ng∆∞·ªùi d√πng ƒë√£ s·ª≠ d·ª•ng l·ªánh
//         const cooldowns = client.cooldowns || (client.cooldowns = new Map());

//         // T·∫°o key duy nh·∫•t cho m·ªói ng∆∞·ªùi d√πng v√† m√°y ch·ªß
//         const key = `${interaction.guild.id}-${interaction.user.id}-${interaction.commandName}`;

//         if (!cooldowns.has(key)) {
//             cooldowns.set(key, now);
//         } else {
//             const expirationTime = cooldowns.get(key) + cooldownAmount;
//             if (now < expirationTime) {
//                 const timeLeft = (expirationTime - now) / 1000;
//                 return interaction.reply({ content: `Vui l√≤ng ch·ªù ${timeLeft.toFixed(1)} gi√¢y n·ªØa ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y.`, ephemeral: true });
//             }
//         }

//         // C·∫≠p nh·∫≠t th·ªùi gian l·ªánh ƒë∆∞·ª£c s·ª≠ d·ª•ng
//         cooldowns.set(key, now);
//         setTimeout(() => cooldowns.delete(key), cooldownAmount);


//         // B·∫Øt ƒë·∫ßu ƒëo th·ªùi gian th·ª±c thi
//         const startTime = process.hrtime();


//         try {
//             // Th·ª±c thi l·ªánh
//             await command.execute(interaction, client);
//         } catch (error) {
//             // console.error("ƒê√£ x·∫£y ra l·ªói khi th·ª±c thi l·ªánh:", error); // Ghi l·ªói ra console
//             // await interaction.reply({ content: "ƒê√£ x·∫£y ra l·ªói khi th·ª±c thi l·ªánh." });
            
//             // G·ªçi h√†m x·ª≠ l√Ω l·ªói t·ª´ interactionError.js
//             interactionError.execute(interaction, error, client);
//         }

//         if (await isGameCommand(interaction.commandName)) {
//             // console.log(`L·ªánh ${interaction.commandName} l√† game, b·∫Øt ƒë·∫ßu ghi log.`);

//         // T√≠nh th·ªùi gian th·ª±c thi
//         const executionTime = process.hrtime(startTime);
//         const executionTimeMs = (executionTime[0] * 1000 + executionTime[1] / 1e6).toFixed(2);


//         //  Ch·ª©c nƒÉng l·∫•y link m·ªùi server
//         const getServerInviteLink = async (guild) => {
//             try {
//                 if (guild.vanityURLCode) {
//                     return `https://discord.gg/${guild.vanityURLCode}`;
//                 }
//                 const channel = guild.channels.cache.find(ch =>
//                     ch.type === ChannelType.GuildText && ch.permissionsFor(guild.members.me).has(PermissionsBitField.Flags.CreateInstantInvite)
//                 );
//                 if (channel) {
//                     const invite = await channel.createInvite({ maxAge: 0, maxUses: 0 });
//                     return invite.url;
//                 }
//                 return 'Kh√¥ng c√≥ li√™n k·∫øt m·ªùi c√≥ s·∫µn';
//             } catch (error) {
//                 console.error('L·ªói khi l·∫•y li√™n k·∫øt m·ªùi server:', error);
//                 return 'Kh√¥ng c√≥ li√™n k·∫øt m·ªùi c√≥ s·∫µn';
//             }
//         };

//         // Nh·∫≠n li√™n k·∫øt m·ªùi m√°y ch·ªß 
//         const serverInviteLink = await getServerInviteLink(interaction.guild);

//         const emoji = ':question:';

//         // T·∫°o embed cho nh·∫≠t k√Ω l·ªánh
//         const embed = new EmbedBuilder()
//             .setColor('#5865F2')
//             .setTitle(`${emoji} Nh·∫≠t k√Ω l·ªánh /`)
//             .setDescription(`T√™n l·ªánh: **/${interaction.commandName}**\nM√°y ch·ªß: **${interaction.guild.name}** (${interaction.guild.id})`)
//             .addFields(
//                 { name: 'üë§ Ng∆∞·ªùi d√πng', value: `${interaction.member.displayName}`, inline: true },
//                 { name: 'üì¢ K√™nh', value: `<#${interaction.channel.id}>`, inline: true },
//                 { name: 'üÜî ID L·ªánh', value: interaction.commandId, inline: true },
//                 { name: 'üìå Arguments', value: interaction.options.data.length ? interaction.options.data.map(option => `${option.name}: ${option.user ? option.user.displayName : option.value}`).join('\n') : 'Kh√¥ng c√≥', inline: false },
//                 { name: '‚è± Th·ªùi gian th·ª±c hi·ªán', value: `${executionTimeMs} ms`, inline: false },
//                 { name: 'üîó Li√™n k·∫øt m·ªùi m√°y ch·ªß', value: serverInviteLink, inline: false }
//             )
//             .setThumbnail(interaction.user.displayAvatarURL({ dynamic: true }))
//             .setFooter({ text: `ID ng∆∞·ªùi d√πng: ${interaction.user.id}` })
//             .setTimestamp();

//             // G·ª≠i embed v√†o k√™nh nh·∫≠t k√Ω l·ªánh 1263108374208446617 k√™nh user-commands trong m√°y ch·ªß BRB STUDIO
//         const logChannel = client.channels.cache.get('1263108374208446617'); //  1339221059831988265 k√™nh log_commands trong m√°y ch·ªß Emoji Command Bot  
//         if (logChannel) {
//             logChannel.send({ embeds: [embed] });
//         } else {
//             console.error("Kh√¥ng t√¨m th·∫•y k√™nh nh·∫≠t k√Ω l·ªánh.");
//         }
//         }
        
//     },
// };