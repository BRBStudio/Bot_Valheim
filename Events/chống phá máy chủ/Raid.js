const { Collection, EmbedBuilder, ChannelType, PermissionsBitField } = require('discord.js');
const BannedUser = require('../../schemas/Raid');
const raidUsers = new Collection();
const suspiciousReasons = new Map();

module.exports = {
    name: 'guildMemberAdd',
    async execute(member) {
        const guildId = member.guild.id;
        const userId = member.id;

        if (member.user.bot) return;

        // L·∫•y config t·ª´ MongoDB
        const config = await BannedUser.findOne({ guildId });
        if (!config || !config.enabled) return; // N·∫øu ch∆∞a b·∫≠t ho·∫∑c kh√¥ng t·ªìn t·∫°i th√¨ kh√¥ng l√†m g√¨

        if (!raidUsers.has(guildId)) {
            raidUsers.set(guildId, new Collection());
        }

        const guildRaids = raidUsers.get(guildId);
        guildRaids.set(userId, Date.now());

        // ƒêi·ªÅu ki·ªán ƒë√°ng ng·ªù b·ªï sung
        const user = member.user;
        const suspicious = [];

        if (!user.avatar) suspicious.push("Kh√¥ng c√≥ h√¨nh ƒë·∫°i di·ªán");
        const accountAgeMs = Date.now() - user.createdAt.getTime();
        if (accountAgeMs < 1000 * 60 * 60 * 24) suspicious.push("T√†i kho·∫£n m·ªõi t·∫°o d∆∞·ªõi 1 ng√†y");

        if (suspicious.length > 0) {
            suspiciousReasons.set(userId, suspicious);
            triggerRaidProtection(member.guild); // K√≠ch ho·∫°t ngay n·∫øu c√≥ d·∫•u hi·ªáu ƒë√°ng ng·ªù
            return;
        }

        // N·∫øu kh√¥ng c√≥ nghi v·∫•n, ch·ªâ theo d√µi trong 10 gi√¢y
        setTimeout(() => {
            raidUsers.delete(userId);
            suspiciousReasons.delete(userId); // D·ªçn d·∫πp l√Ω do nghi ng·ªù (n·∫øu c√≥)
        }, 10000); // X√≥a ng∆∞·ªùi d√πng kh·ªèi danh s√°ch sau 10 gi√¢y

        if (guildRaids.size >= 10) {
            triggerRaidProtection(member.guild);
        }
    }
};

// ‚öôÔ∏è Helper functions
const formatDate = (date) => {
    return date.toLocaleString('vi-VN', {
        weekday: 'long',
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit',
        timeZone: 'Asia/Ho_Chi_Minh',
        timeZoneName: 'short'
    });
};

async function getOrCreateRaidChannel(guild) {
    const categoryName = "Ph√°t hi·ªán v√† ngƒÉn ch·∫∑n ng∆∞·ªùi d√πng ph√° server";
    const channelName = "raid";

    // T√¨m category ƒë√£ t·ªìn t·∫°i
    let category = guild.channels.cache.find(
        c => c.type === ChannelType.GuildCategory && c.name === categoryName
    );

    // N·∫øu ch∆∞a c√≥ category, t·∫°o m·ªõi
    if (!category) {
        category = await guild.channels.create({
            name: categoryName,
            type: ChannelType.GuildCategory,
            position: 0
        });
    }

    // T√¨m k√™nh t√™n "raid" trong category
    let raidChannel = guild.channels.cache.find(
        c => c.name === channelName && c.parentId === category.id
    );

    // N·∫øu ch∆∞a c√≥ k√™nh "raid", t·∫°o m·ªõi trong category
    if (!raidChannel) {
        raidChannel = await guild.channels.create({
            name: channelName,
            type: ChannelType.GuildText,
            parent: category.id,
            permissionOverwrites: [
                {
                    id: guild.roles.everyone.id,
                    deny: [PermissionsBitField.Flags.SendMessages]
                }
            ]
        });
    }

    return raidChannel;
}

async function triggerRaidProtection(guild) {
    const guildRaids = raidUsers.get(guild.id);
    const logChannel = await getOrCreateRaidChannel(guild);

    if (!logChannel) return;

    let bannedUsersInfo = [];

    for (const [userId] of guildRaids) {
        const member = await guild.members.fetch(userId).catch(() => null);

        if (member && !member.user.bot) {
            await member.ban({ reason: 'üö® B·∫£o v·ªá Raid: Ph√°t hi·ªán ho·∫°t ƒë·ªông ƒë√°ng ng·ªù!' });

            const username = member.user.tag;
            const createdAtFormatted = formatDate(member.user.createdAt);
            const joinedAtFormatted = member.joinedAt ? formatDate(member.joinedAt) : "Kh√¥ng x√°c ƒë·ªãnh";
            const banDateFormatted = formatDate(new Date());
            const avatarURL = member.user.displayAvatarURL({ dynamic: true, size: 1024 }) || "Kh√¥ng c√≥ h√¨nh ƒë·∫°i di·ªán.";
            const banner = (await member.user.fetch())?.bannerURL({ dynamic: true, size: 1024 }) || "Kh√¥ng c√≥ bi·ªÉu ng·ªØ.";
            const roles = member.roles.cache.filter(r => r.id !== guild.id).map(r => `<@&${r.id}>`).join(', ') || "Kh√¥ng c√≥ vai tr√≤.";
            const reasons = suspiciousReasons.get(userId)?.join(', ') || "Kh√¥ng x√°c ƒë·ªãnh.";

            // ‚úÖ Ch·ªâ l∆∞u n·∫øu ch∆∞a c√≥ ho·∫∑c c·∫≠p nh·∫≠t n·∫øu ƒë√£ c√≥
            await BannedUser.updateOne(
                { guildId: guild.id },
                {
                $setOnInsert: {
                    enabled: true,
                    // logChannelId: null
                }
                },
                { upsert: true }
            );

            bannedUsersInfo.push({
                mention: `<@${userId}>`,
                username,
                userId,
                createdAtFormatted,
                joinedAtFormatted,
                banDateFormatted,
                avatarURL,
                banner,
                roles,
                reasons
            });
            suspiciousReasons.delete(userId); // X√≥a l√Ω do nghi ng·ªù
        }
    }

    const embed = new EmbedBuilder()
        .setTitle('üö® ƒê√£ k√≠ch ho·∫°t b·∫£o v·ªá Raid!')
        .setColor('#ff0000')
        .setDescription('üìå **Nh·ªØng ng∆∞·ªùi d√πng sau ƒë√¢y ƒë√£ b·ªã c·∫•m do c√≥ ho·∫°t ƒë·ªông ƒë√°ng ng·ªù:**');

    bannedUsersInfo.forEach(user => {
        embed.addFields([
            { name: "üë§ ng∆∞·ªùi d√πng:", value: `${user.mention} (${user.displayName})`, inline: true },
            { name: "üÜî ID:", value: user.userId, inline: true },
            { name: "üìÖ Th·ªùi gian t·∫°o t√†i kho·∫£n:", value: user.createdAtFormatted, inline: false },
            { name: "üì• Th·ªùi gian ƒë√£ tham gia server:", value: user.joinedAtFormatted, inline: false },
            { name: "‚õî Ng√†y gi·ªù h·ªá th·ªëng ban ng∆∞·ªùi d√πng n√†y:", value: user.banDateFormatted, inline: false },
            { name: "üé≠ Vai tr√≤:", value: user.roles, inline: false },
            { name: "üñºÔ∏è Avatar:", value: user.avatarURL, inline: false },
            { name: "üé® h·ªì s∆° banner:", value: user.banner.startsWith('http') ? `[Xem banner](${user.banner})` : user.banner, inline: false }, // value: user.banner
            { name: "üö© L√Ω do nghi ng·ªù:", value: user.reasons, inline: false }
        ]);
    });

    logChannel.send({ embeds: [embed] });
    raidUsers.delete(guild.id);
}




// const { Collection, EmbedBuilder } = require('discord.js');
// const BannedUser = require('../../schemas/Raid');
// const AntiRaidConfig = require('../../schemas/AntiRaidConfig');
// const raidUsers = new Collection();
// const logChannelId = '1343948968731738185';

// module.exports = {
//     name: 'guildMemberAdd',
//     async execute(member) {
//         const guildId = member.guild.id;
//         const userId = member.id;

//         if (member.user.bot) return;

//         // L·∫•y config t·ª´ MongoDB
//         const config = await AntiRaidConfig.findOne({ guildId });
//         if (!config || !config.enabled) return; // N·∫øu ch∆∞a b·∫≠t ho·∫∑c kh√¥ng t·ªìn t·∫°i th√¨ kh√¥ng l√†m g√¨

//         if (!raidUsers.has(guildId)) {
//             raidUsers.set(guildId, new Collection());
//         }

//         const guildRaids = raidUsers.get(guildId);
//         guildRaids.set(userId, Date.now());

//         setTimeout(() => {
//             raidUsers.delete(userId);
//         }, 10000);

//         if (guildRaids.size >= 1) {
//             triggerRaidProtection(member.guild);
//         }
//     }
// };

// // ‚öôÔ∏è Helper functions
// const formatDate = (date) => {
//     return date.toLocaleString('vi-VN', {
//         weekday: 'long',
//         year: 'numeric',
//         month: '2-digit',
//         day: '2-digit',
//         hour: '2-digit',
//         minute: '2-digit',
//         second: '2-digit',
//         timeZone: 'Asia/Ho_Chi_Minh',
//         timeZoneName: 'short'
//     });
// };

// async function triggerRaidProtection(guild) {
//     const guildRaids = raidUsers.get(guild.id);
//     const logChannel = await guild.channels.fetch(logChannelId).catch(() => null);

//     if (!logChannel) return;

//     let bannedUsersInfo = [];

//     for (const [userId] of guildRaids) {
//         const member = await guild.members.fetch(userId).catch(() => null);

//         if (member && !member.user.bot) {
//             await member.ban({ reason: 'üö® B·∫£o v·ªá Raid: Ph√°t hi·ªán ho·∫°t ƒë·ªông ƒë√°ng ng·ªù!' });

//             const username = member.user.tag;
//             const createdAtFormatted = formatDate(member.user.createdAt);
//             const joinedAtFormatted = member.joinedAt ? formatDate(member.joinedAt) : "Kh√¥ng x√°c ƒë·ªãnh";
//             const banDateFormatted = formatDate(new Date());
//             const avatarURL = member.user.displayAvatarURL({ dynamic: true, size: 1024 }) || "Kh√¥ng c√≥ h√¨nh ƒë·∫°i di·ªán.";
//             const banner = (await member.user.fetch())?.bannerURL({ dynamic: true, size: 1024 }) || "Kh√¥ng c√≥ bi·ªÉu ng·ªØ.";
//             const roles = member.roles.cache.filter(r => r.id !== guild.id).map(r => `<@&${r.id}>`).join(', ') || "Kh√¥ng c√≥ vai tr√≤.";

//             await BannedUser.create({
//                 userId,
//                 username,
//                 guildId: guild.id
//             });

//             bannedUsersInfo.push({
//                 mention: `<@${userId}>`,
//                 username,
//                 userId,
//                 createdAtFormatted,
//                 joinedAtFormatted,
//                 banDateFormatted,
//                 avatarURL,
//                 banner,
//                 roles
//             });
//         }
//     }

//     const embed = new EmbedBuilder()
//         .setTitle('üö® ƒê√£ k√≠ch ho·∫°t b·∫£o v·ªá Raid!')
//         .setColor('#ff0000')
//         .setDescription('üìå **Nh·ªØng ng∆∞·ªùi d√πng sau ƒë√¢y ƒë√£ b·ªã c·∫•m do c√≥ ho·∫°t ƒë·ªông ƒë√°ng ng·ªù:**');

//     bannedUsersInfo.forEach(user => {
//         embed.addFields([
//             { name: "üë§ ng∆∞·ªùi d√πng:", value: `${user.mention} (${user.displayName})`, inline: true },
//             { name: "üÜî ID:", value: user.userId, inline: true },
//             { name: "üìÖ Th·ªùi gian t·∫°o t√†i kho·∫£n:", value: user.createdAtFormatted, inline: false },
//             { name: "üì• Th·ªùi gian ƒë√£ tham gia server:", value: user.joinedAtFormatted, inline: false },
//             { name: "‚õî Ng√†y gi·ªù h·ªá th·ªëng ban ng∆∞·ªùi d√πng n√†y:", value: user.banDateFormatted, inline: false },
//             { name: "üé≠ Vai tr√≤:", value: user.roles, inline: false },
//             { name: "üñºÔ∏è Avatar:", value: user.avatarURL, inline: false },
//             { name: "üé® h·ªì s∆° banner:", value: user.banner.startsWith('http') ? `[Xem banner](${user.banner})` : user.banner, inline: false } // value: user.banner
//         ]);
//     });

//     logChannel.send({ embeds: [embed] });
//     raidUsers.delete(guild.id);
// }