const { EmbedBuilder } = require('discord.js');
const events = require('events');


module.exports = class BRB_Fishventure extends events {
    /**
    * ƒê·∫°i di·ªán cho m·ªôt tr√≤ ch∆°i Fishy.
    * @constructor
    * @param {Object} options - C√°c t√πy ch·ªçn cho tr√≤ ch∆°i Fishy.
    * @param {boolean} [options.isSlashGame=false] - Tr√≤ ch∆°i c√≥ s·ª≠ d·ª•ng l·ªánh slash hay kh√¥ng.
    * @param {Object} options.message - ƒê·ªëi t∆∞·ª£ng tin nh·∫Øn li√™n quan ƒë·∫øn tr√≤ ch∆°i.
    * @param {Object} [options.embed={}] - C√°c t√πy ch·ªçn embed cho tr√≤ ch∆°i.
    * @param {string} [options.embed.title='H√íM C√Å'] - Ti√™u ƒë·ªÅ c·ªßa embed.
    * @param {string} [options.embed.color='#551476'] - M√†u s·∫Øc c·ªßa embed.
    * @param {Object} [options.player={}] - C√°c t√πy ch·ªçn ng∆∞·ªùi ch∆°i trong tr√≤ ch∆°i.
    * @param {string} [options.player.id] - ID c·ªßa ng∆∞·ªùi ch∆°i.
    * @param {number} [options.player.balance=50] - S·ªë d∆∞ c·ªßa ng∆∞·ªùi ch∆°i.
    * @param {Object} [options.player.fishes={}] - C√°c lo·∫°i c√° m√† ng∆∞·ªùi ch∆°i s·ªü h·ªØu.
    * @param {Object} [options.fishes={}] - C√°c lo·∫°i c√° c√≥ s·∫µn trong tr√≤ ch∆°i.
    * @param {Object} [options.fishes.rac] - C√°c t√πy ch·ªçn cho lo·∫°i c√° r√°c.
    * @param {string} [options.fishes.rac.emoji='üîß'] - Bi·ªÉu t∆∞·ª£ng emoji ƒë·∫°i di·ªán cho lo·∫°i c√° r√°c.
    * @param {number} [options.fishes.rac.price=5] - Gi√° c·ªßa lo·∫°i c√° r√°c.
    * @param {Object} [options.fishes.cute] - C√°c t√πy ch·ªçn cho lo·∫°i c√° th√¥ng th∆∞·ªùng.
    * @param {string} [options.fishes.cute.emoji='üêü'] - Bi·ªÉu t∆∞·ª£ng emoji ƒë·∫°i di·ªán cho lo·∫°i c√° th√¥ng th∆∞·ªùng.
    * @param {number} [options.fishes.cute.price=10] - Gi√° c·ªßa lo·∫°i c√° th√¥ng th∆∞·ªùng.
    * @param {Object} [options.fishes.condo] - C√°c t√πy ch·ªçn cho lo·∫°i c√° kh√¥ng ph·ªï bi·∫øn.
    * @param {string} [options.fishes.condo.emoji='üê†'] - Bi·ªÉu t∆∞·ª£ng emoji ƒë·∫°i di·ªán cho lo·∫°i c√° kh√¥ng ph·ªï bi·∫øn.
    * @param {number} [options.fishes.condo.price=20] - Gi√° c·ªßa lo·∫°i c√° kh√¥ng ph·ªï bi·∫øn.
    * @param {Object} [options.fishes.vip] - C√°c t√πy ch·ªçn cho lo·∫°i c√° hi·∫øm.
    * @param {string} [options.fishes.vip.emoji='üê°'] - Bi·ªÉu t∆∞·ª£ng emoji ƒë·∫°i di·ªán cho lo·∫°i c√° hi·∫øm.
    * @param {number} [options.fishes.vip.price=50] - Gi√° c·ªßa lo·∫°i c√° hi·∫øm.
    * @param {number} [options.fishyRodPrice=20] - Gi√° thu√™ c·∫ßn c√¢u c√°.
    * @param {string} [options.catchMessage='B·∫°n ƒë√£ c√¢u ƒë∆∞·ª£c m·ªôt {fish}. B·∫°n ƒë√£ tr·∫£ {amount} cho c·∫ßn c√¢u.'] - Tin nh·∫Øn hi·ªÉn th·ªã khi b·∫Øt ƒë∆∞·ª£c c√°.
    * @param {string} [options.sellMessage='B·∫°n ƒë√£ b√°n ƒë∆∞·ª£c {amount} x {fish} {type} m·∫∑t h√†ng v·ªõi t·ªïng gi√° tr·ªã l√† {price}.'] - Tin nh·∫Øn hi·ªÉn th·ªã khi b√°n c√°.
    * @param {string} [options.noBalanceMessage='B·∫°n kh√¥ng ƒë·ªß ti·ªÅn ƒë·ªÉ thu√™ c·∫ßn c√¢u.'] - Tin nh·∫Øn hi·ªÉn th·ªã khi ng∆∞·ªùi ch∆°i kh√¥ng ƒë·ªß s·ªë d∆∞ ƒë·ªÉ thu√™ c·∫ßn c√¢u c√°.
    * @param {string} [options.invalidTypeMessage='Lo·∫°i c√° ch·ªâ c√≥ th·ªÉ l√† r√°c, th√¥ng th∆∞·ªùng, hi·∫øm ho·∫∑c hi·∫øm.'] - Tin nh·∫Øn hi·ªÉn th·ªã khi lo·∫°i c√° kh√¥ng h·ª£p l·ªá ƒë∆∞·ª£c cung c·∫•p.
    * @param {string} [options.invalidAmountMessage='S·ªë l∆∞·ª£ng ph·∫£i n·∫±m trong kho·∫£ng t·ª´ 2 ƒë·∫øn s·ªë l∆∞·ª£ng c√° t·ªëi ƒëa.'] - Tin nh·∫Øn hi·ªÉn th·ªã khi s·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá ƒë∆∞·ª£c cung c·∫•p.
    * @param {string} [options.noItemMessage='T√∫i c·ªßa b·∫°n kh√¥ng c√≥ b·∫•t k·ª≥ m·∫∑t h√†ng n√†o trong s·ªë n√†y.'] - Tin nh·∫Øn hi·ªÉn th·ªã khi ng∆∞·ªùi ch∆°i kh√¥ng c√≥ v·∫≠t ph·∫©m y√™u c·∫ßu trong kho ƒë·ªì.
    */
	constructor(options = {}) {

		if (!options.isSlashGame) options.isSlashGame = false;
		if (!options.message) throw new TypeError('NO_MESSAGE: Kh√¥ng c√≥ t√πy ch·ªçn tin nh·∫Øn n√†o ƒë∆∞·ª£c cung c·∫•p.');
		if (typeof options.message !== 'object') throw new TypeError('INVALID_MESSAGE: t√πy ch·ªçn tin nh·∫Øn ph·∫£i l√† m·ªôt ƒë·ªëi t∆∞·ª£ng.');
		if (typeof options.isSlashGame !== 'boolean') throw new TypeError('INVALID_COMMAND_TYPE: T√πy ch·ªçn isSlashGame ph·∫£i l√† boolean.');


		if (!options.embed) options.embed = {};
		if (!options.embed.title) options.embed.title = 'T√öI C√Å';
		if (!options.embed.color) options.embed.color = '#551476';

		if (!options.player) options.player = {};
		if (!options.player.id) options.player.id = options.message[options.isSlashGame ? 'user' : 'author'].id;
		if (!options.player.balance && options.player.balance !== 0) options.player.balance = 50;
		if (!options.player.fishes) options.player.fishes = {};

		if (!options.fishes) options.fishes = {};
		if (!options.fishes.rac) options.fishes.rac = { emoji: '<:Ca_Rac:1320587649031082025>', price: 1000 };
		if (!options.fishes.cute) options.fishes.cute = { emoji: '<a:Ca_Cute:1320587839158747228>', price: 2500 };
		if (!options.fishes.condo) options.fishes.condo = { emoji: '<a:Ca_Codon:1320588046302711920>', price: 4000 };
		if (!options.fishes.vip) options.fishes.vip = { emoji: '<a:Ca_Vip:1320587932666695762>', price: 8000 };

		// Th√™m 10 lo·∫°i c√° m·ªõi ch∆∞a x·ª≠ l√Ω
		if (!options.fishes.newFish1) options.fishes.newFish1 = { emoji: '<:fish5:1307739319208775745>', price: 1500 };
		if (!options.fishes.newFish2) options.fishes.newFish2 = { emoji: '<:fish6:1307739319208775746>', price: 2000 };
		if (!options.fishes.newFish3) options.fishes.newFish3 = { emoji: '<:fish7:1307739319208775747>', price: 2500 };
		if (!options.fishes.newFish4) options.fishes.newFish4 = { emoji: '<:fish8:1307739319208775748>', price: 3000 };
		if (!options.fishes.newFish5) options.fishes.newFish5 = { emoji: '<:fish9:1307739319208775749>', price: 3500 };
		if (!options.fishes.newFish6) options.fishes.newFish6 = { emoji: '<:fish10:1307739319208775750>', price: 4000 };
		if (!options.fishes.newFish7) options.fishes.newFish7 = { emoji: '<:fish11:1307739319208775751>', price: 4500 };
		if (!options.fishes.newFish8) options.fishes.newFish8 = { emoji: '<:fish12:1307739319208775752>', price: 5000 };
		if (!options.fishes.newFish9) options.fishes.newFish9 = { emoji: '<:fish13:1307739319208775753>', price: 5500 };
		if (!options.fishes.newFish10) options.fishes.newFish10 = { emoji: '<:fish14:1307739319208775754>', price: 6000 };

		if (!options.fishyRodPrice) options.fishyRodPrice = 10000;
		if (!options.catchMessage) options.catchMessage = 'B·∫°n ƒë√£ c√¢u ƒë∆∞·ª£c m·ªôt {fish}. B·∫°n ƒë√£ tr·∫£ {amount} vnd cho c·∫ßn c√¢u.';
		if (!options.sellMessage) options.sellMessage = 'B·∫°n ƒë√£ b√°n ƒë∆∞·ª£c {amount} x {fish} v·ªõi t·ªïng gi√° tr·ªã l√† {price}.'; // {type} {type}
		if (!options.noBalanceMessage) options.noBalanceMessage = 'B·∫°n kh√¥ng ƒë·ªß ti·ªÅn ƒë·ªÉ thu√™ c·∫ßn c√¢u.';
		if (!options.invalidTypeMessage) options.invalidTypeMessage = 'Lo·∫°i c√° ch·ªâ c√≥ th·ªÉ l√† r√°c, th√¥ng th∆∞·ªùng, hi·∫øm ho·∫∑c hi·∫øm.';
		if (!options.invalidAmountMessage) options.invalidAmountMessage = 'S·ªë l∆∞·ª£ng ph·∫£i n·∫±m trong kho·∫£ng t·ª´ 2 ƒë·∫øn s·ªë l∆∞·ª£ng c√° t·ªëi ƒëa.';
		if (!options.noItemMessage) options.noItemMessage = 'T√∫i c√° c·ªßa b·∫°n kh√¥ng c√≥ b·∫•t k·ª≥ m·∫∑t h√†ng n√†o trong s·ªë n√†y.';


		if (typeof options.embed !== 'object') throw new TypeError('INVALID_EMBED: T√πy ch·ªçn nh√∫ng ph·∫£i l√† m·ªôt ƒë·ªëi t∆∞·ª£ng.');
		if (typeof options.embed.title !== 'string') throw new TypeError('INVALID_EMBED: Ti√™u ƒë·ªÅ nh√∫ng ph·∫£i l√† m·ªôt chu·ªói.');
		if (typeof options.player !== 'object') throw new TypeError('INVALID_PLAYER: T√πy ch·ªçn ng∆∞·ªùi ch∆°i ph·∫£i l√† m·ªôt ƒë·ªëi t∆∞·ª£ng.');
		if (typeof options.player.id !== 'string') throw new TypeError('INVALID_PLAYER: Id ng∆∞·ªùi ch∆°i ph·∫£i l√† m·ªôt chu·ªói.');
		if (typeof options.player.fishes !== 'object') throw new TypeError('INVALID_PLAYER: C√° c·ªßa ng∆∞·ªùi ch∆°i ph·∫£i l√† m·ªôt v·∫≠t th·ªÉ.');
		if (typeof options.player.balance !== 'number') throw new TypeError('INVALID_PLAYER: Ti·ªÅn c·ªßa ng∆∞·ªùi ch∆°i ph·∫£i l√† m·ªôt con s·ªë.');
		if (typeof options.fishyRodPrice !== 'number') throw new TypeError('INVALID_PRICE: Gi√° c·∫ßn c√¢u ph·∫£i l√† m·ªôt con s·ªë.');
		if (typeof options.catchMessage !== 'string') throw new TypeError('INVALID_MESSAGE: T√πy ch·ªçn tin nh·∫Øn b·∫Øt ph·∫£i l√† m·ªôt chu·ªói.');
		if (typeof options.sellMessage !== 'string') throw new TypeError('INVALID_MESSAGE: T√πy ch·ªçn tin nh·∫Øn b√°n ph·∫£i l√† m·ªôt chu·ªói.');
		if (typeof options.noBalanceMessage !== 'string') throw new TypeError('INVALID_MESSAGE: Kh√¥ng c√≥ t√πy ch·ªçn tin nh·∫Øn s·ªë d∆∞ ph·∫£i l√† m·ªôt chu·ªói.');
		if (typeof options.invalidTypeMessage !== 'string') throw new TypeError('INVALID_MESSAGE: T√πy ch·ªçn tin nh·∫Øn InvalidType ph·∫£i l√† m·ªôt chu·ªói.');
		if (typeof options.invalidAmountMessage !== 'string') throw new TypeError('INVALID_MESSAGE: T√πy ch·ªçn tin nh·∫Øn InvalidAmount ph·∫£i l√† m·ªôt chu·ªói.');
		if (typeof options.noItemMessage !== 'string') throw new TypeError('INVALID_MESSAGE: t√πy ch·ªçn tin nh·∫Øn noItem ph·∫£i l√† m·ªôt chu·ªói.');
		if (!options.message.deferred && options.isSlashGame) options.message.deferReply().catch(e => {});

		super();
		this.options = options;
		this.message = options.message;
		this.player = options.player;
		this.fishes = options.fishes;
	}


	async sendMessage(content) {  
		if (this.options.isSlashGame) {
			if (!this.message.deferred) return await this.message.reply(content);
			else return await this.message.editReply(content);
		}
		else return await this.message.channel.send(content);
	}


	async Begin() {
		let fishType = 'vip'; // rare
		const fishId = Math.floor(Math.random() * 10) + 1;

		if (fishId < 5) fishType = 'rac'; // junk
		else if (fishId < 8) fishType = 'cute'; // common
		else if (fishId < 10) fishType = 'condo'; // uncommon

		const fish = this.fishes[fishType];
		if (this.player.balance < this.options.fishyRodPrice) return this.sendMessage({ content: this.options.noBalanceMessage });
		const content = this.options.catchMessage.replace('{fish}', fish.emoji).replace('{amount}', this.options.fishyRodPrice);


		this.player.balance -= this.options.fishyRodPrice;
		this.player.fishes[fishType] = (this.player.fishes[fishType] || 0) + 1;

		this.fishType = fishType;
		this.emit('Begin', { player: this.player, fishType: fishType, fish: fish });
		return await this.sendMessage({ content: content });
	}


	// async sellFish(type, amount) {
	// 	if (!this.fishes[type]) return this.sendMessage({ content: this.options.invalidTypeMessage });
	// 	if (!this.player.fishes[type]) return this.sendMessage({ content: this.options.noItemMessage });
	// 	if (parseInt(amount) < 0 || parseInt(amount) > this.player.fishes[type]) return this.sendMessage({ content: this.options.invalidAmountMessage });


	// 	const fish = this.fishes[type];
	// 	const content = this.options.sellMessage.replace('{amount}', amount).replace('{type}', type).replace('{fish}', fish.emoji).replace('{price}', (fish.price * amount));

	// 	this.player.fishes[type] -= amount;
	// 	this.player.balance += (fish.price * amount);

	// 	this.emit('sellFish', { player: this.player, fishType: type, fish: fish });
	// 	return await this.sendMessage({ content: content });
	// }

	async sellFish(type, amount) {

		if (!this.fishes[type]) {
			return this.sendMessage({ content: this.options.invalidTypeMessage });
			}

		if (!this.player.fishes[type] || this.player.fishes[type] < amount) {
			// Ki·ªÉm tra s·ªë l∆∞·ª£ng c√° c√≥ trong t√∫i
			return this.sendMessage({ content: this.options.invalidAmountMessage });
			}

		if (parseInt(amount) <= 0) {
			// Ki·ªÉm tra s·ªë l∆∞·ª£ng nh·∫≠p c√≥ h·ª£p l·ªá kh√¥ng
			return this.sendMessage({ content: this.options.invalidAmountMessage });
			}
	
		const fish = this.fishes[type];
		const content = this.options.sellMessage
			.replace('{amount}', amount)
			.replace('{type}', type)
			.replace('{fish}', fish.emoji)
			.replace('{price}', fish.price * amount);
	
		// C·∫≠p nh·∫≠t t√∫i c√° v√† s·ªë d∆∞
		this.player.fishes[type] -= amount;
		this.player.balance += fish.price * amount;
	
		this.emit('sellFish', { player: this.player, fishType: type, fish: fish });
		return await this.sendMessage({ content: content });
	}

	// fishyInventory
	async Fishbag() {
		const fishes = (['vip', 'condo', 'cute'].map(e => `**\u2000${this.fishes[e.toLowerCase()].emoji} C√° ${e}** ‚Äî ${this.player.fishes[e.toLowerCase()] || 0}`).join('\n\n'));

		const embed = new EmbedBuilder()
			.setColor(this.options.embed.color)
			.setTitle(this.options.embed.title)
			.setAuthor({ name: this.message.author.tag, iconURL: this.message.author.displayAvatarURL({ dynamic: true }) })
			.setDescription(fishes + `\n\n\u2000**${this.fishes.rac.emoji} R√°c** ‚Äî ${this.player.fishes.rac || 0}`)
			.setTimestamp()

		return await this.sendMessage({ embeds: [embed] });
	}
}